<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>程序人生</title>
    <subtitle>记录、思考、分享</subtitle>
    <link rel="self" type="application/atom+xml" href="https://wangzaixiang.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-10-13T00:00:00+00:00</updated>
    <id>https://wangzaixiang.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Oct 2025</title>
        <published>2025-10-13T00:00:00+00:00</published>
        <updated>2025-10-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-10/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-10/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-10/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Rust
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@syntaxSavage&#x2F;generic-associated-types-gats-the-rust-feature-that-finally-solves-async-trait-hell-b9b79d14a422&quot;&gt;Generic Asoociated Types&lt;&#x2F;a&gt;
如何理解 async traits 及更为基础的 GAT？&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@syntaxSavage&#x2F;rusts-new-borrow-checker-polonius-is-coming-a890fc5ffd8b&quot;&gt;Polonius: Rust&#x27;s new borrow checking&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Pros: more precise, fewer false errors, ability to accept more safe code, groundwork for self-borrows.&lt;&#x2F;li&gt;
&lt;li&gt;Cons: more complex analysis, potentially more memory and CPU overhead, risk of regressions for big codebases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;polonius&#x2F;&quot;&gt;Polonius Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@the_atomic_architect&#x2F;we-deleted-tokio-from-our-payment-system-and-cut-cloud-costs-by-127-000-b745a86f973b&quot;&gt;We Deleted Tokio From Our Payment System and Cut Cloud Costs by $127,000&lt;&#x2F;a&gt;
Medium 上的标题党也是越来越多了，这篇文章尝试得出了一个不算太错误的结论，但却做出了完全错误的归因。
&lt;ul&gt;
&lt;li&gt;这个业务场景技术要求其实很低，QPS &amp;lt; 1000，根本用不上什么高大上的技术，使用 Thread 完全是满足要求的。&lt;&#x2F;li&gt;
&lt;li&gt;但将成本原因归结于 async 却是头痛开错了药方，虽然杀鸡用了牛刀，但杀不死鸡并不是牛刀的问题，而是作者在 async 框架中使用了 sync 的 postgres 库，而又只配置了较小的线程，
导致大部份线程实际上处在 Blocking 状态，导致 RTT 大幅提升。
这种错误的归因，其危害不亚于选择笨重的框架。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Zig
&lt;ul&gt;
&lt;li&gt;Zig 0.15.2 Released 据说又是一个破坏性的版本。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;Mpp &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;DataFusion 有一段时间没有跟进 DataFusion 的新特性了。
&lt;ul&gt;
&lt;li&gt;48.0.0
&lt;ul&gt;
&lt;li&gt;performance: fewer unnecessary projections&lt;&#x2F;li&gt;
&lt;li&gt;performance: Accelerated string functions(ascii, character_length)&lt;&#x2F;li&gt;
&lt;li&gt;performance: Constant aggregate window expressions&lt;&#x2F;li&gt;
&lt;li&gt;grammar: order by all&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;49.0.0
&lt;ul&gt;
&lt;li&gt;performance: dynamic filters and topK pushdown&lt;&#x2F;li&gt;
&lt;li&gt;async UDF&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;50.0.0
&lt;ul&gt;
&lt;li&gt;performance: dynamic filter pushdown improvements(for hash joins)&lt;&#x2F;li&gt;
&lt;li&gt;performance: nested loop join optimization&lt;&#x2F;li&gt;
&lt;li&gt;parquet metadata caching&lt;&#x2F;li&gt;
&lt;li&gt;grammar: support qualify stmt&lt;&#x2F;li&gt;
&lt;li&gt;grammar: filter support for window functions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;ai-agent&quot;&gt;AI &amp;amp; Agent&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ai.gopubby.com&#x2F;graphflow-rust-native-orchestration-for-multi-agent-workflows-6143a9b767ad&quot;&gt;graphflow: multi agent flow&lt;&#x2F;a&gt;
正好最近我们也设计了一个基于 flow 的多 agent 框架，再看看这篇文章，感觉这个设计还是太粗糙了些。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sep 2025</title>
        <published>2025-09-04T00:00:00+00:00</published>
        <updated>2025-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-09/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-09/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-09/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;Mpp &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@orami98&#x2F;12-revolutionary-web-apis-that-will-replace-your-javascript-libraries-in-2026-bf95b64ce1e3&quot;&gt;12 Revolutionary Web APIs That Will Replace Your JavaScript Libraries in 2026&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Declarative Shadow DOM: Component isolation without frameworks.&lt;&#x2F;li&gt;
&lt;li&gt;View Transition API(document.startViewTransition) without JS Frameworks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ai-agent&quot;&gt;AI &amp;amp; Agent&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;task weaver
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;taskweaver&#x2F;&quot;&gt;github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;export.arxiv.org&#x2F;abs&#x2F;2311.17541&quot;&gt;TaskWeaver: A Code-First Agent Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AI时代的软件研发思考</title>
        <published>2025-08-30T00:00:00+00:00</published>
        <updated>2025-08-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/vibe-coding/"/>
        <id>https://wangzaixiang.github.io/blog/vibe-coding/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/vibe-coding/">&lt;h1 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h1&gt;
&lt;p&gt;最近的这些年，AI显然是处在一个加速发展和应用的阶段，记得 chatgpt 在2022年底推出之时，我身边的一些朋友（资深级）就发出了“程序员将被AI替代“的
哀嚎。2024年底 deepseek R1 横空出世，中国网民也一夜从大模型的荒漠（之前使用 chatgpt 有诸多不便）跃升为大模型使用自由，其推理能力、编码能力又
有了很大的提升。&lt;&#x2F;p&gt;
&lt;p&gt;我从2023年开始体验了github copilot这款编程助理工具，当时就有一种惊艳之感：确实，很多时候，我只需要编写一下 comment，copilot
就可以帮我完成
接下来的编码工作，尤其是在尝试一些新的编程语言，或者使用一些新的library, framework时，大幅的缩短了遗忘的查找资料，编写代码，调试的开发过程，
编码效率应该说是又很大提升的。&lt;&#x2F;p&gt;
&lt;p&gt;2024年，又开始使用 cursor ide，相比copilot, cursor在智能化上更进一步，很多时候连注释都省掉了，smart tab 在诸多时候，都想你所想，再结合
对话式交互，在编程体验上再次大幅提升。与 Copilot 相比的话，Github Copilot 只能算冷兵器时代，而 cursor 则进入到热兵器时代，开始有自动化、机械化的
感觉了。&lt;&#x2F;p&gt;
&lt;p&gt;最近，Claude Code 再次火爆出圈，我也赶上去蹭了个热度，在过去的1周时间，利用零星的时间，利用 CC
做了一些尝试。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;compare-lang-performance&quot;&gt;compare-lang-performance&lt;&#x2F;a&gt;
就是其中的一个实验项目，通过和CC进行对话式交互，最终产出了这个性能对比的测试工具。作为体验CC的一次实验，我的基本工作流程包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;需求定义流程：向 CC 说明项目的基本目标，请 CC 进行详细的需求规格描述，如果你对这个 spec 不满意，可以通过多次对话交互进行修正。&lt;&#x2F;li&gt;
&lt;li&gt;编码流程： 让 CC 编写代码，运行测试进行验证。&lt;&#x2F;li&gt;
&lt;li&gt;反复迭代：
&lt;ul&gt;
&lt;li&gt;增加新的功能：例如，增加新的测试语言、新的测试代码&lt;&#x2F;li&gt;
&lt;li&gt;重构设计：例如将配置信息从代码中抽离出来，从 json 到 toml 到 yaml，以及多次调整配置的格式（配置项的设计）&lt;&#x2F;li&gt;
&lt;li&gt;调整命令行工具的能力，包括支持新的 CLI 选项、调整输出报告的形式。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;更新 Readme.md 文件，将测试结果同步到该文件中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在这次体验过程中，我有意识的不去直接进行编码工作，而是尽可能的通过与 CC 交互来达成我的目的，因此，这个项目中几乎全部的代码都是
CC 编写、修正完成的。
这一点不同于之前使用 Copilot 和 Cursor 的模式：在过去的体验中，代码的主题流程、骨架都是我收工编写，AI 仅在过程中穿插协助。&lt;&#x2F;p&gt;
&lt;p&gt;虽然是一次小的尝试，还有很多的 CC 能力并没有充分利用起来，但这个体验过程带给了我一些全新的思考，我会在这片 Blog
中记录我的所思所虑，以期待能够
找到未来（不需要那么遥远，或许就是接下来的某个区间）的正确的 AI 使用模式。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;yi-ji-yu-vibe-coding-de-ruan-jian-kai-fa-bian-hua&quot;&gt;一、基于 Vibe Coding 的软件开发变化&lt;&#x2F;h1&gt;
&lt;p&gt;基于 Claude Code 这样的 vibe tools，相比传统软件开发会带来以下根本性变化：&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-kai-fa-liu-cheng-de-gen-ben-xing-zhuan-bian&quot;&gt;1. 开发流程的根本性转变&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cong-min-jie-mo-shi-zhuan-bian-wei-vibemo-shi&quot;&gt;从&lt;code&gt;敏捷模式&lt;&#x2F;code&gt; 转变为 &lt;code&gt;Vibe模式&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传统模式&lt;&#x2F;strong&gt;：编写需求文档 → 设计方案 → 写代码 → 调试 → 修改代码的循环
代价：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;团队要求高：要求全能的团队、高昂的沟通成本、管理成本&lt;&#x2F;li&gt;
&lt;li&gt;沟通效率低：受限于团队人员的认知水平差异，以及传统的编写文档、方案、代码的低效率，时间效率 + 统一语言 + 认知对齐
带来了大的鸿沟。&lt;&#x2F;li&gt;
&lt;li&gt;偏爱妥协的风格：无论是调整需求、设计方案、现有代码，都受限于团队沟通和迭代效率，以及其他不确定的风险，团队更偏向于达成保守的、妥协的方案，
以规避风险，而非大胆创新、突破。&lt;&#x2F;li&gt;
&lt;li&gt;迭代速度慢：除了传统流程自身的周期长导致迭代效率慢之外，历史包袱带来的影响也非常巨大。以致与项目越往后走，单位人天的产出越来越低，而系统的复杂性则越来越高，
形成一种恶性的反馈增强机制。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vibe模式&lt;&#x2F;strong&gt;：描述需求（对话式迭代） → AI生成（生成方案、代码、文档） → 对话式迭代优化
有如从&lt;code&gt;瀑布式开发模式&lt;&#x2F;code&gt;演变为&lt;code&gt;敏捷开发模式&lt;&#x2F;code&gt;，再发展到&lt;code&gt;Vibe模式&lt;&#x2F;code&gt;时，会带来很大的变化：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;团队发生变化：一个人就可以成为一个超级团队（产品经理、架构师、开发工程师、测试工程师），能力全面&lt;&#x2F;li&gt;
&lt;li&gt;沟通效率提升，管理成员下降。一个人的团队在这方面具有量级上的突破。&lt;&#x2F;li&gt;
&lt;li&gt;追求极致成为可能的风格，没有做不到，就怕想不到。当然，这里也对架构师提出了更高的要求，你的远见、创意决定了最终的可能性。&lt;&#x2F;li&gt;
&lt;li&gt;大胆重构、创新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-spec-first&quot;&gt;2. Spec-First&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cong-guo-cheng-shi-she-ji-zhuan-xiang-han-shu-shi-gui-ge&quot;&gt;从过程式设计转向函数式规格&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传统开发中，很多细节在编码过程中才考虑清楚，在设计阶段过细，可能浪费大量时间，且后续实际上会偏离实际代码而成为鸡肋。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;传统流程中，很多的方案更偏重于 How 风格的过程式设计, 而 VibeCode 流程中，更偏重于 What 风格的函数式风格。
作为一名 Functional Programming 的爱好者，我的过往经验告诉我：Functional Code 具有更高的抽象层次，相比 Procedure
Code，具有更为简单的数据流，从可读性
到代码质量都会有明显提升。而应用到软件过程、软件方案时，也非常有效：能够提供一个明确的、清晰的、可验证的目标，远胜过陷入实现细节的过程描述（这个甚之于团队管理、与教练艺术、
个人规划都符合相同的逻辑 ）。
在 VibeCode 模式下，这个风格就成为显学了，因为这也是你驱动 AI 工作的基本方式，为 AI 提供明确、清晰的指令，是有效产出的必备技能。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bu-tong-ren-wu-xia-de-gui-ge-ding-yi&quot;&gt;不同任务下的规格定义&lt;&#x2F;h3&gt;
&lt;p&gt;在vibe编程中，规格定义变得更加重要，根据不同的任务，需要相应的规格定义：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;功能规格
&lt;ul&gt;
&lt;li&gt;Use Case - 用户使用场景和交互流程&lt;&#x2F;li&gt;
&lt;li&gt;User Story - 以用户为中心的功能需求描述&lt;&#x2F;li&gt;
&lt;li&gt;Business Logic - Rules, Workflow etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;接口规格
&lt;ul&gt;
&lt;li&gt;CLI: 命令行接口设计（参数、选项、输出格式）&lt;&#x2F;li&gt;
&lt;li&gt;API: restful style, RPC style
&lt;ul&gt;
&lt;li&gt;Contract Spec: pre-condition, post-condition, invariant&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SPI: 面向 OCP 扩展的接口设计。&lt;&#x2F;li&gt;
&lt;li&gt;Configuration - 配置文件格式定义。很多复杂的系统，配置文件应该面向用户进行设计，是软件的架构的一个投影。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Data 规格
&lt;ul&gt;
&lt;li&gt;Entity-Relation Model &#x2F; Database Schema&lt;&#x2F;li&gt;
&lt;li&gt;Class Model&lt;&#x2F;li&gt;
&lt;li&gt;Domain Model: Entity(lifecycle, query, command), Value, Event, Service etc.&lt;&#x2F;li&gt;
&lt;li&gt;C4 Model: Context， Container, Component, Class&lt;&#x2F;li&gt;
&lt;li&gt;CRC(Class Responsibility Card): 职责优先&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;QA
&lt;ul&gt;
&lt;li&gt;Test Case - 单元测试、集成测试用例, TDD, BDD etc&lt;&#x2F;li&gt;
&lt;li&gt;Performance - 性能指标和基准测试&lt;&#x2F;li&gt;
&lt;li&gt;Security - 安全策略和权限控制&lt;&#x2F;li&gt;
&lt;li&gt;Error Handling - 异常处理和错误恢复策略&lt;&#x2F;li&gt;
&lt;li&gt;Version Compatible: 版本兼容策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dev Ops
&lt;ul&gt;
&lt;li&gt;Logging&#x2F;Monitoring - 日志记录和监控指标&lt;&#x2F;li&gt;
&lt;li&gt;Deployment - 部署流程和环境配置&lt;&#x2F;li&gt;
&lt;li&gt;Visibility&#x2F;Observability - 可观测性要求&lt;&#x2F;li&gt;
&lt;li&gt;Backup&#x2F;Recovery - 备份和恢复策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Others
&lt;ul&gt;
&lt;li&gt;依赖相关：希望选择的框架、库，以及不希望使用的框架、库&lt;&#x2F;li&gt;
&lt;li&gt;构建工具&lt;&#x2F;li&gt;
&lt;li&gt;目录结构&lt;&#x2F;li&gt;
&lt;li&gt;代码：编程语言选择，编程风格选择（我更偏向于functional），代码风格（缩进、命名等）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yi-jiao-hu-zeng-liang-de-fang-shi-jin-xing-spec-ding-yi&quot;&gt;以交互、增量的方式进行 Spec 定义&lt;&#x2F;h3&gt;
&lt;p&gt;整理一份良好定义的 Spec 来作为下一阶段的任务开发（包括编码、测试）自身成为了 Vibe Coding 中最为重要的工作，对于复杂系统而言，这个是最大的挑战，
事实上，大部份的软件（尤其是历史悠久的系统）存在或多或少的问题：包括 bug，安全漏洞，难以维护、难以扩展 等问题，很多人会简单的归类为软件代码太乱太复杂，
大部份的日常工作也是在代码层面的修修补补。但实际上，绝大部分的问题其实应该归根为设计上的问题，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;需求设计的问题：概念定义是否清晰、系统内是否有一致的概念。&lt;&#x2F;li&gt;
&lt;li&gt;架构设计的问题：层次结构、职责、契约是否清晰定义。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;区分一个问题到底是代码层面的问题还是设计层面的问题，我的判断方式是：如果是代码问题，那么这应该是一个局部的（不会在其他地方反复重复同样或者相似的问题）、
可以快速修复并避免反复发生的问题，也就是说，是修复成本不高，并且修复后不会带来新的复杂性的问题，这些可以归结为简单的编码质量问题，而如果出现如下特征：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;存在很多相似问题（是面性问题，而非点性问题）&lt;&#x2F;li&gt;
&lt;li&gt;问题无法彻底修复&lt;&#x2F;li&gt;
&lt;li&gt;问题修复后，系统的复杂性进一步恶化
那么这其实是一个设计层面的问题：如果不从概念定义、架构设计层面彻底的解决，而是单纯的补丁方式解决问题，最终会导致整个系统的复杂性提升、技术包袱越来越沉重。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;3-jiao-se-he-ji-neng-yao-qiu-de-shen-ke-bian-hua&quot;&gt;3. 角色和技能要求的深刻变化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cheng-xu-yuan-jiao-se-zhuan-bian&quot;&gt;程序员角色转变&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;从&quot;代码编写者&quot;变成&quot;定义者 + 评审者 + 创意者”的转变&lt;&#x2F;li&gt;
&lt;li&gt;目标定义者：
&lt;ul&gt;
&lt;li&gt;梳理你的目标，你能否讲清楚（讲清楚目标是成本的第一步），实际工作中，很多同学既讲不清楚目标，也不清楚自己不清楚目标，混沌前行是常态。&lt;&#x2F;li&gt;
&lt;li&gt;不仅软件开发，不清楚目标几乎是人类的常态。（《高绩效教练》一书其实就是在教练这个过程）&lt;&#x2F;li&gt;
&lt;li&gt;将目标从混沌态整理成为明确清晰可行的结果，其实是解决问题的最关键步骤。对于复杂的问题，你应该将这个过程单独一个阶段，利用
AI 来帮你整理，而不是立刻投入下一阶段的工组。&lt;&#x2F;li&gt;
&lt;li&gt;你需要多花一些时间来真实理解用户的业务、需求&lt;&#x2F;li&gt;
&lt;li&gt;你需要多花一些时间来学习这个领域的专业知识。&lt;&#x2F;li&gt;
&lt;li&gt;你需要多花一些时间来了解目前解决这一类问题的基本方法、竟品等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;评审者：对 AI 的回答进行思考，这是否满足了你的目标
&lt;ul&gt;
&lt;li&gt;你应该是一个挑剔者，不要接受低标准的结果。可以进一步发送改进的指令，尝试一个你心目中更好的答案。&lt;&#x2F;li&gt;
&lt;li&gt;如果 AI 不能给到你有效的答案，你需要重新思考自己的目标定义，给出更具体的指令，或者在关键位置上越过 AI 自己动手。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;创意者：你定义的目标的价值越高，后续的产出就会越高。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ji-neng-men-jian-zhong-xin-ding-yi&quot;&gt;技能门槛重新定义&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降低技术门槛&lt;&#x2F;strong&gt;：语法、API查找等技术细节不再是瓶颈&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;提高业务门槛&lt;&#x2F;strong&gt;：对系统设计、业务逻辑的理解要求更高&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&quot;会提问&quot;比&quot;会写代码&quot;更重要&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;4-yi-ge-ren-jiu-shi-yi-ge-tuan-dui-kai-fa-zi-yuan-de-chong-yu-yu-jiao-se-bian-jie-de-xiao-jie&quot;&gt;4. 一个人就是一个团队：开发资源的充裕与角色边界的消解&lt;&#x2F;h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;1942599600293802943&quot;&gt;MIT 大牛传授 Vibe Coding 正确姿势：AI 不是新手的入门玩具，而是专家的超级工具&lt;&#x2F;a&gt;
原文：https:&#x2F;&#x2F;www.stochasticlifestyle.com&#x2F;a-guide-to-gen-ai-llm-vibecoding-for-expert-programmers&#x2F;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;核心心智模型：把 LLM 当作一个 &lt;code&gt;大二实习生&lt;&#x2F;code&gt;: 懂基础，会模仿，能执行，知识面广而不深。&lt;&#x2F;li&gt;
&lt;li&gt;高手的 Vibe Coding 工作流：当好「包工头」，别当「码农」&lt;&#x2F;li&gt;
&lt;li&gt;秘诀一：批量布置「简单明确」任务，然后走开&lt;&#x2F;li&gt;
&lt;li&gt;秘诀二：像扔垃圾一样扔掉坏代码&lt;&#x2F;li&gt;
&lt;li&gt;秘诀三：追求「总成功数」，而非「成功率」&lt;&#x2F;li&gt;
&lt;li&gt;秘诀四：先在你最熟悉的代码上用
&amp;gt; 结论：正确完成 Vibe Coding 是专家的任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在 Vibe Coding 之前，要完成一定复杂性的软件产品的研发，我们需要一个一定规模的研发团队，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;产品经理，定义需求&lt;&#x2F;li&gt;
&lt;li&gt;架构师：负责技术选项、架构设计，也包括一些核心代码的开发工作。&lt;&#x2F;li&gt;
&lt;li&gt;开发工程师：区分资深层次、普通层次的工程师，一般是数量最多的&lt;&#x2F;li&gt;
&lt;li&gt;测试工程师：区分白盒测试、黑盒测试。&lt;&#x2F;li&gt;
&lt;li&gt;部署、运维工程师。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这里，开发工程师、测试工程师一般是人数最多的，也是开发周期中最为频繁的沟通、管理对象：从理解需求、理解设计、编写代码、编写测试用例，大部份的工作
都依赖与手工，大部份的沟通工作都涉及到彼此之间（包括从需求到设计、从设计到编码、从编码到测试，以及拆分后的相互依赖），日常会存在大量的沟通、协调工作，
以弥补团队认知的差异。也有很多的时间浪费是处在等待之中：下游等待上游，任务协作者之间的相互等待。&lt;&#x2F;p&gt;
&lt;p&gt;Vibe Coding 将对这一模式产生很大的冲击，使得架构师将承担更大的职责，完成软件产品的功能定义、架构定义、特性规划，并指挥多个
LLM 并行完成包括：
文档编写、 代码（包括测试代码）的编写工作，并最终交付更高质量的软件产品。&lt;&#x2F;p&gt;
&lt;p&gt;参照 Stochastic 的工作方式，借助于 AI 编程工具，一个架构师可以同时调动 3 - 10 个（作者宣称有大约32个 claude agent
在持续运行，我对此还是有些诧异）
AI agent，让他们进行协同完成你布置的任务。&lt;&#x2F;p&gt;
&lt;p&gt;在 Vibe Coding 模式下，架构师（专家）的个人能力边界将大幅度扩展：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个人可以承担产品经理、架构师、开发工程师、测试工程师等多个角色&lt;&#x2F;li&gt;
&lt;li&gt;小团队可以完成原本需要大团队的工作&lt;&#x2F;li&gt;
&lt;li&gt;跨语言、跨技术栈的成本大幅降低(试想原本需要拆分为多个岗位，而现在 LLM 可以承担几乎每一个岗位)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同时，新的管理方式， 团队的协作成本降低：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对团队间沟通的依赖显著降低&lt;&#x2F;li&gt;
&lt;li&gt;团队管理成本和沟通成本都大幅减少&lt;&#x2F;li&gt;
&lt;li&gt;在良好的架构支撑基础之上，LLM 可以表现出平衡的、Good 的编程能力、设计能力（可以把 LLM 类比为在每个领域都能打 80分
的那个选手）。而架构师
则要成为那个能打 90-120 分的领导者。（当然，如果你的水平是 80分，那么 LLM 也会在此基础上打上折扣）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5-kai-fa-su-du-he-zhong-gou-tai-du-de-ge-xin&quot;&gt;5. 开发速度和重构态度的革新&lt;&#x2F;h2&gt;
&lt;p&gt;Vibe Coding 会带来开发效率的大幅提升：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从想法到可运行原型的时间大幅缩短: 大部份情况下，从你给出清晰的描述到 LLM 生成原型代码，这个时间将从传统的 人天量级 降低到
5-10 分钟量级。
而且从原型的角度来说，它几乎是完美的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;设计的周期也大幅降低：传统的方式下，要形成一份设计完整的设计方案，往往需要较长时间的深思熟虑、整理和论证工作（这里有很大比例是一些非核心的工作，
但作为一个完整的体系，又不可或缺）。而今，你可以把精力聚焦到设计方案中的核心部份，而充分利用 LLM 的广播的知识面来处理大量的细节问题。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;重构成本降低，在有良好的测试用例辅助的情况下，对现有设计中存在的不合理问题，我们可以大胆的重构，乃至于彻底的重新设计，果断的放弃历史包袱。(
在
传统的模式中，这一块的成本要高得多，以至于我们很多时候会做太多的妥协，而架构设计的合理性则会辅助提升下一阶段 LLM
编写代码、修复问题的效率和质量)&lt;&#x2F;p&gt;
&lt;p&gt;相应的，在 Vibe Coding 时代，如果你现有的项目满足：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;清晰的领域划分（水平拆解）、分层架构（垂直拆解）&lt;&#x2F;li&gt;
&lt;li&gt;系统各个模块具有高内聚、低耦合特性。&lt;&#x2F;li&gt;
&lt;li&gt;各个类、函数有明确的职责、接口定义、接口契约，并配套有完备的单元测试代码&lt;&#x2F;li&gt;
&lt;li&gt;一致的代码风格、规范。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;也就是说，整个系统更具有一致性、简单性，不仅仅对普通用户而言具有更好的可理解性、可维护性，也会对 LLM 来说，有更好的可理解性，这就会在后续的
Vibe Coding
中有利于 LLM 更好的完成你交付的开发任务。因此，架构师的角色就需要更聚焦在整个系统的简单性、清晰性上来，这个对架构师提出了更高的挑战和要求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;眼界：你需要有理解简单性、一致性的能力。&lt;&#x2F;li&gt;
&lt;li&gt;审美意识：你需要有判断优美与丑陋、简单与复杂、低效与高效的能力和意识&lt;&#x2F;li&gt;
&lt;li&gt;抽象能力：当识别出味道后，提出改进方案的能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这些能力是架构师所独有的特质，其需要每一个架构师持续的学习、实践和探索。所以 Vibe Coding 即释放了架构师的时间和精力，以促成架构师有更多的时间思考和改进
架构能力，另一方面，又以足够的执行力支撑架构师更多的创新。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-vibe-coding-kai-fa-de-hu-cheng-he-ji-zhi&quot;&gt;6. Vibe Coding  开发的护城河机制&lt;&#x2F;h2&gt;
&lt;p&gt;在Vibe Coding 开发的&quot;快速迭代&quot;过程中，如何保证方案和代码的质量，避免重构带来的未知的问题，例如破环版本兼容等，需要建立多层次的护城河机制：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;测试用例作为护城河: Vibe Coding 可以帮助我们生成足够的、高质量的测试用例。这是重构的有利保障。&lt;&#x2F;li&gt;
&lt;li&gt;代码覆盖率测试&lt;&#x2F;li&gt;
&lt;li&gt;lint 工具测试。对 rust 这类的语言，rustc 和 clipper 反馈的警告，都要予以关注。&lt;&#x2F;li&gt;
&lt;li&gt;API 兼容性保证。当重构代码，而有需要保持API兼容性时，可以提供工具，检查重构前后的兼容性问题。&lt;&#x2F;li&gt;
&lt;li&gt;在 claude.md 中明确补充有关的原则：例如，代码风格、最佳实践、不容许的行为等等。&lt;&#x2F;li&gt;
&lt;li&gt;单一变更：每次对话只改变一个明确的方面，避免大幅度变更，便于代码评审、验证、快速回滚等&lt;&#x2F;li&gt;
&lt;li&gt;人工把关：对AI 提交的代码进行人工把关，对核心层的代码变更，更可能需要逐行检查。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这个也非常符合引文中提到的 shift-left 机制。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;er-shi-jian-ji-qiao-yu-fang-fa-lun&quot;&gt;二、实践技巧与方法论&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;“一分钟目标”法&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在《一分钟经理人》一书中，“一分钟目标”是一个核心概念。其工作方式是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;管理者清晰陈述目标 →&lt;&#x2F;li&gt;
&lt;li&gt;双方共同思考并复述目标以确保理解无误 →&lt;&#x2F;li&gt;
&lt;li&gt;最终达成一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;它强调目标必须是清晰、简洁、可衡量的，并且能在一分钟内被完整地阅读和理解。这与 Vibe Coding 的核心思想高度一致：给 AI 的指令（目标）
必须经过“陈述-思考-复述”的打磨过程，确保其足够清晰、具体，才能获得高质量的产出。模糊或冗长的目标会导致
AI 生成偏离预期的结果。在 Vibe Coding 中，我们应该像设定“一分钟目标”一样，与 AI 互动的方式来精心打磨我们的每一步指令，确保 AI 与
我们又相同的理解后才开始行动，避免无效的沟通。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;提出清晰的目标 vs 提出具体的操作指令
相比向 AI 发出具体的指令：&quot;请使用某某技术，生成代码&quot; 这样的指令，有的时候，阐明目标，但不限定具体的技术方案，而是交由 LLM 来思考，很多时候，
它可能会给到我们更多的惊喜：LLM 可能会提供更多的、更好的选择。&lt;&#x2F;p&gt;
&lt;p&gt;所以，善于提出开放性的问题，而非封闭性的问题，有可能更能发挥 LLM 的价值，为自己提供更多的技术选择。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;TODO 这一节内容将持续更新。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;san-quan-mian-yong-bao-ai-shi-xian-ye-wu-zhong-gou-cong-xin-xi-hua-mai-xiang-zhi-neng-hua&quot;&gt;三、 全面拥抱 AI，实现业务重构，从信息化迈向智能化&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;ye-wu-liu-cheng-quan-mian-aihua&quot;&gt;业务流程全面AI化&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;售前阶段&lt;&#x2F;strong&gt;：AI辅助需求分析和方案设计&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;运维客服&lt;&#x2F;strong&gt;：智能化故障诊断和用户服务&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;定制开发&lt;&#x2F;strong&gt;：快速响应个性化需求&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;业务应用&lt;&#x2F;strong&gt;：数据解释、AI报告生成&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chuan-tong-ruan-jian-zhi-de-zai-aishi-dai-zhong-xin-she-ji&quot;&gt;传统软件值得在AI时代重新设计&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;以AI-first的思路重新设计传统软件&lt;&#x2F;li&gt;
&lt;li&gt;在业务中深度嵌入AI能力，而非简单的功能叠加&lt;&#x2F;li&gt;
&lt;li&gt;追求极致的用户体验设计&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;TODO：本章内容带补充&lt;&#x2F;p&gt;
&lt;h1 id=&quot;si-xue-xi-he-cheng-chang-lu-jing-de-zhong-gou&quot;&gt;四、学习和成长路径的重构&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;xue-xi-zhong-xin-zhuan-yi&quot;&gt;学习重心转移&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;从&quot;学语法→学框架→做项目&quot;变成&quot;学需求分析→学系统设计→学AI协作&quot;&lt;&#x2F;li&gt;
&lt;li&gt;更注重跨领域知识的整合能力&lt;&#x2F;li&gt;
&lt;li&gt;代码所有权观念淡化，更关注系统的目标设计、架构设计，更关注系统的简单行、优美性和价值。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xin-de-xue-xi-fang-fa-gen-zhao-ai-xue-xi-rang-ai-dang-ni-de-lao-shi-he-xue-xi-zhu-shou&quot;&gt;新的学习方法：跟着 AI 学习，让 AI 当你的老师和学习助手&lt;&#x2F;h2&gt;
&lt;p&gt;作为一名架构师，你可能已经在某些领域拥有了深度的理解、认知，在这些方面，你是 master，而 AI 是你的 assistant，但在你熟悉的领域之外，你的知识、
能力则可能远逊于 LLM 了。今天的 LLM 可能已经在我们所知的所有领域都是一个好学生了，而你，则只是在很狭窄的几个领域内擅长，当然，在这些领域内，
你应该比 AI 做得更好才是。&lt;&#x2F;p&gt;
&lt;p&gt;这个时候，我完全可以通过向 AI 进行发问，让其帮我整理出我最关心的一些问题的答案，有的时候，尤其是在一些具有可迁移性的领域，是非常有价值的。&lt;&#x2F;p&gt;
&lt;p&gt;案例1: 比如说，我是一名资深的 JavaScript 工程师，我现在需要学习 Python，那么，我可以让 AI 帮我整理出：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;基本的语法、数据类型、数据结构、控制流对比。&lt;&#x2F;li&gt;
&lt;li&gt;高级特性：如反射、元编程等对比。
通过对比的方式，来学习一门新的语言，简直是太方便了。这个案例可以查看&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;learning-language&#x2F;blob&#x2F;main&#x2F;python-for-javascript&#x2F;src&#x2F;introduction.md&quot;&gt;Python for Javascript Developers&lt;&#x2F;a&gt;
文档，这是我通过 AI 来编写的一篇对比两种语言的文档输出。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;案例2: 在 medium 上有一篇很好的技术文章：&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@orami98&#x2F;12-revolutionary-web-apis-that-will-replace-your-javascript-libraries-in-2026-bf95b64ce1e3&quot;&gt;12 Revolutionary Web APIs That Will Replace Your JavaScript Libraries in 2026&lt;&#x2F;a&gt;
介绍了12个新的 Web API，对于WEB 应用来说，了解最新的浏览器能力，并合理的应用，对提高我们应用的能力，以及简化应用开发的复杂性会带来巨大的改变。
但是这篇文章有一个缺陷：没有提供一个测试、验证的示例，对我们来理解这些API 有一定的困难。这个时候，我可以请求 AI:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据文章内容，对每一个 API，生成一个 example，以帮助我进行理解（帮助我们建立对 API 能力的基本认知，并通过案例边改边学）。&lt;&#x2F;li&gt;
&lt;li&gt;对每一个API，为我提供官方的文档链接（学习新技术的最佳实践就是阅读其官方资料，或得一个相对完整的认知）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我将这个例子放到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;twelve-revolutionary-web-api&quot;&gt;twelve-revolutionary-web-api&lt;&#x2F;a&gt; 项目。&lt;&#x2F;p&gt;
&lt;p&gt;如果没有 AI 的辅助，我要理解这12个 API 需要花费的时间可能会多很多倍，而现在，我的学习时间就显著降低，而且效果还更好了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vibecoding-shi-dai-jia-gou-shi-de-gao-du-jiang-jiu-shi-ruan-jian-de-gao-du&quot;&gt;VibeCoding 时代，架构师的高度将就是软件的高度&lt;&#x2F;h2&gt;
&lt;p&gt;AI 时代，程序员可能是最早收到冲击的一个行业，目前，中国的业界普遍存在这样的一些观点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;AI 时代，程序员的工作将大部份被 AI 替代&lt;&#x2F;li&gt;
&lt;li&gt;AI 时代，程序员不再重要，我只需要一个产品经理 或者 一个会编写提示词的工程师 就可以了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;包括我的一些老友（比较资深），也对开发这个职业比较灰心，觉得没有前途了。&lt;&#x2F;p&gt;
&lt;p&gt;我个人其实有一些不同的看法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确实，低水平程序员会受到较大的冲击，因为其不仅可以被 AI 所替代，而且 AI 的水平已经是中上游工程师的开发水平了。&lt;&#x2F;li&gt;
&lt;li&gt;但至少现阶段（未来我也不算太乐观），AI 的特征仍然是：知识广博，深度有限（其解决问题的方式仍然是模式匹配，在他见过的题型以内）、创新能力弱。
其能发挥多大的价值，完全依赖于驾驭者的认知水平。&lt;&#x2F;li&gt;
&lt;li&gt;如果你不能向 AI 正确的提出问题（提出正确的问题本身就是靠近解决方案的关键一步），AI 能给到答案价值就会有限。而能提出有价值的问题，自身就取决于
驾驭者的视野。&lt;&#x2F;li&gt;
&lt;li&gt;在一些复杂的场景下，AI 一开始给到的解决方案其实也只是：可以正确工作的一个原型，其作为最终软件产品的一部份依然是不足够的（如果仅仅是 short time
的交付物可能是足够的），你需要对其进行 review，并对不合理的地方给出清晰的解决指示。这个时候，你的判断力、审美观就是关键。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我个人的观点：如果你的能力是80分，那么 AI 的天花板就是 80分，而如果你的能力是90分，那么 AI 的能力也会显著提升。实际上，架构师和架构师的差距
往往不是百分比的差距，而是成倍、成级数的差别。传统的编程时代，一个优秀的工程师抵得上10个到100个平庸的工程师，AI 时代，这个差距只会更大：因为现在
我们真的只需要思考，而不需要花太多的时间敲代码了。&lt;&#x2F;p&gt;
&lt;p&gt;对中国的软件业而言，我觉得也是一个很好的新的机会。中国的软件业，尤其是应用软件，在过往的高速发展中，享受了中国高速发展的红利期，重商业模式，轻技术内涵，在低水平的
技术层面疯狂内卷，使用廉价的劳动力（仅仅是相对欧美），和 996 的福报体系，重战术努力（说的好听是高速迭代），轻战略投入（没有自己的核心技术），更
演进了奇葩的35岁就失业的职场潜规则，码农确实是货真价实的牛马、农民。在高速发展红利不再，企业需由重量改向重质，需要建立自己的核心技术价值之时，再
加上 AI 的突破性发展，我觉得一定会发生先死而后生的转变点。（无奈吐槽中）&lt;&#x2F;p&gt;
&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;vibe-coding-de-bian-cheng-yu-yan-bian-cheng-fan-shi-xuan-ze&quot;&gt;Vibe Coding 的编程语言、编程范式选择&lt;&#x2F;h2&gt;
&lt;p&gt;互联网上关于 AI 时代的最佳编程语言，已经有很多的争论了：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;solmaz.io&#x2F;typed-languages-are-better-suited-for-vibecoding&quot;&gt;Typed language are better for vibecoding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;DVxaQQqrFb6Vl3himVnAfg&quot;&gt;Shift-Left 式编程语言（Rust）是 AI 自动编码的最佳语言&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;szabgab&#x2F;what-is-shift-left-programming-5601&quot;&gt;What is shift-left ⬅️ programming?&lt;&#x2F;a&gt;  在这篇文章中，作者介绍了
shift-left
的概念：在开发的尽早阶段（编码阶段、编译阶段、单元测试阶段 ...）越早保证质量的编程语言，就是
shift-left，这与我们传统的“测试左移”的理念是一致的，
只是走得更远一些。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;强类型编程相比动态类型语言可以在编译时发现尽可能的问题，后者则更依赖于运行时。（当然足够的 unit testing 可以作为
shift-left 的手段）&lt;&#x2F;li&gt;
&lt;li&gt;类似于 Rust 这样的强语义语言，可以避免类型安全、内存安全、并发安全、错误处理等问题，近乎达到编译通过即正确运行。&lt;&#x2F;li&gt;
&lt;li&gt;TDD&#x2F;unit testing 相比继承测试、UAT测试有更低的成本，支持更频繁的重构和迭代。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;然而，rust 在某些领域的语义复杂性也许会给 AI 带来很大的挑战，尤其是涉及到复杂的生命周期、类型系统时，哪些让自身用户都晕头转向的类型体操，很大可能
会让 LLM 不知所从。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Explicit is better than implicit
使用了较多隐式风格的编程语言，AI 理解时会带入较多的推断，阅读代码，容易产生错误，生成代码时则可能产生歧义。&lt;&#x2F;p&gt;
&lt;p&gt;AI 的理解能力虽然强大，但其推理是基于概率和模式匹配的。隐式的行为（如 Python 的 &lt;strong&gt;magic&lt;&#x2F;strong&gt; 方法、JavaScript
的类型强制转换、或依赖上下文的默认参数）
会增加 AI 理解意图的难度，容易导致生成的代码不符合预期。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;concise vs verbose&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;functional vs imperative&lt;&#x2F;p&gt;
&lt;p&gt;函数式的风格天然契合 AI：（甚至于这也非常匹配社会的分工模式：客户提出需求，供应商负责实现，领导给出目标，员工负责实现）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Vibe Coding 自身更倾向于分工：人负责定义目标，AI 负责实现目标。 当我们给出具体的实现过程描述时，这是一个对人来说低效的过程，而且可能限制了
AI 的选择。此外，复杂的过程描述增加了 AI 理解你的“意图”的负担，导致在细节上出错。&lt;&#x2F;li&gt;
&lt;li&gt;限制副作用，清晰的数据流，可以让 AI 生成的代码更简短、易于理解，易于验证，&lt;&#x2F;li&gt;
&lt;li&gt;更易于分解、组合，实现代码复用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gua-he-vibe-coding-de-ren-wu-lei-xing&quot;&gt;适合 Vibe Coding 的任务类型&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;修复局部的代码 Bug （安全漏洞）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tbc&quot;&gt;TBC&lt;&#x2F;h1&gt;
&lt;p&gt;本文目前处于酝酿阶段，会持续进行追加、修改，直至定稿。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>vega, d3, echart 3个绘图工具对比</title>
        <published>2025-08-14T00:00:00+00:00</published>
        <updated>2025-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/compare-vega-d3-echart/"/>
        <id>https://wangzaixiang.github.io/blog/compare-vega-d3-echart/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/compare-vega-d3-echart/">&lt;h1 id=&quot;compare-by-case&quot;&gt;Compare by Case&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;compare-vega-d3-echart&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;d3-bar-chart&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;@d3&#x2F;bar-chart&#x2F;2#chart&quot;&gt;D3 bar-chart&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chart &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Declare the chart dimensions and margins.
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;928&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginTop &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginRight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginBottom &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginLeft &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Declare the x (horizontal position) scale.
&lt;&#x2F;span&gt;&lt;span&gt;  const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;scaleBand&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      .domain(d3.groupSort(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, ([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;]) =&amp;gt; -d.frequency, (d) =&amp;gt; d.letter)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; descending frequency
&lt;&#x2F;span&gt;&lt;span&gt;      .range([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginLeft&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginRight&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;      .padding(0.1);
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Declare the y (vertical position) scale.
&lt;&#x2F;span&gt;&lt;span&gt;  const y = d3.scaleLinear()
&lt;&#x2F;span&gt;&lt;span&gt;      .domain([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span&gt;)])
&lt;&#x2F;span&gt;&lt;span&gt;      .range([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginBottom&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginTop&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create the SVG container.
&lt;&#x2F;span&gt;&lt;span&gt;  const svg = d3.create(&amp;quot;svg&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .attr(&amp;quot;width&amp;quot;, width)
&lt;&#x2F;span&gt;&lt;span&gt;      .attr(&amp;quot;height&amp;quot;, height)
&lt;&#x2F;span&gt;&lt;span&gt;      .attr(&amp;quot;viewBox&amp;quot;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;      .attr(&amp;quot;style&amp;quot;, &amp;quot;max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;%; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add a rect for each bar.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;steelblue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;selectAll&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;letter&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bandwidth&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add the x-axis and label.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;translate(0,${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginBottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;`)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;axisBottom&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tickSizeOuter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add the y-axis and label, and remove the domain line.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;translate(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;},0)&lt;&#x2F;span&gt;&lt;span&gt;`)
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;axisLeft&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tickFormat&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toFixed&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.domain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;marginLeft&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;currentColor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text-anchor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;↑ Frequency (%)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Return the SVG element.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;return svg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;d3-observable-plot-api&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;@d3&#x2F;bar-chart&#x2F;2#cell-546&quot;&gt;D3 Observable Plot API&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Plot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  y: {percent: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  marks: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Plot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;barY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, {x: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;letter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, y: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, fill: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;steelblue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, sort: {x: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Plot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ruleY&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;vega-bar&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vega.github.io&#x2F;vega&#x2F;examples&#x2F;bar-chart&#x2F;&quot;&gt;Vega bar&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$schema&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vega.github.io&#x2F;schema&#x2F;vega&#x2F;v6.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A basic bar chart example, with value labels shown upon pointer hover.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;G&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;87&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signals&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tooltip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {},
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rect:pointerover&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;datum&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rect:pointerout&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scales&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;band&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;domain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;domain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;orient&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;orient&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;marks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;band&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;steelblue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hover&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;align&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;baseline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#333&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tooltip.category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;band&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tooltip.amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-2&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tooltip.amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fillOpacity&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;datum === tooltip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;          ]
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;vega-lite&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vega.github.io&#x2F;vega-lite&#x2F;examples&#x2F;bar.html&quot;&gt;Vega Lite&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$schema&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vega.github.io&#x2F;schema&#x2F;vega-lite&#x2F;v6.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A simple bar chart with embedded data.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;      {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;      {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;81&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;      {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;G&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;87&lt;&#x2F;span&gt;&lt;span&gt;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nominal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;labelAngle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;}},
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quantitative&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;echat&quot;&gt;EChat&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;  xAxis: {
&lt;&#x2F;span&gt;&lt;span&gt;    type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    data: [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Mon&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tue&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Wed&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Thu&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fri&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sun&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  yAxis: {
&lt;&#x2F;span&gt;&lt;span&gt;    type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  series: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      data: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;130&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;performance-compare&quot;&gt;Performance Compare&lt;&#x2F;h1&gt;
&lt;p&gt;在这个&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;compare-chart&quot;&gt;项目&lt;&#x2F;a&gt;中，我对这3个框架, 基于 Stacked Area Chart 进行了一个简单的性能对比(36,600个数据点)：
对比结果：
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;compare-chart&#x2F;raw&#x2F;main&#x2F;doc&#x2F;result_safari.png&quot; alt=&quot;Safari Results&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;compare-chart&#x2F;raw&#x2F;main&#x2F;doc&#x2F;result_chrome.png&quot; alt=&quot;Chrome Results&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在 Stacked Area Chart 这个场景中, Vega(基于Canvas) 略优于 D3(基于svg)，远优于 Echart(~16x fast)。我之前有一个担心：Vega采用 Reactive Dataflow graph
的方式是否会存在性能问题，通过这个测试，消除了我的这个担心。完全可以放心的将 reactive dataflow 这种模式推广应用到更多的 UI 领域&lt;&#x2F;p&gt;
&lt;p&gt;我在思考应用于 low code 这一类的 应用中，基于声明式的方式来描述 UI 的交互行为，从而避免引入复杂的脚本，在带来强表达能力的同时，平衡配置的简单性、设计时的可视化、工具化能力。希望后续有机会能够落地&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Aug 2025</title>
        <published>2025-08-07T00:00:00+00:00</published>
        <updated>2025-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-08/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-08/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-08/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vale.dev&quot;&gt;Another Easy, Fast, Safe Langauge&lt;&#x2F;a&gt;
又一门野心勃勃的编程语言，能够同时在 easy, safe, fast 上获得平衡。其中的 generational reference 概念确实很有创意
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;verdagon.dev&#x2F;blog&#x2F;generational-references&quot;&gt;Vale&#x27;s Memory Safety Strategy: Generational References and Regions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;Mpp &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;browser.engineering&#x2F;index.html&quot;&gt;Web Browser Engineering&lt;&#x2F;a&gt; 介绍 Browser 原理的好资料。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ai-agent&quot;&gt;AI &amp;amp; Agent&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.anthropic.com&#x2F;engineering&#x2F;multi-agent-research-system&quot;&gt;How we built our multi-agent research system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;1928636720796136414&quot;&gt;Multi-Agent System，一篇就够了&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;模式
&lt;ul&gt;
&lt;li&gt;Plan - Executor(think-act-observe)&lt;&#x2F;li&gt;
&lt;li&gt;PDCA&lt;&#x2F;li&gt;
&lt;li&gt;主智能体：调度、全局思维、探索不同路径、聚焦整体目标&lt;&#x2F;li&gt;
&lt;li&gt;子智能体：拥有自己独立的上下文窗口、工具集和相对具体的任务目标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;TestCase
&lt;ul&gt;
&lt;li&gt;封闭目标&lt;&#x2F;li&gt;
&lt;li&gt;开放目标：使用 LLM 作为裁决者&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;搜索即压缩、压缩即智能
&lt;ul&gt;
&lt;li&gt;子智能体：消化大量原始知识，提炼出压缩后的洞见，交给主智能体进行提炼。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-08&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Jul 2025</title>
        <published>2025-07-07T00:00:00+00:00</published>
        <updated>2025-07-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-07/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-07/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-07/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;rust
&lt;ul&gt;
&lt;li&gt;[https:&#x2F;&#x2F;sharnoff.io&#x2F;blog&#x2F;why-rust-compiler-slow](Why is the Rust compiler so slow?)
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-07&#x2F;img.png&quot; alt=&quot;cargo build --timings&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-07&#x2F;img_1.png&quot; alt=&quot;opt-level&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;debug , LTO, optimization&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RUSTFLAGS=&quot;-Cllvm-args=-inline-threshold=50 -Cllvm-args=-inlinedefault-threshold=50 -Cllvm-args=-inlinehint-threshold=50&quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Reducing inlining with LLVM args;&lt;&#x2F;li&gt;
&lt;li&gt;Breaking up expensive functions in the main crate; and&lt;&#x2F;li&gt;
&lt;li&gt;Removing generics from dependencies to prevent needing to compile it in the main crate
Timeline:&lt;&#x2F;li&gt;
&lt;li&gt;We started at ~175s&lt;&#x2F;li&gt;
&lt;li&gt;Disabling LTO (and debug symbols!) got us to 51s (-71%)&lt;&#x2F;li&gt;
&lt;li&gt;Changing to opt-level = 1 on the final crate got us to 48.8s (-4%)&lt;&#x2F;li&gt;
&lt;li&gt;Reducing inlining with -C llvm-args got us to 40.7s (-16%)&lt;&#x2F;li&gt;
&lt;li&gt;Local changes got us to 37.7s (-7%)&lt;&#x2F;li&gt;
&lt;li&gt;Changes with dependencies got us to 32.3s (-14%)&lt;&#x2F;li&gt;
&lt;li&gt;Enabling -Zshare-generics got us to 29.1s (-10%)&lt;&#x2F;li&gt;
&lt;li&gt;And switching away from alpine got us to 9.1s (-69%)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.veeso.dev&#x2F;blog&#x2F;en&#x2F;leaktracer-a-rust-allocator-to-trace-memory-allocations&#x2F;&quot;&gt;Leaktracer: A Rust allocator to trace memory allocations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;zig
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kristoff.it&#x2F;blog&#x2F;zig-new-async-io&#x2F;&quot;&gt;zig&#x27;s new async io&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kristoff.it&#x2F;blog&#x2F;zig-colorblind-async-await&#x2F;&quot;&gt;What is Zig&#x27;s “Colorblind” Async&#x2F;Await?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Java
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;qxDNW5Ss3r4zhPSCqdXvqw&quot;&gt;小红书JDK升级带来10%整体性能提升，这份升级指南收好了！&lt;&#x2F;a&gt; 千年的JDK8问题
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;openjdk.org&#x2F;jeps&#x2F;307&quot;&gt;G1: Parallel Full GC for G1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;G1: Initiating Heap Occupancy Percent&lt;&#x2F;li&gt;
&lt;li&gt;G1: 提前回收大对象
总的感觉来说，对大型系统，Java的GC仍然带来了一定程度的不可控因素，所有的 GC 调优其实都是在这个不确定性上跳舞，获得或多或少的改进，
但仍然是存在不确定性。这就是在一个低维度的挣扎。（不过，作为应用层的编程语言，不采纳 GC 的成本可能更高 ）&lt;&#x2F;li&gt;
&lt;li&gt;Java 的优点和缺点可能是现在的生态，在不需要那么臃肿的场景下，可能会越来越臃肿。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.swift.org&#x2F;blog&#x2F;swift-at-apple-migrating-the-password-monitoring-service-from-java&#x2F;&quot;&gt;从 Java 迁移到 Swift: 密码监控服务&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxplanet.org&#x2F;dashboard-that-works-a-step-by-step-guide-for-startups-in-2025-1cec1bfe7f9c&quot;&gt;Dashboard That Works: A Step-by-Step Guide for Startups in 2025&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A truly functional dashboard:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GOALS, DATA, PEOPLE, LOGIC&lt;&#x2F;li&gt;
&lt;li&gt;analysts, designers, developers&lt;&#x2F;li&gt;
&lt;li&gt;work for business, not just look pretty&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t try to make a dashboard for everyone&lt;&#x2F;li&gt;
&lt;li&gt;define use cases and users&lt;&#x2F;li&gt;
&lt;li&gt;identify key metrics&lt;&#x2F;li&gt;
&lt;li&gt;prepare data&lt;&#x2F;li&gt;
&lt;li&gt;sketch a rough layout&lt;&#x2F;li&gt;
&lt;li&gt;get user feedback&lt;&#x2F;li&gt;
&lt;li&gt;write a solid brief for designers&lt;&#x2F;li&gt;
&lt;li&gt;find the right builders&lt;&#x2F;li&gt;
&lt;li&gt;Launch, watch, improve&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[fastplotlib](a plotting library built on WGPU)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;based on [pygfx](a python-graphics library visualization framework on WGPU)
思考：结合 Vega, Pixi, D3 等框架，思考一种描述 visualization 的最佳方式。&lt;&#x2F;li&gt;
&lt;li&gt;Vega：使用 JSON 的方式，缺乏类型化约束，不便于理解、使用，部份的能力过于糖化。&lt;&#x2F;li&gt;
&lt;li&gt;使用多维空间的方式来理解 visualization&lt;&#x2F;li&gt;
&lt;li&gt;将数据（关系数据、多维数据）映射到（可视化）多维空间。&lt;&#x2F;li&gt;
&lt;li&gt;使用 react 的方式来理解 interact&lt;&#x2F;li&gt;
&lt;li&gt;更好的表示语言？
&lt;ul&gt;
&lt;li&gt;JSON based&lt;&#x2F;li&gt;
&lt;li&gt;more datatype: date, interval, float, decimal, more via regexp&quot;...&quot; style&lt;&#x2F;li&gt;
&lt;li&gt;JSON constructor:   Color { r g b }&lt;&#x2F;li&gt;
&lt;li&gt;functional constructor: Color(r, g, b), with fixed parameter and named parameter&lt;&#x2F;li&gt;
&lt;li&gt;enum literal. .RED instead of Color.RED&lt;&#x2F;li&gt;
&lt;li&gt;reference spec: global reference, document reference, scoped reference.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;g2.antv.antgroup.com&#x2F;manual&#x2F;quick-start&quot;&gt;AntV G2&lt;&#x2F;a&gt;
粗览一下文档和示例，G2 的概念与 vega 时非常相似的，提供2种 API: 命令式 和 DSL 式。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;llm-agents&quot;&gt;LLM &amp;amp; Agents&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lilianweng.github.io&#x2F;posts&#x2F;2023-06-23-agent&#x2F;&quot;&gt;LLM Powered Autonomous Agents&lt;&#x2F;a&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-07&#x2F;img_2.png&quot; alt=&quot;img_2.png&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;AutoGPT&lt;&#x2F;li&gt;
&lt;li&gt;AnyTool&lt;&#x2F;li&gt;
&lt;li&gt;HuggingGPT&lt;&#x2F;li&gt;
&lt;li&gt;Understanding the planning of LLM agents: A survey&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;AntonOsika&#x2F;gpt-engineer&lt;&#x2F;li&gt;
&lt;li&gt;JoyAgent&lt;&#x2F;li&gt;
&lt;li&gt;Gaia benchmark: a benchmark for General AI Assistants&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>misc</title>
        <published>2025-06-20T12:00:00+00:00</published>
        <updated>2025-06-20T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/thoughts/misc/"/>
        <id>https://wangzaixiang.github.io/thoughts/misc/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/thoughts/misc/">&lt;ol&gt;
&lt;li&gt;管理之匹配与弹性
&lt;ul&gt;
&lt;li&gt;才位匹配：才不配位者，位虚，位不配才者，才屈。
&lt;ul&gt;
&lt;li&gt;以资历，以亲疏、以浮夸莅位者，比比皆是。&lt;&#x2F;li&gt;
&lt;li&gt;一将无能，累死三军。&lt;&#x2F;li&gt;
&lt;li&gt;位不配才，虽千里马亦病驹亦。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;赏罚不明&lt;&#x2F;li&gt;
&lt;li&gt;弹性
&lt;ul&gt;
&lt;li&gt;过紧则僵，畏首畏尾，不敢冒险，不敢犯错。有弹性则鼓励承担责任，敢冒风险，而非不求有功但求无过。&lt;&#x2F;li&gt;
&lt;li&gt;过松则弛，自由散漫，无组织无纪律，得过且过。 有弹性则许可适当松弛，或休息，或学习，平衡身心。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;叶公好龙
幼时读此文，感觉夸张，不匹配现实。而今思之，实属无知：此喻实乃无时无刻不隐于世间，于你于我，或皆叶公。我有鸿鹄之志，却不愿踏实耕耘，
诸多时光，皆付诸快文学、快资讯、快娱乐中，不亦叶公乎。治理公司，虽言必使命愿景，架构文化，却不愿精研产品，走近客户，走近员工一线，不亦叶公乎。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>面向分析场景的 SQL 扩展思考</title>
        <published>2025-06-06T00:00:00+00:00</published>
        <updated>2025-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/analysis-sql-extensions/"/>
        <id>https://wangzaixiang.github.io/blog/analysis-sql-extensions/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/analysis-sql-extensions/">&lt;h1 id=&quot;zai-yi-ge-ji-suan-liu-zhong-shu-chu-duo-ge-jie-guo&quot;&gt;在一个计算流中输出多个结果&lt;&#x2F;h1&gt;
&lt;p&gt;目前的 Query 都只能输出单个结果集，如果能在一个计算图中同时输出多个结果集，在一些 BI 场景会有性能上的优化。一个典型的案例就是：在查询第一页数据的同时，
返回总行数。目前的做法是拆分为2个独立的查询：Q1 查询第一页数据，Q2 查询总行数。如果结合到一个计算图中，则可以共享很多算子的计算，从而减少重复计算消耗。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;group-by-grouping-set-cube-rollup&quot;&gt;group by grouping set, cube, rollup&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;支持数据库
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;docs&#x2F;stable&#x2F;sql&#x2F;query_syntax&#x2F;grouping_sets&quot;&gt;duckdb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;queries-table-expressions.html#QUERIES-GROUPING-SETS&quot;&gt;postgres 9.5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;blog-archive&#x2F;improvements-to-rollup-in-mysql&#x2F;&quot;&gt;mysql 8.0.19&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;datafusion: 目前并不支持&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;使用场景：将分组、小计、合计等多个查询在同一个 SQL 中完成。&lt;&#x2F;li&gt;
&lt;li&gt;性能优化：
&lt;ul&gt;
&lt;li&gt;在最小粒度上进行 group aggregate&lt;&#x2F;li&gt;
&lt;li&gt;在上层粒度上进行 rollup，避免重复计算。&lt;&#x2F;li&gt;
&lt;li&gt;在同一个算子中完成 grouping set 的计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;aggregate-with-filter&quot;&gt;aggregate with filter&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;支持数据库
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;docs&#x2F;stable&#x2F;sql&#x2F;functions&#x2F;aggregates&quot;&gt;duckdb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;datafusion: 目前并不支持&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;在分组计算时，支持定义包含更多 filter 的度量计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;aggregate-with-rollup&quot;&gt;aggregate with rollup&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; category, product, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(amount) as amount, 
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(amount) rollup(category) as amount_of_product,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 在 category 上 rollup
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(amount) rollup(product) as amount_of_category,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 在 product 上 rollup
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; orders
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span&gt; category, product
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;目前还没有看到哪个数据库支持这种形式的查询。其不同于 group by grouping, 后者会返回不同的分组， aggregate with rollup 是在当前的分组上
返回 rollup 的结果。&lt;&#x2F;p&gt;
&lt;p&gt;评估：在 datafusion 中增加这个能力，并考虑在单个算子中完成计算。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;jie-he-aggregate-with-filter-rollup&quot;&gt;结合 aggregate with filter &amp;amp; rollup&lt;&#x2F;h1&gt;
&lt;p&gt;如果能够在 datafusion 中同时支持 aggregate with filter &amp;amp; rollup 的功能的话，那么以下的 OLAP 计算就会变得简单且高效：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;with filter 类似于 MDX 的 &lt;code&gt;([Measure].[X], [DimMore].[m1])&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;with rollup 类似于 MDX 的 &lt;code&gt;([Measure].[X], [Dim1].[AllDim1s])&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;组合： 实现二者的等效操作。&lt;&#x2F;li&gt;
&lt;li&gt;限制：with filter &amp;amp; with rollup 都在 where 之后执行，其基础数据受 where 条件的限制，无法在 filter 中变更数据范围，虽然有这个限制，
仍然可以满足很大部份的 MDX 指标计算的能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;more-aggregate-functions&quot;&gt;More Aggregate Functions&lt;&#x2F;h1&gt;
&lt;p&gt;参考：https:&#x2F;&#x2F;duckdb.org&#x2F;docs&#x2F;stable&#x2F;sql&#x2F;functions&#x2F;aggregates&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;function&lt;&#x2F;th&gt;&lt;th&gt;duckdb&lt;&#x2F;th&gt;&lt;th&gt;duckdb-order-by&lt;&#x2F;th&gt;&lt;th&gt;datafusion&lt;&#x2F;th&gt;&lt;th&gt;description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;any_value(arg)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Returns the first non-null value from arg, support order by&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arbitrary(arg)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;first_value&lt;&#x2F;td&gt;&lt;td&gt;Returns the first value(null or non-null) from arg, support order by&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arg_max&#x2F;min(arg, val)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Finds the row with the maximum val and calculates the arg expression at that row. support order by&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arg_max&#x2F;min(arg, val, n)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;return a List of N&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arg_max_null(arg, val)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;ignore rows where val is null&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;array_agg(arg)&#x2F;list&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bit_and&#x2F;or&#x2F;xor(arg)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bool_and&#x2F;or(arg)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;count(*)&#x2F;count(val)&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;max(arg)&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;max(arg, n)&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;max_by(arg, val, n)&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;as-of-join&quot;&gt;as-of join&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ticker&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;price &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span&gt;AS value
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; holdings h
&lt;&#x2F;span&gt;&lt;span&gt; ASOF &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;JOIN&lt;&#x2F;span&gt;&lt;span&gt; prices p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 关联到 1 条 prices 记录，去 p.when 中最大的记录， inner join 丢弃找不到的 join, or left join 采用 outer join
&lt;&#x2F;span&gt;&lt;span&gt;      ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ticker &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ticker
&lt;&#x2F;span&gt;&lt;span&gt;      AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;支持数据库
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;docs&#x2F;stable&#x2F;guides&#x2F;sql_features&#x2F;asof_join#inner-asof-joins&quot;&gt;duckdb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;适用场景
&lt;ul&gt;
&lt;li&gt;时点类指标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;gao-xiao-zhi-xing-scalar-subquery&quot;&gt;高效执行 scalar subquery&lt;&#x2F;h1&gt;
&lt;p&gt;使用 scalar subquery (可以出现在 SelectItem, Where 部份)，来描述计算度量，具有较强的表达能力，可以覆盖上述的 aggregate with rollup 的能力，
以及更为复杂的一些计算场景，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;时间快速计算，如 同期值、前期值、年（季、月）累计、同期累计值&lt;&#x2F;li&gt;
&lt;li&gt;组内占比&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果 SQL 执行引擎能够高效的执行 scalar subquery, 那么对 OLAP 分析来说，就很有价值了。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ericfu.me&#x2F;subquery-optimization&#x2F;&quot;&gt;SQL 子查询的优化&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;文献：&lt;a href=&quot;https:&#x2F;&#x2F;ericfu.me&#x2F;subquery-optimization&#x2F;&quot;&gt;Unnesting Arbitrary Queries&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21395872495&quot;&gt;4.5 duck-关联子查询(binder-&amp;gt;plan-&amp;gt;optimize)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;TPCH Query2&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	s_acctbal,	s_name,	n_name,	p_partkey,	p_mfgr,	s_address,	s_phone,	s_comment	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	part,	supplier,	partsupp,	nation,	region	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	p_partkey = ps_partkey	and s_suppkey = ps_suppkey	and p_size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15	&lt;&#x2F;span&gt;&lt;span&gt;and p_type like &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%BRASS&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;	
&lt;&#x2F;span&gt;&lt;span&gt;   and s_nationkey = n_nationkey	and n_regionkey = r_regionkey	and r_name = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;EUROPE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;	
&lt;&#x2F;span&gt;&lt;span&gt;   and ps_supplycost = (	
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(ps_supplycost)	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	partsupp,	supplier,	nation,	region	
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	p_partkey = ps_partkey	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- p_partkey is from outer part
&lt;&#x2F;span&gt;&lt;span&gt;           and s_suppkey = ps_suppkey	and s_nationkey = n_nationkey	
&lt;&#x2F;span&gt;&lt;span&gt;           and n_regionkey = r_regionkey	and r_name = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;EUROPE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;	
&lt;&#x2F;span&gt;&lt;span&gt;  )	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt;	s_acctbal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;desc&lt;&#x2F;span&gt;&lt;span&gt;,	n_name,	s_name,	p_partkey;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对这个子查询, duckdb 和 datafusion 都具有良好的优化能力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;datafusion 48.0.0 暂不支持如下的查询（duckdb支持，但其查询计划不是很好阅读）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_custkey&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_totalprice&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;       (
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_totalprice&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; orders o2
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_custkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_custkey 
&lt;&#x2F;span&gt;&lt;span&gt;               and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= date_trunc(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;               and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate
&lt;&#x2F;span&gt;&lt;span&gt;       ) as &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;年累计&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; orders o1 
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderdate &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1992-02-10&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;       and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_custkey &lt;&#x2F;span&gt;&lt;span&gt;in (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3689999&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7800163&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;错误：&lt;code&gt;This feature is not implemented: Physical plan does not support logical expression ScalarSubquery(&amp;lt;subquery&amp;gt;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
idea: 新增一种 reduce join, outer : inner = 1: N， 将多行 inner 的数据进行聚合后，作为 inner 的输出。
在 join 算子中完成聚合操作，减少 join 的 output。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
idea：在 reduce join 中，将部份 window function 的执行优化策略引入，减少 working set 以及聚合计算量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>datafusion 性能分析</title>
        <published>2025-06-06T00:00:00+00:00</published>
        <updated>2025-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/datafusion-performance/"/>
        <id>https://wangzaixiang.github.io/blog/datafusion-performance/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/datafusion-performance/">&lt;p&gt;本文记录我对 datafusion 的一些性能测试的数据、分析和思考。&lt;&#x2F;p&gt;
&lt;p&gt;从2023年起，我开始关注在公司的 BI 分析引擎中，引入 OLAP 引擎的底层计算能力，当时就开始评估了几个计算引擎，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pola.rs&quot;&gt;polars&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datafusion.apache.org&quot;&gt;datafusion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&quot;&gt;duckdb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;关注的重点主要是 计算能力 和 计算性能，后面选择了 duckdb 作为我们的计算引擎，主要的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;性能：duckdb 在大部份测试场景都具有领先或相当的性能（可参考我当时的一个测试：&lt;a href=&quot;&#x2F;inside-duckdb&#x2F;preface.html&quot;&gt;duckdb 测评&lt;&#x2F;a&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;表达能力：duckdb 对窗口函数的支持程度基本上是最完备的（而我测试的其他包括 mysql, clickhouse, datafusion 都有不同程度的支持不充分），pola.rs
的窗口计算逻辑完全不同于 SQL 定义的窗口函数（而且我无法理解起底层逻辑是什么）。当然，我们后续在使用 duckdb 时，也发现了 duckdb 提供了很多有价值的
SQL 扩展，例如 group by grouping set 对分组小计等统计场景非常有帮助。&lt;&#x2F;li&gt;
&lt;li&gt;工具完善度：duckdb 的 工具，包括 CLI、python API 都设计得非常友好。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;25年，在阅读了&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1gqcxSNLGVwaqN0_yJtCbNm19-w5pqPuktII5_EDA6_k&quot;&gt;2024 Practice: Apache Arrow DataFusion A Fast, Embeddable, Modular Analytic Query Engine&lt;&#x2F;a&gt;
一文后，尤其是文中提到的性能对比后，我也在本地重跑了一次 datafusion-duckdb-benchmark 的对比，再花了些时间阅读了一下 datafusion 的源代码，
有了一些不同的认知：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 源代码的可读性相比 C++ 有了更好的提升（可能因为我喜欢 Rust 超过 C++），我也把阅读 hash-join, window function等算子整理了文章，在这个系列中进行了发表。&lt;&#x2F;li&gt;
&lt;li&gt;datafusion 的性能虽然整体上仍然不如 duckdb，但这个差距主要是工程上的成熟度，而非架构上的差异。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;本文主要针对 datafusion-duckdb-benchmark 这个项目的测试结果，对二者的差异进行分析，并尝试给出改进、优化 datafusion 的一些建议。
更新的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;datafusion-duckdb-benchmark&quot;&gt;datafusion-duckdb-benchmark&lt;&#x2F;a&gt; 项目:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;升级到最新的版本 datafusion 47.0.0 和 duckdb 1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;配合本文对部份脚本进行了更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;datafusion-duckdb-benchmark&quot;&gt;datafusion-duckdb-benchmark&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;clickbench&lt;&#x2F;li&gt;
&lt;li&gt;tpch&lt;&#x2F;li&gt;
&lt;li&gt;h2o&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;clickbench-dan-xian-cheng-ce-shi&quot;&gt;clickbench 单线程测试&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;comparison.clickbench.png&quot; alt=&quot;comparison.clickbench.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- duckdb sql
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with 
&lt;&#x2F;span&gt;&lt;span&gt;   cb_datafusion as (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;  read_csv(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;results&#x2F;2025-06-17-df-48.0.0-duckdb-1.3.0-m1max&#x2F;clickbench_datafusion.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, header=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, columns= { &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; } )),
&lt;&#x2F;span&gt;&lt;span&gt;   cb_duckdb as (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;  read_csv(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;results&#x2F;2025-06-17-df-48.0.0-duckdb-1.3.0-m1max&#x2F;clickbench_duckdb.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, header=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, columns= { &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; } )),
&lt;&#x2F;span&gt;&lt;span&gt;   duckdb as (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; query, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(tm) as tm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; cb_duckdb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; query), 
&lt;&#x2F;span&gt;&lt;span&gt;   datafusion as (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; query, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(tm) as tm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; cb_datafusion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; query)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;duckdb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;, round(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;duckdb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) as &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duckdb time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, round(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;datafusion&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) as &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;datafusion time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, round((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;datafusion&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tm &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;duckdb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;duckdb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) as &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;diff%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; duckdb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; datafusion on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;duckdb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;query &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;datafusion&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;query
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;query&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;duckdb time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;datafusion time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;diff%&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.033&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12.23&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.109&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.071&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-35.08&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.285&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.321&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12.51&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.394&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.287&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-27.19&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.411&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.219&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-7.96&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.931&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.111&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.633&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.063&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-96.15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.117&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.075&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-36.21&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.95&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.629&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-10.87&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.04&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.929&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-2.75&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.651&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.008&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;55.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.757&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.133&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;49.66&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.781&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.917&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.91&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;14&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.062&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.907&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-3.81&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.968&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.763&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-6.92&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.673&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.596&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-2.86&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;17&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.652&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.042&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-10.79&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;18&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.57&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-9.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.476&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.318&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-20.6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.095&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.241&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;151.94&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.064&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.455&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-8.62&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.578&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.659&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37.31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.85&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;14.823&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;36.62&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;24&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.969&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;39.1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;390.67&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.454&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.314&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-5.69&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.708&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.048&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.251&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.613&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16.09&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.094&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.745&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;110.92&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;29.147&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;28.087&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-3.64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.24&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.405&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;904.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;31&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.086&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.896&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-6.15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.544&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.911&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-17.86&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;33&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.346&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.892&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-14.05&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;34&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9.928&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.879&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19.65&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.395&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.869&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;14.19&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.916&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.819&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;30.97&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.125&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.152&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22.28&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.101&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.093&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-7.43&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;39&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.066&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.112&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;69.53&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.222&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.292&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31.95&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.052&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.033&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-36.48&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;42&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.047&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.031&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-33.35&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;43&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.062&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.039&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-36.65&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;在43个场景中，有23个场景 datafusion 更快，有20个场景，datafusion 更慢, 其中差异比较显著的是：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;query&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;duckdb time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;datafusion time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;diff%&lt;&#x2F;th&gt;&lt;th&gt;analyze&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.033&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12.23&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.285&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.321&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12.51&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.931&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.111&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.15&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.651&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.008&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;55.0&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.757&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.133&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;49.66&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.781&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.917&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.91&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.095&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.241&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;151.94&lt;&#x2F;td&gt;&lt;td&gt;TODO&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.578&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.659&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37.31&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.85&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;14.823&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;36.62&lt;&#x2F;td&gt;&lt;td&gt;TODO&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;24&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.969&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;39.1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;390.67&lt;&#x2F;td&gt;&lt;td&gt;duckdb 生成了更好的 TOP-N 执行计划&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.708&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.048&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19.93&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;27&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.251&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.613&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16.09&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.094&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.745&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;110.92&lt;&#x2F;td&gt;&lt;td&gt;TODO&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.24&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.405&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;904.0&lt;&#x2F;td&gt;&lt;td&gt;duckdb 有更好的公共表达式优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;34&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9.928&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.879&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19.65&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.395&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.869&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;14.19&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;36&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.916&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.819&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;30.97&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.125&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.152&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22.28&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;39&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.066&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.112&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;69.53&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.222&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.292&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31.95&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;query-23&quot;&gt;query 23&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;duckdb: TABLE_SCAN 11.49s, output: 7128 rows (98%)&lt;&#x2F;li&gt;
&lt;li&gt;datafusion:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;query-24-select-from-hits-where-url-like-google-order-by-eventtime-limit-10&quot;&gt;query 24: &lt;code&gt;SELECT * FROM hits WHERE URL LIKE &#x27;%google%&#x27; ORDER BY EventTime LIMIT 10&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;duckdb 生成了更好的查询计划：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; hits a 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; file_index, file_row_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; hits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; URL LIKE &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%google%&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ORDER BY&lt;&#x2F;span&gt;&lt;span&gt; EventTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) b 
&lt;&#x2F;span&gt;&lt;span&gt; on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;file_index &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;file_index &lt;&#x2F;span&gt;&lt;span&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;file_row_number &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;file_row_number
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个优化，极大的减少了 parquet 的扫描开销。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;query-30&quot;&gt;query 30&lt;&#x2F;h2&gt;
&lt;p&gt;duckdb 对公共表达式优化进行了更好的优化，将 &lt;code&gt;SUM(col + n)&lt;&#x2F;code&gt; 替换为 &lt;code&gt;SUM(col) + n * COUNT(col)&lt;&#x2F;code&gt;, 这样对 Query 30 中多达 90 个 &lt;code&gt;SUM(col + n)&lt;&#x2F;code&gt;
的字段，最后优化到只有2个分组计算： &lt;code&gt;SUM(col)&lt;&#x2F;code&gt; 和 &lt;code&gt;COUNT(col)&lt;&#x2F;code&gt;。
优化： 参考 duckdb 的表达式优化策略。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tpch-benchmark&quot;&gt;tpch benchmark&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;comparison.tpch.png&quot; alt=&quot;comparison.tpch.png&quot; &#x2F;&gt;
这个测试在 M1-MAX 64G 上运行。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;query&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;duckdb time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;datafusion time&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;diff%&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.624&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.939&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.23&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.84&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;126.78&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.584&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.634&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.17&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.117&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.897&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-19.63&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.753&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.412&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37.64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.742&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.822&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.74&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.659&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.817&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;190.37&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.413&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.835&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;17.47&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.651&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.605&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;26.11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.503&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.587&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.35&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.347&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.949&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;173.3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.918&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.556&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;69.45&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.859&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.503&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-12.44&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;14&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.03&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.194&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15.95&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.907&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.331&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;156.89&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.337&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.524&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;55.21&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;17&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.679&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.537&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;229.75&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;18&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.779&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.695&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;212.84&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.584&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;72.31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.347&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.007&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;49.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;21&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.678&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;67.63&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.498&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.765&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;53.83&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;在 TPCH 的测试中，datafusion 整体落后于 duckdb，除 4&#x2F;13 要更快一些之外，其余的 20 个查询都更慢，差距比较大的是 2&#x2F;7&#x2F;11&#x2F;15&#x2F;17&#x2F;18 号查询。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;query-1-duckdb-datafusion-3-33s-4-971s-sf-10&quot;&gt;Query 1:   duckdb : datafusion =  3.33s : 4.971s (SF=10)&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	l_returnflag,	l_linestatus,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity) as sum_qty,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_extendedprice) as sum_base_price,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_extendedprice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;- l_discount)) as sum_disc_price,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_extendedprice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;- l_discount) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ l_tax)) as sum_charge,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity) as avg_qty,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(l_extendedprice) as avg_price,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(l_discount) as avg_disc,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) as count_order
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	lineitem
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	l_shipdate &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1998-09-02&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;	l_returnflag,	l_linestatus
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt;	l_returnflag,	l_linestatus 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;datafusion
&lt;ul&gt;
&lt;li&gt;算子耗时：使用 &lt;code&gt;explain analyze&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;DataSourceExec output_rows: 59,986,052 time_elapsed_processing: 1.029s&lt;&#x2F;li&gt;
&lt;li&gt;FilterExec     output_rows: 59,142,609 elapsed_compute: 173.698ms&lt;&#x2F;li&gt;
&lt;li&gt;CoalesceBatchesExec:  output_rows: 59,142,609 elapsed_compute: 624.365ms &lt;em&gt;DuckDB 没有这个开销&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;ProjectionExec: elapsed_compute: 448.843035ms&lt;&#x2F;li&gt;
&lt;li&gt;AggregateExec:  output_rows: 4, elapsed_compute: 2.581794006s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4lrfgTI&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;duckdb 3.33s
&lt;ul&gt;
&lt;li&gt;算子耗时
&lt;ul&gt;
&lt;li&gt;TableScan:   output_rows: 59142609, time: 1.20s&lt;&#x2F;li&gt;
&lt;li&gt;Projection:  0.12s + 0.11s&lt;&#x2F;li&gt;
&lt;li&gt;HASH_GROUP_BY:  1.85s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4l0qZsr&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;对比
&lt;ul&gt;
&lt;li&gt;DataFusion 的 CoalesceBatchExec 开销 0.624s，在 DuckDB 没有这一步处理。
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;set datafusion.execution.coalesce_batches = false&lt;&#x2F;code&gt; 执行时，其效果与 duckdb 相似，减少了这个算子的开销&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ProjectionExec, DataFusion多耗时 0.218s
&lt;ul&gt;
&lt;li&gt;datafusion 只计算了 &lt;code&gt;l_extendedprice * (1 - l_discount)&lt;&#x2F;code&gt; 耗时 475ms&lt;&#x2F;li&gt;
&lt;li&gt;duckdb 有两个计算：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a: l_extendedprice * (1 - l_discount)&lt;&#x2F;code&gt; 耗时 120ms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;a * (1.00 + l_tax)&lt;&#x2F;code&gt; 耗时 0.11s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;对比而言，datafusion 在表达式求值的执行效率上，要比 duckdb 慢了很多。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;AggregateExec:  DataFusion 多耗时：0.732s
&lt;ul&gt;
&lt;li&gt;datafusion 需要在这个阶段进行更多的表达式计算，且执行效率只有 duckdb 的 25%&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;query-7-duckdb-datafusion-1-987s-5-536s&quot;&gt;Query 7: duckdb: datafusion = 1.987s : 5.536s&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	supp_nation,	cust_nation,	l_year,	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(volume) as revenue	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	(	
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;as supp_nation,	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;as cust_nation,	extract(year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; l_shipdate) as l_year,	l_extendedprice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;- l_discount) as volume	
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	supplier,	lineitem,	orders,	customer,	nation n1,	nation n2	
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	s_suppkey = l_suppkey	and o_orderkey = l_orderkey	and c_custkey = o_custkey	and s_nationkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_nationkey
&lt;&#x2F;span&gt;&lt;span&gt;     and c_nationkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_nationkey	
&lt;&#x2F;span&gt;&lt;span&gt;     and (	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)	or (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)	)	
&lt;&#x2F;span&gt;&lt;span&gt;     and l_shipdate between &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1995-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1996-12-31&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;	
&lt;&#x2F;span&gt;&lt;span&gt;) as shipping	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;	supp_nation,	cust_nation,	l_year	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt;	supp_nation,	cust_nation,	l_year;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relation graph
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
     flowchart TD
       lineitem[lineitem 60m filtered 18.2m] --- orders[orders 15m] --- customer[customer 1.5m] --- nation_2[nation2 25 filtered 2]
       lineitem --- supplier[supplier 100K] --- nation_1[nation1 25 filtered 2]
     ```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;datafusion&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Join Order:
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
         flowchart TD
           lineitem[lineitem 60m filtered 18.2m] ---|2| orders[orders 15m] ---|3| customer[customer 1.5m] ---|4| nation_2[nation2 25 filtered 2]
           lineitem ---|1| supplier[supplier 100K] ---|5| nation_1[nation1 25 filtered 2]
       ```
&lt;&#x2F;div&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
       flowchart TD
        S[supplier\n100K] --&amp;gt;|build| j1[Join\n18.2m]
        L[lineitem\n60m] --&amp;gt; f1[Filter\n18.2m] --&amp;gt;|input| j1 --&amp;gt;|build| j2[Join\n18.2m]
        O[orders\n15m] --&amp;gt;|input| j2 --&amp;gt;|build| j3[Join \n18.2m]
        C[customer\n1.5m] --&amp;gt;|input| j3 --&amp;gt;|build| j4[Join \n1.5m]
        N1[nation] --&amp;gt; f2[Filter\n2] --&amp;gt;|input| j4 --&amp;gt;|build| j5[Join\n58k]
        N2[nation] --&amp;gt; f3[Filter\n2] --&amp;gt;|input| j5 
       ```
&lt;&#x2F;div&gt;
参考这个图：基本上，datafusion 选择了几乎最差的 join-path。&lt;&#x2F;li&gt;
&lt;li&gt;DataSourceExec: lineitem, output_rows: 59,986,052, time_elapsed_processing: 1.21s&lt;&#x2F;li&gt;
&lt;li&gt;FilterExec lineitem, output_rows: 18,230,325, elapsed_compute: 151.385ms&lt;&#x2F;li&gt;
&lt;li&gt;CoalesceBatchExec: lineitem, elapsed_compute:28.304ms&lt;&#x2F;li&gt;
&lt;li&gt;DataSourceExec: Supplier, output rows: 100,000, time_elapsed_processing: 1.103ms&lt;&#x2F;li&gt;
&lt;li&gt;JoinExec (lineitem * Supplier), output rows: 18,230,325  build_time: 1.902ms   join_time: 217.514ms&lt;&#x2F;li&gt;
&lt;li&gt;CoalesceBatchExec( lineitem * supplier),  output rows: 18,230,325, elapsed_compute: 65.489ms&lt;&#x2F;li&gt;
&lt;li&gt;DataSourceExec(orders): output_rows: 15,000,000   time_elapsed_processing: 203.315ms&lt;&#x2F;li&gt;
&lt;li&gt;JoinExec( lineitem * Supplier * orders ): output_rows: 18230325, build_time: 2.245s, join_time: 554.960ms&lt;&#x2F;li&gt;
&lt;li&gt;JoinExec( lineitem * supplier * orders * customers: 1,500,000): output_rows: 18,230,325, build_time: 3.510002485s, join_time: 1.391s&lt;&#x2F;li&gt;
&lt;li&gt;JoinExec( lineitem * supplier * orders * customers * nation: 2): output_rows:  1,460,257    build time: 5.060385334s, join_time: 66.956ms&lt;&#x2F;li&gt;
&lt;li&gt;JoinExec( lineitem * supplier * orders * customers * nation * nation): output_rows: 58365,  build time: 5.147108365s  join_time; 5.428ms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
datafusion 的 explain analyze 对 JOIN 的 耗时计算并不准确，其时间包括了上游数据的处理时间。实际 build time 没有这么大。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;44D0Aes&quot;&gt;Samply Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;duckdb&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Join Order
&lt;code&gt;(orders X (lineitem X (supplier X nation))) * (customer X nation)&lt;&#x2F;code&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
       flowchart TD
       lineitem[lineitem 60m filtered 18.2m] ---|3| orders[orders 15m] ---|5| customer[customer 1.5m] ---|4| nation_2[nation2 25 filtered 2]
       lineitem ---|2| supplier[supplier 100K] ---|1| nation_1[nation1 25 filtered 2]
       ```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;duckdb 对 JOIN 有 right filter left 的 优化，可以大大的减少 probe side 的扫描成本&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;作为对比： duckdb 的 JOIN 耗时总共为 430ms。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4nnkj9q&quot;&gt;Samply Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对比&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对这个查询，duckdb 处理的关联顺序基本上是错误的，最佳的关联顺序应该是 &lt;code&gt;(filter(lineitem) X supplier X orders X customer X nation X nation &lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
尝试手动编写物理查询计划，来做一个性能对比&lt;&#x2F;li&gt;
&lt;li&gt;Coalesce带来了额外的开销。&lt;&#x2F;li&gt;
&lt;li&gt;使用 CTE 方式改写上面的 SQL&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt; j1 as (
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;s_suppkey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;as supp_nation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; supplier s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; nation n1 on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;s_nationkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_nationkey
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;in (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt; ),
&lt;&#x2F;span&gt;&lt;span&gt; j2 as (
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c_custkey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;as cust_nation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; customer c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; nation n2 on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c_nationkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_nationkey
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;n_name &lt;&#x2F;span&gt;&lt;span&gt;in (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt; ),
&lt;&#x2F;span&gt;&lt;span&gt; j3 as (
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderkey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;j2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;cust_nation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; orders o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; j2 on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_custkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;j2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; ),
&lt;&#x2F;span&gt;&lt;span&gt; j4 as (
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; extract(year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; l_shipdate) as l_year,
&lt;&#x2F;span&gt;&lt;span&gt;     l_extendedprice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;- l_discount) as volume, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;j1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;supp_nation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;l_orderkey
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; lineitem l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; j1 on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;l_suppkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;j1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;s_suppkey
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; l_shipdate between &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1995-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1996-12-31&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; ),
&lt;&#x2F;span&gt;&lt;span&gt; j5 as (
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; l_year, volume, supp_nation, cust_nation
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; j4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; j3 on l_orderkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;j3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderkey
&lt;&#x2F;span&gt;&lt;span&gt; )
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;      supp_nation,    cust_nation,    l_year, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(volume) as revenue
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; j5
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; (supp_nation = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and cust_nation = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) or (supp_nation = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GERMANY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and cust_nation = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRANCE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;     supp_nation,    cust_nation,    l_year
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt;     supp_nation,    cust_nation,    l_year            
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
这个 SQL 理论上是针对这个 case 的最佳执行计划，在 duckdb 中与原始版本几乎一致（1.98s 优化并不明显），datafusion 中执行时间提升到 2.90s(改写前：5.536s)
这也验证了 join 的顺序对性能的影响是显著的
&lt;blockquote&gt;
&lt;p&gt;为什么这个最优化的查询计划仍然不如 duckdb? 经过查看执行计划，datafusion 仍然没有正确的处理 build side 和 probe side, 选择了
数据量更大的一端作为 build side， 目前，datafusion 无法在 SQL 中使用 tips 进行调整。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这个案例是一个很好的学习 Join 优化的案例，我会结合这个案例来阅读论文 《Dynamic Programming Strikes Back》 以加深对这方面知识的理解。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;query-17-subquery-duckdb-2-152s-datafusion-7-091s&quot;&gt;Query 17: subquery duckdb 2.152s : datafusion 7.091s&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_extendedprice) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;as avg_yearly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	lineitem,	part
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	p_partkey = l_partkey	and p_brand = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Brand#23&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;	and p_container = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MED BOX&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  and l_quantity &amp;lt; (	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity)	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	lineitem	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;	l_partkey = p_partkey ) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;datafusion
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
        flowchart TD
        A[&amp;quot;ProjectionExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;avg_yearly:&amp;lt;br&amp;gt;CAST(sum(l_extendedprice) AS Float64) &amp;#x2F; 7&amp;quot;]
        B[&amp;quot;AggregateExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;aggr: sum(l_extendedprice)&amp;lt;br&amp;gt;mode: Single&amp;quot;]
        C[&amp;quot;HashJoinExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;on: (p_partkey = l_partkey)&amp;lt;br&amp;gt;5526rows, build: 50ms join: 5ms&amp;quot;]
        D[&amp;quot;HashJoinExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;on: (l_partkey = p_partkey)&amp;quot;&amp;lt;br&amp;gt;61385rows, build: 1.92s, join: 11ms]
        E[&amp;quot;ProjectionExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;exprs:&amp;lt;br&amp;gt;0.2 * avg(l_quantity)&amp;lt;br&amp;gt;l_partkey&amp;lt;br&amp;gt;2m rows, 15ms&amp;quot;]
        F[&amp;quot;AggregateExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;aggr: avg(l_quantity)&amp;lt;br&amp;gt;group_by: l_partkey&amp;lt;br&amp;gt;mode: Single&amp;lt;br&amp;gt;2m rows, 2.553s&amp;quot;]
        G[&amp;quot;DataSourceExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;files: 1&amp;lt;br&amp;gt;format: parquet&amp;lt;br&amp;gt;59.9m rows 1.03s&amp;quot;]
        H[&amp;quot;FilterExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;predicate:&amp;lt;br&amp;gt;p_brand = Brand#23&amp;lt;br&amp;gt;AND&amp;lt;br&amp;gt;p_container = MED BOX&amp;lt;br&amp;gt;2044rows, 11ms&amp;quot;]
        I[&amp;quot;DataSourceExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;files: 1&amp;lt;br&amp;gt;format: parquet&amp;lt;br&amp;gt;predicate applied&amp;lt;br&amp;gt;2m rows, 24.9ms&amp;quot;]
        J[&amp;quot;DataSourceExec&amp;lt;br&amp;gt;---&amp;lt;br&amp;gt;files: 1&amp;lt;br&amp;gt;format: parquet &amp;lt;br&amp;gt;59.9m rows, 500ms&amp;quot;]

        A --&amp;gt; B
        B --&amp;gt; C
        C --&amp;gt; D
        C --&amp;gt; E
        D --&amp;gt; G
        D --&amp;gt; H
        H --&amp;gt; I
        E --&amp;gt; F
        F --&amp;gt; J
     ```
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;两个耗时的算子： aggregate 2.553s,  hashjoin: 1.92s(JOIN顺序不忧)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;duckdb
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
      flowchart TD
      A1[&amp;quot;Total Time: 4.55s&amp;quot;]
      A2[&amp;quot;QUERY&amp;quot;]
      A3[&amp;quot;EXPLAIN_ANALYZE&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;0 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A4[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;avg_yearly&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;1 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A5[&amp;quot;UNGROUPED_AGGREGATE&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Aggregates: sum(#0)&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;1 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A6[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;l_extendedprice&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;5526 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A7[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;#2&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;5526 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A8[&amp;quot;FILTER&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;(CAST(l_quantity AS DOUBLE&amp;lt;br&amp;gt;) &amp;lt; SUBQUERY)&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;5526 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      A9[&amp;quot;RIGHT_DELIM_JOIN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Join Type: RIGHT&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Conditions:&amp;lt;br&amp;gt;p_partkey IS NOT DISTINCT&amp;lt;br&amp;gt;FROM p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Delim Index: 1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;0 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      B1[&amp;quot;HASH_JOIN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Join Type: INNER&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Conditions:&amp;lt;br&amp;gt;l_partkey = p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.28s)&amp;quot;]
      B2[&amp;quot;HASH_JOIN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Join Type: RIGHT&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Conditions:&amp;lt;br&amp;gt;p_partkey IS NOT DISTINCT&amp;lt;br&amp;gt;FROM p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      B3[&amp;quot;HASH_GROUP_BY&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Groups: #0&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;2044 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      C1[&amp;quot;TABLE_SCAN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Function:&amp;lt;br&amp;gt;READ_PARQUET&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Projections:&amp;lt;br&amp;gt;l_partkey&amp;lt;br&amp;gt;l_quantity&amp;lt;br&amp;gt;l_extendedprice&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Total Files Read: 1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;59905251 Rows&amp;lt;br&amp;gt;(2.20s)&amp;quot;]
      C2[&amp;quot;TABLE_SCAN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Function:&amp;lt;br&amp;gt;READ_PARQUET&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Projections:&amp;lt;br&amp;gt;p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Filters:&amp;lt;br&amp;gt;p_brand=&amp;#x27;Brand#23&amp;#x27;&amp;lt;br&amp;gt;p_container=&amp;#x27;MED BOX&amp;#x27;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Total Files Read: 1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;2044 Rows&amp;lt;br&amp;gt;(1.17s)&amp;quot;]
      D2[&amp;quot;DUMMY_SCAN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;0 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E1[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;(0.2 * avg(l_quantity))&amp;lt;br&amp;gt;p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;2044 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E2[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;__internal_decompress_integral_bigint(#0, 1)&amp;lt;br&amp;gt;#1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;2044 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E3[&amp;quot;HASH_GROUP_BY&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Groups: #0&amp;lt;br&amp;gt;Aggregates: avg(#1)&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;2044 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E4[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;p_partkey&amp;lt;br&amp;gt;l_quantity&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E5[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;#0&amp;lt;br&amp;gt;__internal_compress_integral_l_uinteger(#1, 1)&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E6[&amp;quot;PROJECTION&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;l_quantity&amp;lt;br&amp;gt;p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]
      E7[&amp;quot;HASH_JOIN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Join Type: INNER&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Conditions:&amp;lt;br&amp;gt;l_partkey = p_partkey&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;61385 Rows&amp;lt;br&amp;gt;(0.27s)&amp;quot;]
      F1[&amp;quot;TABLE_SCAN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Function:&amp;lt;br&amp;gt;READ_PARQUET&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Projections:&amp;lt;br&amp;gt;l_partkey&amp;lt;br&amp;gt;l_quantity&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Total Files Read: 1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;59905251 Rows&amp;lt;br&amp;gt;(0.57s)&amp;quot;]
      F2[&amp;quot;DELIM_SCAN&amp;lt;br&amp;gt;────────────────────&amp;lt;br&amp;gt;Delim Index: 1&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;0 Rows&amp;lt;br&amp;gt;(0.00s)&amp;quot;]

      A1 --&amp;gt; A2
      A2 --&amp;gt; A3
      A3 --&amp;gt; A4
      A4 --&amp;gt; A5
      A5 --&amp;gt; A6
      A6 --&amp;gt; A7
      A7 --&amp;gt; A8
      A8 --&amp;gt; A9
      A9 --&amp;gt; B1
      A9 --&amp;gt; B2
      A9 --&amp;gt; B3
      B1 --&amp;gt; C1
      B1 --&amp;gt; C2

      B2 --&amp;gt; E1
      B2 --&amp;gt; D2
      E1 --&amp;gt; E2
      E2 --&amp;gt; E3
      E3 --&amp;gt; E4
      E4 --&amp;gt; E5
      E5 --&amp;gt; E6
      E6 --&amp;gt; E7
      E7 --&amp;gt; F1
      E7 --&amp;gt; F2
     ```
&lt;&#x2F;div&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;query-18-duckdb-3-495s-vs-datafusion-9-567s&quot;&gt;Query 18:  duckdb: 3.495s vs datafusion: 9.567s&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	c_name,	c_custkey,	o_orderkey,	o_orderdate,	o_totalprice,	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	customer,	orders,	lineitem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where	
&lt;&#x2F;span&gt;&lt;span&gt;    o_orderkey in (
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	l_orderkey	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	lineitem	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;	l_orderkey having	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;300
&lt;&#x2F;span&gt;&lt;span&gt;    )	
&lt;&#x2F;span&gt;&lt;span&gt;    and c_custkey = o_custkey	and o_orderkey = l_orderkey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;	c_name,	c_custkey,	o_orderkey,	o_orderdate,	o_totalprice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt;	o_totalprice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;desc&lt;&#x2F;span&gt;&lt;span&gt;,	o_orderdate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;duckdb&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;  let a = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;	l_orderkey	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;	lineitem	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt;	l_orderkey having	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quantity) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  let b = lineitem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inner join&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              (orders &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inner join&lt;&#x2F;span&gt;&lt;span&gt; a on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;orders&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o_orderkey&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inner join&lt;&#x2F;span&gt;&lt;span&gt; customers c on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;custkey &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;custkey 
&lt;&#x2F;span&gt;&lt;span&gt;          )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;datafusion&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;let a = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; l_orderkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quanitity) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; lineitem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;having &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(l_quanitity))
&lt;&#x2F;span&gt;&lt;span&gt;let b = (lineitem  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inner join&lt;&#x2F;span&gt;&lt;span&gt; (orders &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inner join&lt;&#x2F;span&gt;&lt;span&gt; customer))
&lt;&#x2F;span&gt;&lt;span&gt;b semi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
BUG: set datafusion.execution.coalesce_batches = false; 执行该SQL 语句会超时&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;结论：duckdb 对 JOIN 顺序进行了更优的优化，在这个查询中，将具有更好筛选作用的 o_orderkey in subquery 重组顺序后，使得尽早的减少了数据量，将查询大大加速。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;后续将对其他 Case 进行性能对比分析。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;datafusion explain format = tree 时，HashJoin 按照 build-side, probe-side 的左右顺序。&lt;&#x2F;li&gt;
&lt;li&gt;datafusion explain format = indent 时，HashJoin 按着 build-side, probe-side 的上下顺序&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;jie-lun-datafusion-xing-neng-de-zhu-yao-yin-su&quot;&gt;结论： datafusion 性能的主要因素&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;CoalesceBatchExec 带来的额外开销. 参考 TPCH-Query1&lt;&#x2F;li&gt;
&lt;li&gt;公共表达式提取优化不够:  TPCH-Query1, ClickBench-Query30&lt;&#x2F;li&gt;
&lt;li&gt;对 &lt;code&gt;select * from ... limit 10&lt;&#x2F;code&gt; 这样的查询，查询计划不够优化，导致了大量的数据扫描。 ClickBench-Query24&lt;&#x2F;li&gt;
&lt;li&gt;对表达式求值，datafusion 的执行效率远低于 duckdb（~25%）。这个需要进一步核实，对比，在大数据量下对性能有普遍性的影响。&lt;&#x2F;li&gt;
&lt;li&gt;JOIN 的性能
&lt;ul&gt;
&lt;li&gt;duckdb 生成了更合理的 JOIN 顺序，包括
&lt;ul&gt;
&lt;li&gt;选择数据量更小的边作为 build-side&lt;&#x2F;li&gt;
&lt;li&gt;重排 JOIN 的顺序，使得具有更好筛选作用的 JOIN 提前执行。 TPCH-18&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;hashjoin 算子的执行效率不如 duckdb。&lt;&#x2F;li&gt;
&lt;li&gt;duckdb 支持 Dynamic Filter PushDown 优化，在一些场景下，可以大幅度提升性能&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
如果能够提供对表达式求值的性能统计信息，对定位性能会有更好的帮助&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
datafusion 的 explain analyze 不能以 tree 的方式显示，可阅读性弱于 duckdb，理解耗时需要消耗更多时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;datafusion-wen-zhang-xi-lie&quot;&gt;datafusion 文章系列&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;duck-push-vs-datafusion-pull&#x2F;&quot;&gt;push vs pull&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-hashjoin&#x2F;&quot;&gt;datafusion hashjoin executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;&quot;&gt;datafusion window function executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;&quot;&gt;datafusion performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Jun 2025</title>
        <published>2025-06-02T00:00:00+00:00</published>
        <updated>2025-06-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-06/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-06/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-06/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Rust
&lt;ul&gt;
&lt;li&gt;Async from scratch 系列教程
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;natkr.com&#x2F;2025-04-10-async-from-scratch-1&#x2F;&quot;&gt;1: What is in a Future, anyway?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;natkr.com&#x2F;2025-04-15-async-from-scratch-2&#x2F;&quot;&gt;2: Wake me maybe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;natkr.com&#x2F;2025-05-22-async-from-scratch-3&#x2F;&quot;&gt;3: Pinned against the wall &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NLnetLabs&#x2F;roto&quot;&gt;Roto&lt;&#x2F;a&gt; An Embedded script language that is fast, safe and easy to use.
这个脚本语言在某种程度上很符合我的个人偏好，不过，内在的不支持 loop 的设计是否会限制语言的应用场景？作为一个 safe 的脚本语言，其边界必须是
精心控制的，强类型适合于 compiled（基于&lt;a href=&quot;https:&#x2F;&#x2F;cranelift.dev&quot;&gt;cranelift&lt;&#x2F;a&gt;项目），这有利于鲁棒性和性能。&lt;&#x2F;li&gt;
&lt;li&gt;SIMD in zlib-rs
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tweedegolf.nl&#x2F;en&#x2F;blog&#x2F;153&#x2F;simd-in-zlib-rs-part-1-autovectorization-and-target-features&quot;&gt;Autovectorization and target features&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tweedegolf.nl&#x2F;en&#x2F;blog&#x2F;155&#x2F;simd-in-zlib-rs-part-2-compare256&quot;&gt;compare256&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developerlife.com&#x2F;2025&#x2F;05&#x2F;19&#x2F;rust-mem-latency&#x2F;&quot;&gt;Rust memory latency and performance&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=m7PVZixO35c&amp;amp;feature=youtu.be&quot;&gt;New CPUs don&#x27;t speed up old code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;WwkuAqObplU&quot;&gt;Data oriented design&lt;&#x2F;a&gt;: Flat dara structure are better for memory locality&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;Dhn-JgZaBWo&quot;&gt;Memory Latency vs CPU operation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;pJ-FRRB5E84&amp;amp;t=1831&quot;&gt;Memory Allocation Tips&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;smallvec&#x2F;latest&#x2F;smallvec&#x2F;struct.SmallVec.html&quot;&gt;smallvec&lt;&#x2F;a&gt; 类似于 Arrow 的 &lt;a href=&quot;https:&#x2F;&#x2F;arrow.apache.org&#x2F;docs&#x2F;format&#x2F;Columnar.html#variable-size-binary-view-layout&quot;&gt;Variable-size Binary View Layout&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;smallstr&#x2F;0.3.0&#x2F;smallstr&#x2F;&quot;&gt;smallstr&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-06&#x2F;memory_latency.svg&quot; alt=&quot;memory_latency.svg&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Stack vs heap 以及广义的类 String&#x2F;Vec 数据结构中的一级存储、二级存储。&lt;&#x2F;li&gt;
&lt;li&gt;rust drop 开销比 alloc 要大: 是否是因为 drop 自身的开销而非 dealloc？&lt;&#x2F;li&gt;
&lt;li&gt;memory alignment 对性能的影响&lt;&#x2F;li&gt;
&lt;li&gt;Global Allocators
&lt;ul&gt;
&lt;li&gt;jemalloc: 多线程、大量小对象(chunk设计)&lt;&#x2F;li&gt;
&lt;li&gt;default&#x2F;ptmalloc:  单线程&lt;&#x2F;li&gt;
&lt;li&gt;tcmalloc: 三级 ThreadCache + CentralCache + PageHeap， 自旋锁, 小对象无锁分配，瞬态高并发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;RingBuffer：使用数组模拟链表，更好的内存局部性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SIMD
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;simd-everywhere&#x2F;simde&quot;&gt;simd-everywhere&lt;&#x2F;a&gt; 软件仿真的方式模拟 SIMD 指令。ARM 的 SIMD 指令参考资料很难阅读，可以通过
这个站点，来理解这些指令是如何仿真执行的。不过，好像有不少指令并没有实现。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linebender.org&#x2F;blog&#x2F;a-plan-for-simd&#x2F;&quot;&gt;a plan for simd&lt;&#x2F;a&gt; &lt;code&gt;Linebender&lt;&#x2F;code&gt;的 SIMD 实现计划。
&lt;ul&gt;
&lt;li&gt;使用 256 bit width: 能很好的匹配 AVX2, 在 NEON 上使用2个寄存器进行模拟。考虑到 Neon 有32个128位寄存器，仍然有足够的处理能力（在M1系列芯片上，基本等效于16 x 256 的AVX2）。&lt;&#x2F;li&gt;
&lt;li&gt;文中提到 AVX512 相比 AVX256，性能提升有限，&lt;code&gt;a 512 bit vector is processed in two clock cycles (see mersenneforum post for more details), each handling 256 bits&lt;&#x2F;code&gt;,
这种说法，但没有提到确切的信息来源。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s?__biz=MzUzMDI5OTA5NQ==&amp;amp;mid=2247487111&amp;amp;idx=1&amp;amp;sn=6d0577675df2d7649c78434d7c3aa3df&amp;amp;chksm=fb8cd799a5e3c39b87e6073f8b27607da43498205097d82bb4ef383ccadeb708fb48f098d0f0#rd&quot;&gt;Milvis&lt;&#x2F;a&gt;
中有 AVX2 vs AVX512 的对比，有提升 20%-65%。&lt;&#x2F;li&gt;
&lt;li&gt;AVX512 可能会导致 CPU 降频，最终性能提升打了折扣。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;DuckDB 源代码阅读系列文章
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21013348181&quot;&gt;parser&lt;&#x2F;a&gt; 语法分析，生成AST&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21019887715&quot;&gt;binder&lt;&#x2F;a&gt;, symbol(table&#x2F;column) resolver&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21027047841&quot;&gt;logical operators&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21028438818&quot;&gt;logical plan&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21030374102&quot;&gt;优化器&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21100427584&quot;&gt;Expression Rewriter, SumRewriterOptimizer, FilterPullup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21179256764&quot;&gt;FilterPushDown&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21395872495&quot;&gt;Deliminator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;24105415637&quot;&gt;JoinOrder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;21131398911&quot;&gt;优化器总结&lt;&#x2F;a&gt;
之前我阅读了 backend 的几个算子源代码，通过这个系列，加深对前端的学习。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;How Rolldown Works
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atriiy.dev&#x2F;blog&#x2F;rolldown-module-loader-and-dependency-graph&quot;&gt;Module Loading, Dependency Graphs, and Optimization Explained&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atriiy.dev&#x2F;blog&#x2F;rolldown-link-stage-symbol-linking-resolution&quot;&gt;Symbol Linking, CJS&#x2F;ESM Resolution, and Export Analysis Explained&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>datafusion window function execution</title>
        <published>2025-05-26T00:00:00+00:00</published>
        <updated>2025-05-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/datafusion-window-function/"/>
        <id>https://wangzaixiang.github.io/blog/datafusion-window-function/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/datafusion-window-function/">&lt;h1 id=&quot;api-shi-yong-chuang-kou-han-shu&quot;&gt;API: 使用窗口函数&lt;&#x2F;h1&gt;
&lt;p&gt;窗口函数是针对数据分析的一个 SQL 查询扩展，其执行顺序如下图中，
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;sql-execute-plan.png&quot; alt=&quot;SQL 执行顺序&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一般的，窗口函数的语法如下：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;window_expr_grammar.png&quot; alt=&quot;window_expr_grammar.png&quot; &#x2F;&gt;
来源：https:&#x2F;&#x2F;duckdb.org&#x2F;docs&#x2F;stable&#x2F;sql&#x2F;functions&#x2F;window_functions&lt;&#x2F;p&gt;
&lt;p&gt;datafusion 提供了对窗口函数的支持，不过，目前的版本支持程度仍然不如 duckdb，我目前发现的问题是： frame 中目前仅支持 literal expr,
这限制了基于当前行的 dynamic range 的支持能力，例如，典型的 上年同期年累 这样的计算。&lt;&#x2F;p&gt;
&lt;p&gt;在 duckdb 中，可以表示为&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(amount) ) over (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; order_date 
&lt;&#x2F;span&gt;&lt;span&gt;  range between to_days( order_date - (date_trunc(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, order_date&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) - interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; year)) preceding 
&lt;&#x2F;span&gt;&lt;span&gt;  and interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; year preceding )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;本文分析的目的之一就是对 datafusion 的窗口函数执行机制进行研究，并评估为其添加上这类能力的可行性。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;spi-chuang-jian-zi-ding-yi-de-chuang-kou-han-shu&quot;&gt;SPI：创建自定义的窗口函数&lt;&#x2F;h1&gt;
&lt;p&gt;datafusion 中支持4种 自定义函数：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;udf: scalar 函数&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;udtf: 表函数，如 csv_read 之类的函数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;udwf: User Define Window Function：以 partition 为单位的窗口函数&lt;&#x2F;p&gt;
&lt;p&gt;主要针对非聚合类的窗口函数，参见：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;blob&#x2F;main&#x2F;datafusion-examples&#x2F;examples&#x2F;simple_udwf.rs&quot;&gt;simple udwf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;blob&#x2F;main&#x2F;datafusion-examples&#x2F;examples&#x2F;advanced_udwf.rs&quot;&gt;advanced udwf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;see: datafusion&#x2F;physical-expr&#x2F;src&#x2F;window&#x2F;standard.rs StandardWindowExpr::evaluate(按照这个源代码整理，与代码注释对应不上)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;[&lt;code&gt;uses_window_frame&lt;&#x2F;code&gt;]&lt;&#x2F;th&gt;&lt;th&gt;[&lt;code&gt;supports_bounded_execution&lt;&#x2F;code&gt;]&lt;&#x2F;th&gt;&lt;th&gt;[&lt;code&gt;include_rank&lt;&#x2F;code&gt;]&lt;&#x2F;th&gt;&lt;th&gt;function_to_implement&lt;&#x2F;th&gt;&lt;th&gt;functions&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;*&lt;&#x2F;td&gt;&lt;td&gt;*&lt;&#x2F;td&gt;&lt;td&gt;[&lt;code&gt;evaluate&lt;&#x2F;code&gt;]&lt;&#x2F;td&gt;&lt;td&gt;nth_value&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;false (default)&lt;&#x2F;td&gt;&lt;td&gt;*&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;[&lt;code&gt;evaluate_all_with_rank&lt;&#x2F;code&gt;]&lt;&#x2F;td&gt;&lt;td&gt;rank, dense_rank, cume_dist&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;false&lt;&#x2F;td&gt;&lt;td&gt;*&lt;&#x2F;td&gt;&lt;td&gt;false (default)&lt;&#x2F;td&gt;&lt;td&gt;[&lt;code&gt;evaluate_all&lt;&#x2F;code&gt;]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;UDWF 窗口函数列表：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;category&lt;&#x2F;th&gt;&lt;th&gt;functions&lt;&#x2F;th&gt;&lt;th&gt;supported&lt;&#x2F;th&gt;&lt;th&gt;desc&lt;&#x2F;th&gt;&lt;th&gt;uses_window_frame&lt;&#x2F;th&gt;&lt;th&gt;supports_bounded_execution&lt;&#x2F;th&gt;&lt;th&gt;include_rank&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;cume_dist&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;累积百分比&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;dense_rank&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;1,2,2,3 风格的排名&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;rank&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;1,2,2,4 风格的排名&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;ntile(n)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;按 n 等分&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;percent_rank&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;排名百分比&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ranking&lt;&#x2F;td&gt;&lt;td&gt;row_number&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;行号&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;analytical&lt;&#x2F;td&gt;&lt;td&gt;first_value(expr)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;analytical&lt;&#x2F;td&gt;&lt;td&gt;lag(expr, offset, default)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;analytical&lt;&#x2F;td&gt;&lt;td&gt;last_value(expr)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;analytical&lt;&#x2F;td&gt;&lt;td&gt;lead(expr, offset, default)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;analytical&lt;&#x2F;td&gt;&lt;td&gt;nth_value(expr, n)&lt;&#x2F;td&gt;&lt;td&gt;df, duckdb&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;true&lt;&#x2F;td&gt;&lt;td&gt;X&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;udaf: User Define Aggregate Function
针对形如 SUM, COUNT 之类的函数，自定义函数参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;blob&#x2F;main&#x2F;datafusion-examples&#x2F;examples&#x2F;advanced_udaf.rs&quot;&gt;advanced udaf&lt;&#x2F;a&gt;
核心接口是 Accumulator, GroupsAccumulator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
classDiagram
        
        class WindowUDFImpl {
            &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
            +partition_evaluator(PartitionEvaluatorArgs args) PartitionEvaluator
        }
        class PartitionEvaluator {
                &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
                +is_causal(): bool
                +uses_window_frame(): bool
                +supports_bounded_execution(): bool
                +include_rank(): bool
                +evaluate(&amp;amp;~ArrayRef~ values, &amp;amp;Range~usize~ range): Result&amp;lt;ScalarValue&amp;gt; 
                +evaluate_all(values:&amp;amp;~ArrayRef~, num_rows:uszie): Result&amp;lt;ArrayRef&amp;gt;
                +evaluate_all_with_rank(usize num_rows, &amp;amp;[Range~usize~] ranks_in_partition) -&amp;gt; Result&amp;lt;ArrayRef&amp;gt;
        }
        WindowUDFImpl .. PartitionEvaluator
        
        class AggregateUDFImpl {
            &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;    
            +accumulator(AccumulatorArgs args): Result~Box~dyn Accumulator~~
            +create_groups_accumulator(AccumulatorArgs args): Result&amp;lt;Box&amp;lt;dyn GroupsAccumulator&amp;gt;&amp;gt;
        }
        
        class Accumulator {
                &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
                +update_batch(&amp;amp;[ArrayRef]): Result&amp;lt;()&amp;gt;
                +retract_batch(&amp;amp;[ArrayRef]): Result&amp;lt;()&amp;gt;
                +state(): Result&amp;lt;Vec&amp;lt;ScalaValue&amp;gt;&amp;gt;
                +merge_batch(&amp;amp;[ArrayRef]): Result&amp;lt;()&amp;gt;
                +evaluate(): Result&amp;lt;ScalaValue&amp;gt;
        }
        
        class GroupsAccumulator {
            &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
            +update_batch(&amp;amp;[ArrayRef], Option&amp;lt;&amp;amp;BooleanArray&amp;gt;, usize): Result&amp;lt;()&amp;gt;
            +state(EmitTo): Result&amp;lt;ArrayRef&amp;gt;
            +merge_batch(&amp;amp;[ArrayRef], &amp;amp;[usize], Option&amp;lt;&amp;amp;BooleanArray&amp;gt;, usize): Result&amp;lt;()&amp;gt;
            +evaluate(EmitTo): Result&amp;lt;ArrayRef&amp;gt;    
        }

    AggregateUDFImpl .. Accumulator
    AggregateUDFImpl .. GroupsAccumulator
        
```
&lt;&#x2F;div&gt;&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
classDiagram
    class WindowExpr {
        &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
        +evaluate_args(batch: &amp;amp;RecordBatch) Result~Vec&amp;lt;ArrayRef&amp;gt;~
        +evaluate(batch: &amp;amp;RecordBatch) Result~ArrayRef~
        +evaluate_stateful(partition_batches: &amp;amp;PartitionBatches, window_agg_state: &amp;amp;mut PartitionWindowAggStates) Result~()~
    }

    note for AggregateWindowExpr &amp;quot;for user-defined-aggregate-function&amp;quot;
    class AggregateWindowExpr {
        &amp;lt;&amp;lt;trait&amp;gt;&amp;gt;
    }

    note for StandardWindowExpr &amp;quot;for user-defined-window-function&amp;quot;
    class StandardWindowExpr {
            &amp;lt;&amp;lt;struct&amp;gt;&amp;gt;
    }

    class SlidingAggregateWindowExpr {
            &amp;lt;&amp;lt;struct&amp;gt;&amp;gt;
    }

    class PlainAggregateWindowExpr {
            &amp;lt;&amp;lt;struct&amp;gt;&amp;gt;
    }

    WindowExpr &amp;lt;|-- AggregateWindowExpr
    AggregateWindowExpr &amp;lt;|-- SlidingAggregateWindowExpr
    AggregateWindowExpr &amp;lt;|-- PlainAggregateWindowExpr
    WindowExpr &amp;lt;|-- StandardWindowExpr
```
&lt;&#x2F;div&gt;&lt;h2 id=&quot;wu-li-ji-hua-sheng-cheng-xuan-ze-suan-zi-windowexpr-jue-ce-shu&quot;&gt;物理计划生成：选择算子、WindowExpr 决策树&lt;&#x2F;h2&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
flowchart TD
    A[ 1: function type ?] == window function ==&amp;gt; StandardWindowExpr
    A == aggregate function ==&amp;gt; C[frame start unbounded ?]
    A2[2: frame end bounded ?]
    A2 == unbounded following ==&amp;gt; WA[WindowAggExec]
    A2 == bounded ==&amp;gt; BWA[BoundedWindowAggExec]    
    C == unbounded preceding ==&amp;gt; plain[PlainAggregateWindowExpr]
    C == bounded ==&amp;gt; sliding[SlidingAggregateWindowExpr]
```
&lt;&#x2F;div&gt;
&lt;p&gt;具体，可以查看如下的代码实例，通过代码的调试等方式，可以帮助我们理解不同的算子下的执行流程：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;function&lt;&#x2F;th&gt;&lt;th&gt;operator&lt;&#x2F;th&gt;&lt;th&gt;window expr&lt;&#x2F;th&gt;&lt;th&gt;demo&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;aggregate&lt;&#x2F;td&gt;&lt;td&gt;window agg exec&lt;&#x2F;td&gt;&lt;td&gt;plain aggregate&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_datafusion&#x2F;src&#x2F;bin&#x2F;test_windows.rs&quot;&gt;test_sum_1&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;aggregate&lt;&#x2F;td&gt;&lt;td&gt;window agg exec&lt;&#x2F;td&gt;&lt;td&gt;sliding aggregate&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_datafusion&#x2F;src&#x2F;bin&#x2F;test_windows.rs&quot;&gt;test_sum2&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;aggregate&lt;&#x2F;td&gt;&lt;td&gt;bounded window agg exec&lt;&#x2F;td&gt;&lt;td&gt;plain aggregate&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_datafusion&#x2F;src&#x2F;bin&#x2F;test_windows.rs&quot;&gt;test_sum4&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;aggregate&lt;&#x2F;td&gt;&lt;td&gt;bounded window agg exec&lt;&#x2F;td&gt;&lt;td&gt;sliding aggregate&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_datafusion&#x2F;src&#x2F;bin&#x2F;test_windows.rs&quot;&gt;test_sum3&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;suan-zi-windowaggexec-fen-xi&quot;&gt;算子: WindowAggExec 分析&lt;&#x2F;h2&gt;
&lt;p&gt;根据上述分析，WindowAggExec 的 frame 形如：between bounded and unbounded following&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;从上游获取 RecordBatch，追加到 self.batches 中，直至全部读取完成，进入到第2步。&lt;&#x2F;li&gt;
&lt;li&gt;将全部的 RecordBatch 合并为一个 RecordBatch&lt;&#x2F;li&gt;
&lt;li&gt;在 batch 上求值 sort columns (partition key, maybe + order key)&lt;&#x2F;li&gt;
&lt;li&gt;按照 partition key 对 batch 进行 partition，由于 batch 已经排序，因此，在batch 中每个分区的数据已经是连续存放的，一个分区的数据接着
上一个分区的数据。每个分区可以表示为 Range&lt;usize&gt;&lt;&#x2F;li&gt;
&lt;li&gt;foreach partition，调用函数 WindowAggExec::compute_window_aggregates 进行窗口函数求值
&lt;ol&gt;
&lt;li&gt;foreach window_expr 调用 window_expr.evaluate(batch) 求值（多个窗口函数可以共享同一个窗口）
&lt;ul&gt;
&lt;li&gt;window_expr.evaluate(batch) : single partition, single window_exp
&lt;ul&gt;
&lt;li&gt;foreach row in batch &lt;code&gt;AggregateWindowExpr::get_result_column&lt;&#x2F;code&gt;
&lt;ol&gt;
&lt;li&gt;计算 当前行的 window range&lt;&#x2F;li&gt;
&lt;li&gt;window_expr.&lt;code&gt;get_aggregate_result_inside_range&lt;&#x2F;code&gt;: evaluate for single row with a range(window)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PlainAggregateWindowExpr::get_aggregate_result_inside_range: window 0..end end 是递增的&lt;&#x2F;p&gt;
&lt;p&gt;frame: 0 .. LAST&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;对比 last_range，将 shift in rows 调用 accumulator.update_batch&lt;&#x2F;li&gt;
&lt;li&gt;获取 accumulator.evaluate&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SlidingAggregateWindowExpr::get_aggregate_result_inside_range:&lt;&#x2F;p&gt;
&lt;p&gt;frame: &lt;em&gt;bounded&lt;&#x2F;em&gt; .. LAST&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;对比 last_range，将 shift out rows 调用 accumulator.retract_batch&lt;&#x2F;li&gt;
&lt;li&gt;将 shift in rows 调用 accumulator.update_batch&lt;&#x2F;li&gt;
&lt;li&gt;获取 accumulator.evaluate&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;总之： SlidingAggregateWindowExpr::get_aggregate_result_inside_range 可以覆盖 PlainAggregateWindowExpr::get_aggregate_result_inside_range 的能力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;suan-zi-boundedwindowaggexec&quot;&gt;算子： BoundedWindowAggExec&lt;&#x2F;h2&gt;
&lt;p&gt;对 frame.end 不是 unbounded following 的窗口类型，datafusion 视为 bounded window，使用 BoundedWindowAggExec 算子来处理该窗口函数的计算。&lt;&#x2F;p&gt;
&lt;p&gt;根据 frame.start 的不同，会选择不同类型的 WindowExpr:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对标准的窗口函数（UDWF），使用 StandardWindowExpr + PartitionEvaluator:&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, rank() over (partition by product_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; order_date) as rank1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; t1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;对聚合类窗口函数（UDAF）, frame.start 是 unbounded preceding 的，使用 PlainAggregateWindowExpr + Accumulator&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount) over (partition by product_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; order_date rows between unbounded preceding and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; following) as amounts1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; t1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;对聚合类窗口函数（UDAF）, frame.start 不是 unbounded preceding 的，使用 SlidingAggregateWindowExpr + Accumulator&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount) over (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; order_date range between interval &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1 days&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; preceding and interval &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1 days&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; following) as slide_amounts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; t1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;执行流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;BoundedWindowAggStream 从上游读取 RecordBatch (已按 window order by 进行排序)&lt;&#x2F;li&gt;
&lt;li&gt;根据 RecordBatch 更新 partition_key -&amp;gt; PartitionBatchState( record_batch )&lt;&#x2F;li&gt;
&lt;li&gt;调用 BoundedWindowAggStream::compute_aggregates 计算窗口函数
&lt;ol&gt;
&lt;li&gt;foreach window_expr, call window_expr.evaluate_stateful (1 window_expr, multi partition)
&lt;ol&gt;
&lt;li&gt;foreach partition, call window_expr.get_result_column (1 window_expr, 1 partition)
&lt;ol&gt;
&lt;li&gt;foreach row which is not calculated previous
&lt;ol&gt;
&lt;li&gt;计算 row 对应的 frame range&lt;&#x2F;li&gt;
&lt;li&gt;如果 RecordBatch 满足 frame range，则调用 window_expr.get_aggregate_result_inside_range 进行聚合求值
&lt;ol&gt;
&lt;li&gt;相比上一行的frame，对移出的行调用 accumulator::retract_batch&lt;&#x2F;li&gt;
&lt;li&gt;对移入的行调用 accumulator::update_batch&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BoundedWindowAggStream {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window_expr&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;WindowExprRef&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_buffer&lt;&#x2F;span&gt;&lt;span&gt;: RecordBatch,
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;partition_buffers&lt;&#x2F;span&gt;&lt;span&gt;:  PartitionBatches,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; IndexMap&amp;lt;PartitionKey, PartitionBatchState&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window_agg_states&lt;&#x2F;span&gt;&lt;span&gt;:  Vec&amp;lt;PartitionWindowAggStates&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; indexed by window_expr, IndexMap&amp;lt;PartitionKey, WindowState&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;PartitionBatchState {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record_batch&lt;&#x2F;span&gt;&lt;span&gt;:  RecordBatch,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;most_recent_row&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;RecordBatch&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  is_end: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n_out_row&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;WindowState {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: WindowAggState,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window_fn&lt;&#x2F;span&gt;&lt;span&gt;: WindowFn,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 累加器会持有状态，通过 update_batch, retract_batch, merge_batch 更新状态
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;WindowAggState {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window_frame_range&lt;&#x2F;span&gt;&lt;span&gt;: Range&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window_frame_ctx&lt;&#x2F;span&gt;&lt;span&gt;:  Option&amp;lt;WindowFrameContext&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last_calculated_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offset_pruned_rows&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;out_col&lt;&#x2F;span&gt;&lt;span&gt;: ArrayRef,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n_row_result_missing&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_end&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
classDiagram
  class BoundedWindowAggStream {
          &amp;lt;&amp;lt;object&amp;gt;&amp;gt;
          
          window_exprs: Vec~WindowExprRef~
          
          input_buffer: RecordBatch
          finished: bool
          
  }

  class PartitionBatchState {
          &amp;lt;&amp;lt;object&amp;gt;&amp;gt;
          
          record_batch: RecordBatch
          most_recent_row: Option&amp;lt;RecordBatch&amp;gt;
          is_end: bool
          n_out_row: usize
  }
  
  class WindowState {
          &amp;lt;&amp;lt;object&amp;gt;&amp;gt;
          state: WindowAggState
          window_fn: WindowFn
  }
  class WindowAggState {
          &amp;lt;&amp;lt;object&amp;gt;&amp;gt;
          window_frmae_range: Range&amp;lt;usize&amp;gt;
          window_frame_ctx: Option&amp;lt;WindowFrameContext&amp;gt;
          
          last_cacluated_index: usize
          offset_pruned_rows: usize
          out_col: ArrayRef
          n_row_result_missing: usize
          is_end: bool
  }
  class WindowFn {
          &amp;lt;&amp;lt;object&amp;gt;&amp;gt;
          partition_evaluator: PartitionEvaulator
          accumulator: Accumulator
  }      
        
        

  BoundedWindowAggStream o-- PartitionBatchState : partition_buffers[PartitionKey]
  BoundedWindowAggStream o-- WindowState : window_agg_state[window_expr_idx][PartitionKey]
  
  WindowState o--  WindowAggState
  WindowState o--  WindowFn    

```
&lt;&#x2F;div&gt;
&lt;p&gt;处理过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;无需在读取了全部分区数据后，再进行窗口函数计算，可以在读入 batch 的过程中增量的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;si-kao&quot;&gt;思考&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;思考：支持更为灵活的 values between expr and expr ? 虽然不能匹配上述的优化，但在数据量不大的情况下，可以有更大的表现力&lt;&#x2F;li&gt;
&lt;li&gt;思考：如何高效的支持同期、同期累积等功能？&lt;&#x2F;li&gt;
&lt;li&gt;思考：WindowAggExec 是否可以转换为 逆序后使用 BoundedWindowAggExec?&lt;&#x2F;li&gt;
&lt;li&gt;datafusion 窗口函数代码改进思考
&lt;ul&gt;
&lt;li&gt;PlainAggregateWindowExpr 与 SlidingAggregateWindowExpr 逻辑相似，评估合并。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;datafusion-wen-zhang-xi-lie&quot;&gt;datafusion 文章系列&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;duck-push-vs-datafusion-pull&#x2F;&quot;&gt;push vs pull&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-hashjoin&#x2F;&quot;&gt;datafusion hashjoin executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;&quot;&gt;datafusion window function executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;&quot;&gt;datafusion performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>datafusion hashjoin 性能分析</title>
        <published>2025-05-08T00:00:00+00:00</published>
        <updated>2025-05-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/datafusion-hashjoin/"/>
        <id>https://wangzaixiang.github.io/blog/datafusion-hashjoin/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/datafusion-hashjoin/">&lt;p&gt;最近，阅读了 datafusion 项目的源代码，我会通过这篇文章，整理代码阅读中的一些笔记、思考。本文目前是处于草稿阶段（凌乱），会持续修改、更新。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;datafusion-xing-neng-ce-ping&quot;&gt;datafusion 性能测评&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;top-down-pull-execution-volcano-vs-bottom-up-push-execution-pipeline&quot;&gt;Top-down pull execution(Volcano) vs bottom-up push execution(Pipeline)&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;hashjoin-xing-neng-ce-ping&quot;&gt;HashJoin 性能测评&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;in-order vs out-of-order&lt;&#x2F;li&gt;
&lt;li&gt;small build set vs large build set&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;hashjoin-gai-jin&quot;&gt;HashJoin 改进&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Query Plan 改进
&lt;ul&gt;
&lt;li&gt;left join 改写为 inner join&lt;&#x2F;li&gt;
&lt;li&gt;filter move to left side&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;HashJoin 算子改进
&lt;ul&gt;
&lt;li&gt;使用行存替代列存，以提高缓存有好性&lt;&#x2F;li&gt;
&lt;li&gt;显示的 SIMD 优化&lt;&#x2F;li&gt;
&lt;li&gt;新的 hashmap 数据结构设计&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;gai-jin-de-hashmap-shu-ju-jie-gou&quot;&gt;改进的 HashMap 数据结构&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;HashMap1 { 
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 每 16 个 tag 为 1 group,  group_idx = h1(hash) % GROUP, tag = h2(hash)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; first.len() == tags.len(), 存储每个 tag 对应的 fist 行号
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;:  Box&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; next.len() == ROWS + 1, 存储每个行号对应的下一行号， 0 表示无。
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;HashMap2 {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; first.len() == tags.len(), first[i] 为 rows 的索引，0 表示无数据
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;[Row]&amp;gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 采用 row storage，其顺序不同于输入的顺序，而是按照在 hashmap 后的顺序
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Row {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hashcode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 仅保留 63位，最高位为0时，表示没有下一行，为1时，表示有下一行。
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col1&lt;&#x2F;span&gt;&lt;span&gt;:  any,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 保留原始的数据列
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col2&lt;&#x2F;span&gt;&lt;span&gt;:  any,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;build hashmap1
&lt;ul&gt;
&lt;li&gt;GROUPS = ROWS * SCALE &#x2F; 16, SCALE 建议选择 2-4，每个 groups 中的 tag 都初始化为 0xFFFF(每个分组非最后一个slot) 和 0xFFFE(每个分组最后一个slot)&lt;&#x2F;li&gt;
&lt;li&gt;foreach build row, calculate hashcode: u64 for hash-columns&lt;&#x2F;li&gt;
&lt;li&gt;h2 = hashcode &amp;gt;&amp;gt; 49: 保留15位的 h2&lt;&#x2F;li&gt;
&lt;li&gt;group_idx = hashcode % GROUPS&lt;&#x2F;li&gt;
&lt;li&gt;在 1 个 groups 中使用 simd 指令搜索 h2
&lt;ul&gt;
&lt;li&gt;(unlikely) 如果存在，则表示该 h2 已被占用，&lt;code&gt;next[row_no] = first[slot], first[slot] = row_no&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(likely) 如果不存在，则搜索 0xFFFF 找到第一个可用 slot
&lt;ul&gt;
&lt;li&gt;(likely) 如果找到，则占用该 slot：&lt;code&gt;first[slot] = row_no&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(unlikely) 如果没有找到，则占用最后一个slot：&lt;code&gt;next[row_no] = first[slot], first[slot] = row_no&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;build hashmap2
&lt;ul&gt;
&lt;li&gt;遍历 hashmap1.tags&lt;&#x2F;li&gt;
&lt;li&gt;如果某个 tag 对应的 first != 0，则将 first 行压入 rows
&lt;ul&gt;
&lt;li&gt;遍历 next 栈，将当前 tag 的下一个 next 压入rows， 直至结束
hashmap2 构建完成后，之前的列存数据可以释放。hashmap2 中使用行存进行存储，且具有相同的 hashcode 的行被设计为连续存储。为后续 probe phase 的性能优化提供基础。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;shi-yan-shu-ju&quot;&gt;实验数据&lt;&#x2F;h3&gt;
&lt;p&gt;在 https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_cpu&#x2F;src&#x2F;bin&#x2F;TestHash.rs 这个实验中，我对这个数据
结构进行了测试&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;GROUP_WIDTH&lt;&#x2F;th&gt;&lt;th&gt;H2_WIDTH&lt;&#x2F;th&gt;&lt;th&gt;SCALE&lt;&#x2F;th&gt;&lt;th&gt;H2 duplicated&lt;&#x2F;th&gt;&lt;th&gt;other duplicated&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;11.37%&lt;&#x2F;td&gt;&lt;td&gt;9.32%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;6%&lt;&#x2F;td&gt;&lt;td&gt;0.098%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;4%&lt;&#x2F;td&gt;&lt;td&gt;0.002%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;3.09%&lt;&#x2F;td&gt;&lt;td&gt;0.001%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0.05%&lt;&#x2F;td&gt;&lt;td&gt;13.24%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;0.03%&lt;&#x2F;td&gt;&lt;td&gt;0.18%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;0.02%&lt;&#x2F;td&gt;&lt;td&gt;0.004%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;0.01%&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;实验表明：选择 (GROUP_WIDTH = 16, H2_WIDTH = 16, SCALE = 2) 时，first 命中率达到 99.9%，效果很理想，远比 (GROUP_WIDTH = 16, H2_WIDTH = 8, SCALE = 2)
要好。而其成本增加较为有限：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;tags 占用空间增加1倍&lt;&#x2F;li&gt;
&lt;li&gt;搜索时，需要搜索 32B(vs 16B)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;probe-phase&quot;&gt;probe phase&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;mac-xia-de-xing-neng-ce-ping-gong-ju&quot;&gt;Mac 下的性能测评工具&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;datafusion-wen-zhang-xi-lie&quot;&gt;datafusion 文章系列&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;duck-push-vs-datafusion-pull&#x2F;&quot;&gt;push vs pull&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-hashjoin&#x2F;&quot;&gt;datafusion hashjoin executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;&quot;&gt;datafusion window function executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;&quot;&gt;datafusion performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>May 2025</title>
        <published>2025-05-06T00:00:00+00:00</published>
        <updated>2025-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-05/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-05/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-05/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Architecture&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;apple-silicon&#x2F;cpu-optimization-guide&quot;&gt;Apple Silicon CPU Optimization Guide: 3.0&lt;&#x2F;a&gt;
又发现了一本 CPU 级优化的好书，虽然这本书特别针对 Apple 系列CPU(包括 A系列和 M 系列)，但很多的内容，针对现代超标量处理器，都是具有参考意义的。&lt;&#x2F;p&gt;
&lt;p&gt;结合这本书，可以更好的理解《超标量处理器设计》、《高性能超标量CPU微架构剖析于设计》等书的内容，我后续也会陆续整理这本书的学习笔记。结合 datafusion
等项目，也可以尝试进行实践。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ibrahimessam.com&#x2F;posts&#x2F;prefetch&#x2F;&quot;&gt;software prefetch example 1&lt;&#x2F;a&gt; 性能提升约 20%&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lemire.me&#x2F;blog&#x2F;2018&#x2F;04&#x2F;30&#x2F;is-software-prefetching-__builtin_prefetch-useful-for-performance&#x2F;&quot;&gt;software prefetch example 2&lt;&#x2F;a&gt; 性能提升约 10%&lt;&#x2F;p&gt;
&lt;p&gt;这个例子，我在 M1 上测试时，实际效果提升非常有限，大约在 1%。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexpusch&#x2F;rust-magic-patterns&#x2F;blob&#x2F;master&#x2F;visual-journey-through-async-rust&#x2F;Readme.md&quot;&gt;A Visual Journey Through Async Rust&lt;&#x2F;a&gt;
通过可视化的方式来理解 async&#x2F;await 的执行，包括 concurrent 与 parallel 的区别。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexpusch&#x2F;rust-magic-patterns&#x2F;blob&#x2F;master&#x2F;rust-stream-visualized&#x2F;Readme.md&quot;&gt;Rust Stream API visualized and exposed&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;willemvanhulle.tech&#x2F;blog&#x2F;func-async&#x2F;&quot;&gt;使用 Stream 编写函数式的代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Stream ～ async iterator&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&#x2F;article&#x2F;two-years-of-rust&quot;&gt;Two Years of Rust&lt;&#x2F;a&gt; 很有意思的一个资深程序员（但对rust仅有2年使用经验）的思考。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;【B站中文讲读】https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1JGVXzAEXP?vd_source=eee72bea0d6227ec450743399f7c7b5b&lt;&#x2F;li&gt;
&lt;li&gt;将借用检查从一种负担转化为一种类化的检查：并将复杂的借用检查引导我们对设计进行简化，采取更加正交化的设计。&lt;&#x2F;li&gt;
&lt;li&gt;linearly-types 概念：
&lt;blockquote&gt;
&lt;p&gt;线性类型（Linearly Types）是编程语言类型系统中的一个概念，主要用于资源管理和内存安全。它要求变量在使用时必须严格遵循“恰好一次”的规则，
即每个变量在作用域内必须被使用且仅被使用一次。这种机制常用于防止资源泄漏（如内存、文件句柄等），并支持对底层操作的高效控制。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;操作系统的线程调度永远不够快，deepseek 可以对这个开销做很入的解释。&lt;&#x2F;li&gt;
&lt;li&gt;招聘很难吗？其实 rust 本身就帮助你进行了筛选。&lt;&#x2F;li&gt;
&lt;li&gt;滥用macro：过度使用 macro 可能会让代码的阅读和调试成为困难，这一点，我在阅读 datafusion 源代码时也有所发现，实际上，使用函数替代结合 inline
机制来替代不必要的 macro，是我更喜欢的方式。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;作者对 borrow checking 有着百科全书级的理解，因为自己实现过类似的机制。这个我是深有体会的，我之前实现过一个 &lt;a href=&quot;https:&#x2F;&#x2F;easyajax.sourceforge.net&#x2F;&quot;&gt;easyajax&lt;&#x2F;a&gt;,
所以对后续的这类组件框架就有着自己独特的理解。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Scala&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scala 3.7.0 发布。这个版本最大的特性是 &lt;a href=&quot;https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;scala3&#x2F;reference&#x2F;other-new-features&#x2F;named-tuples.html&quot;&gt;NamedTuple&lt;&#x2F;a&gt; 成为正式特性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atriiy.dev&#x2F;blog&#x2F;rolldown-module-loader-and-dependency-graph&quot;&gt;How Rolldown Works: Module Loading, Dependency Graphs, and Optimization Explained&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@yewang222&#x2F;how-we-built-a-500-faster-web-app-with-webassembly-in-2025-49f8f3f52995&quot;&gt;How We Built a 500% Faster Web App with WebAssembly in 2025&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;应用类型：典型的BI展示、分析应用：实时数据处理，类似于电子表格的展示，图表展示，动态的用户界面。&lt;&#x2F;p&gt;
&lt;p&gt;在前端进行了大量的数据加工处理类工作(非DOM操作)，以提高交互的体验：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端过滤&lt;&#x2F;li&gt;
&lt;li&gt;前端排序&lt;&#x2F;li&gt;
&lt;li&gt;transpose（交叉表本地处理）&lt;&#x2F;li&gt;
&lt;li&gt;本地的分组聚合&lt;&#x2F;li&gt;
&lt;li&gt;电子表格的本地公式计算&lt;&#x2F;li&gt;
&lt;li&gt;JSON: 将远程的 blob 转换为 JSON&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最佳搭配：JavaScript 处理 render, WASM 处理 compute&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yogalayout.dev&quot;&gt;Yoga&lt;&#x2F;a&gt;  Meta 的急于 CSS 的 box layout engine, PixiJS 使用其来进行 scenario layout, 也可以考虑
用于仪表盘之类的场景。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shuding&#x2F;yoga-wasm-web&quot;&gt;Yoga-WASM&lt;&#x2F;a&gt; 以 WASM 方式使用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vislyhq&#x2F;stretch&quot;&gt;Stretch&lt;&#x2F;a&gt; Rust 实现，支持 FlexBox layout, 目前不活跃&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;druid: A data-first Rust-native UI design toolkit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;incremental layout.&lt;&#x2F;li&gt;
&lt;li&gt;containing block&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pixijs.com&#x2F;blog&quot;&gt;pixijs layout v3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>M1 CPU 分支预测失误对性能的影响测试</title>
        <published>2025-04-29T00:00:00+00:00</published>
        <updated>2025-04-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/cpu-branch-miss/"/>
        <id>https://wangzaixiang.github.io/blog/cpu-branch-miss/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/cpu-branch-miss/">&lt;h1 id=&quot;m1-cpu-fen-zhi-yu-ce-shi-wu-dui-xing-neng-de-ying-xiang-ce-shi&quot;&gt;M1 CPU 分支预测失误对性能的影响测试&lt;&#x2F;h1&gt;
&lt;p&gt;在超标量处理器中，分支预测的准确率如何，以及分支预测准确率对性能的影响如何，这个实验是在 M1 CPU 上的一个测试，为我们更好的理解现代超标量处理器下
分支预测的工作原理提供了一个很好的视角，帮助我们更好的编写高性能的代码。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;playgrounds&#x2F;try_cpu&#x2F;src&#x2F;bin&#x2F;TestLoop.rs&quot;&gt;测试代码&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestCase {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; same as mmap file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; number of elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span&gt;: Mmap
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;TestCase {
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; 遍历数组，对每一个元素遍历其每一个为1的二进制位
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; loops = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numbers = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::slice::from_raw_parts(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const u64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.numbers) };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; n = n;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; n &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; 这个分支判断的准确度是本测试的关键点，随着样本数据的随机性不同，其预测准确度也会不同
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bit = n.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trailing_zeros&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                n &amp;amp;= !(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; bit);
&lt;&#x2F;span&gt;&lt;span&gt;                sum += bit as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                loops += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        (sum, loops)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; data1: 0..n 样本数据比较有序，预期分支预测成功率高
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_data1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..slice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;( |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| slice[n] = n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; data2: 每个样本的 popcnt 都是 15，预期分支预测成功率最高
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_data2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; nums = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF70&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF700&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF7000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF70000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF700000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF7000000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFF70000000&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..slice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;( |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| slice[n] = nums[ n &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x7 &lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; data3: 完全随机的数据样本，预期分支预测成功率低
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_data3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; random = rand::thread_rng();
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..slice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;( |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| slice[n] = random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next_u64&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ce-shi-jie-guo&quot;&gt;测试结果&lt;&#x2F;h2&gt;
&lt;p&gt;本次测试是在 M1 Max（64G) 和 M4(32G) 上进行，由于采用 mmap 方式读取数据，由于测试文件的大小 &amp;lt; 8G，在两个环境中，均可保证文件全部在 page cache 中，
测试结果一般采用第2轮后的结果，以避免 IO 的影响。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;test case&lt;&#x2F;th&gt;&lt;th&gt;IPC&lt;&#x2F;th&gt;&lt;th&gt;branch-misses&lt;&#x2F;th&gt;&lt;th&gt;ns&#x2F;iter&lt;&#x2F;th&gt;&lt;th&gt;description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;test1-M1&lt;&#x2F;td&gt;&lt;td&gt;3.996&lt;&#x2F;td&gt;&lt;td&gt;4.88e-3&lt;&#x2F;td&gt;&lt;td&gt;0.776&lt;&#x2F;td&gt;&lt;td&gt;测试样本较为有序&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;test2-M1&lt;&#x2F;td&gt;&lt;td&gt;4.596&lt;&#x2F;td&gt;&lt;td&gt;6e-7&lt;&#x2F;td&gt;&lt;td&gt;0.678&lt;&#x2F;td&gt;&lt;td&gt;测试样本非常有序&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;test3-M1&lt;&#x2F;td&gt;&lt;td&gt;1.908&lt;&#x2F;td&gt;&lt;td&gt;2.9e-2&lt;&#x2F;td&gt;&lt;td&gt;1.555&lt;&#x2F;td&gt;&lt;td&gt;测试样本随机无序&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;test1-M4&lt;&#x2F;td&gt;&lt;td&gt;4.63&lt;&#x2F;td&gt;&lt;td&gt;3.44e-3&lt;&#x2F;td&gt;&lt;td&gt;0.563&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;test2-M4&lt;&#x2F;td&gt;&lt;td&gt;5.307&lt;&#x2F;td&gt;&lt;td&gt;1.5e-7&lt;&#x2F;td&gt;&lt;td&gt;0.498&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;test3-M4&lt;&#x2F;td&gt;&lt;td&gt;2.034&lt;&#x2F;td&gt;&lt;td&gt;2.9e-2&lt;&#x2F;td&gt;&lt;td&gt;1.136&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;M1 vs M4 微架构对比（来源于 deepseek ）&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;解码器宽度优化
&lt;ul&gt;
&lt;li&gt;指令解码能力提升
&lt;ul&gt;
&lt;li&gt;采用 10 宽解码单元（每个时钟周期可解码 10 条指令），相比 M3 的 9 宽进一步加宽，推测这是苹果自 M1（推测为 8 宽）以来的最大规模前端优化。&lt;&#x2F;li&gt;
&lt;li&gt;M1：基于 ARMv8 架构，解码器宽度较窄（推测为 8 宽），指令吞吐量较低，限制了并行处理能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;前端与后端协同改进
&lt;ul&gt;
&lt;li&gt;M4 的解码器与后端执行单元匹配更高效，通过 扩大分支预测窗口和 优化指令预取逻辑，减少流水线停顿，提升指令级并行度（ILP）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;后端执行架构升级
&lt;ul&gt;
&lt;li&gt;执行单元与调度队列扩展
&lt;ul&gt;
&lt;li&gt;M4：后端 Dispatch Buffer（指令派发缓冲区）和 浮点调度队列容量显著增加，支持更复杂的乱序执行（Out-of-Order Execution）。例如：
&lt;ul&gt;
&lt;li&gt;浮点单元（FPU）调度队列深度增加 20%，支持更多指令并行执行。&lt;&#x2F;li&gt;
&lt;li&gt;新增 SME 单元（可扩展矩阵扩展，类似 ARMv9 的 SVE2），专为 AI 和 SIMD 密集型任务优化，加速矩阵运算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;M1：后端执行资源较少，缺乏专用 AI 加速单元，依赖传统 SIMD 指令（如 NEON）处理并行任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;内存子系统优化
&lt;ul&gt;
&lt;li&gt;M4 采用 -7500 内存，延迟从 M1 的 96ns 降低至 88ns，配合更大的共享 L2 缓存（16MB），减少后端执行单元等待数据的时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;fen-xi&quot;&gt;分析&lt;&#x2F;h2&gt;
&lt;p&gt;以 test1 在 M1 上的某次样本为例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;thread: 88508440, trace time: 4.999996
&lt;&#x2F;span&gt;&lt;span&gt;        cycles: 16016222700
&lt;&#x2F;span&gt;&lt;span&gt;  instructions: 63551443474
&lt;&#x2F;span&gt;&lt;span&gt;      branches: 7620789323
&lt;&#x2F;span&gt;&lt;span&gt; branch-misses: 37781905
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;case: test1, sum: 213330485248, loops: 14846928128, elapsed: 11.525sec, avg: 0.776 ns&#x2F;iter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1 iter&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;0.776ns&lt;&#x2F;li&gt;
&lt;li&gt;cycles: 2.486&lt;&#x2F;li&gt;
&lt;li&gt;IPC: 3.97&lt;&#x2F;li&gt;
&lt;li&gt;instructions: 9.86: 这个数与 下面的汇编指令是一致的（9，考虑到外层循环还有一些指令的分担，后面看看是否有更精准的测试方法）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;核心循环的 asm: 一共 9 条指令，根据指令的依赖性，至少需要 5 个 cycle 才能完成一次迭代&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1000028a0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	rbit   x11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;             ; 1 x11 = reverse x10 bits, u1-6            
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	clz    x11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;             ; 2 x11 = count leading zeros of x11, u1-6    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lsl    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         ; 3 x12 = 1 &amp;lt;&amp;lt; x11  u1-6    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        ; 4.1   sum += x11  u1-6  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x24&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x24&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;       ; 4.2   loops += 1  u1-6  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;              ; 5.1   x1 = sum  ; 这条指令本来可以挪到循环外面，rustc 没有进行这个优化  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;              ; 5.2   x0 = loop ; 这条指令本来可以挪到循环外面，rustc  没有进行这个优化 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	bics   x10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        ; 4.3   x10 = x10 &amp;amp; ~x12    2 * u1-3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	b.ne   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1000028a0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;          ; 5.3. &amp;lt;+3112&amp;gt; [inlined] core::num::&amp;lt;impl u64&amp;gt;::trailing_zeros at uint_macros.rs:162:20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                                ; u1-2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大致相当于在每 5 cycle 中完成了 2 次迭代，即相当于 loop i 和 loop i+1 同时执行&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;限制只能执行 2 个迭代的原因，估计是 bics &#x2F; b.ne 指令仅能在 u1-2 中执行，其执行单元的限制导致了后续的指令无法继续并行。&lt;&#x2F;li&gt;
&lt;li&gt;如果要进一步提升并发行，则需要 cpu 在设计上进一步提高执行单元的数量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在大部份情况下，CPU 的 分支预测准确率相当之高，比如 test1 中准确度高达：99.512%，test2 则是 99.9999%，而 test3 则是 97.1%。
其中 test3 的样本数据是完全随机的，分支预测的准确率仍然高达 97.1%。这个值是远高于我的预期的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;分支预测准确度对性能的影响是巨大的，test3 的准确度降低了2.9%，但整体性能则下降了 约 50%。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设分支预测成功时 ns&#x2F;iter 为 x，失败时为 y，则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;x = 0.678&lt;&#x2F;li&gt;
&lt;li&gt;(0.971 * x + 0.029 * y) = 1.555&lt;&#x2F;li&gt;
&lt;li&gt;y = 30.91&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;y&#x2F;x = 45.6 即：1次分支预测失败的成本约等于 45.6 次分支预测成功的成本。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当分支预测失败时，进入到流水线后面的指令需要进行清理，并重置前端取指、译码等操作，在这个案例中，则相当于 ～50-100 个 cycle 的成本，
这个值显然高于预期了。（网上的说法是 15-20 个 cycle）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;si-kao&quot;&gt;思考&lt;&#x2F;h2&gt;
&lt;p&gt;当数据本身的无序性较高时，CPU 的分支预测能力会大幅度下降，其对于性能的影响也会大幅度上升。如何应对这类问题呢，这里是一些我的思考：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;通过数据的预处理，提升数据的有序性，来提升分支预测的准确度。&lt;&#x2F;li&gt;
&lt;li&gt;评估消除分支的可能性，例如，使用 算数操作 来替代分支操作。
&lt;ul&gt;
&lt;li&gt;简单条件判断转换为 CMOV(x86), CSEL(ARM) 指令&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;if (flag) sum += x; &lt;&#x2F;code&gt; 改写为 &lt;code&gt;sum += flag * x;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;使用 SIMD 实现无分支的并行计算&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>执行计划之 Push based vs Pull based</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/duck-push-vs-datafusion-pull/"/>
        <id>https://wangzaixiang.github.io/blog/duck-push-vs-datafusion-pull/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/duck-push-vs-datafusion-pull/">&lt;p&gt;先占个坑位，以后再完善这篇文章。&lt;&#x2F;p&gt;
&lt;p&gt;目前整理的一些草稿:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;learning&#x2F;perf-vs-duckdb-1.html&quot;&gt;perf-vs-duckdb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;datafusion-wen-zhang-xi-lie&quot;&gt;datafusion 文章系列&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;duck-push-vs-datafusion-pull&#x2F;&quot;&gt;push vs pull&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-hashjoin&#x2F;&quot;&gt;datafusion hashjoin executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-window-function&#x2F;&quot;&gt;datafusion window function executor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;datafusion-performance&#x2F;&quot;&gt;datafusion performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Query Intermediate Representation Language (Draft)</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/qir-design/"/>
        <id>https://wangzaixiang.github.io/blog/qir-design/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/qir-design/">&lt;p&gt;QIR 是一种用于描述关系代数查询的中间语言，SQL 查询可以翻译称为 qir 代码，然后再解释或者编译执行。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;what-is-qir&quot;&gt;What is QIR&lt;&#x2F;h2&gt;
&lt;p&gt;QIR (Query Intermediate Representation) 是一种用于描述数据查询的中间表示语言，类似于 SQL 查询的查询计划）。它具有以下特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于关系代数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;QIR 使用关系代数算子(如 scan、filter、join、aggregation 等)来描述数据处理逻辑&lt;&#x2F;li&gt;
&lt;li&gt;每个算子都有明确定义的输入和输出类型&lt;&#x2F;li&gt;
&lt;li&gt;支持复杂的数据处理操作，如 join、group by、window functions 等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;AST based&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;QIR 是一种 AST (Abstract Syntax Tree) 表示，而非 bytecode&lt;&#x2F;li&gt;
&lt;li&gt;QIR 是函数式的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;类型安全&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;QIR 提供了表结构类型定义，用于类型检查，并且便于JIT优化，减少运行时的检查开销。&lt;&#x2F;li&gt;
&lt;li&gt;每个算子的输入输出类型在编译时进行检查&lt;&#x2F;li&gt;
&lt;li&gt;可以及早发现类型错误，提高代码质量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;流水线式处理&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;QIR 使用 pipeline 来组织算子&lt;&#x2F;li&gt;
&lt;li&gt;支持多个 pipeline 之间的依赖关系&lt;&#x2F;li&gt;
&lt;li&gt;便于进行并行化和分布式处理&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;QIR 的定位类似于 &lt;a href=&quot;https:&#x2F;&#x2F;www.monetdb.org&#x2F;documentation-Mar2025&#x2F;dev-guide&#x2F;monetdb-internals&#x2F;mal_reference&#x2F;&quot;&gt;MonetDB 中的 MAL 语言&lt;&#x2F;a&gt;，或者 &lt;a href=&quot;https:&#x2F;&#x2F;sqlite.org&#x2F;opcode.html&quot;&gt;Sqlite 中的 bytecode&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-qir&quot;&gt;Why QIR&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;可以直接生成、编写 QIR 代码并执行。&lt;&#x2F;li&gt;
&lt;li&gt;SQL 查询扩展查询算子较为复杂。QIR 目标是提供更方面的扩展算子能力。&lt;&#x2F;li&gt;
&lt;li&gt;更敏捷的新算子开发、测试流程
&lt;ul&gt;
&lt;li&gt;实现新的算子、策略。&lt;&#x2F;li&gt;
&lt;li&gt;手动编写 QIR 代码&lt;&#x2F;li&gt;
&lt;li&gt;进行 JIT 优化&lt;&#x2F;li&gt;
&lt;li&gt;达到预期效果后，再改进 Planner 支持新算子（以终为始）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;性能优化的实验场
&lt;ul&gt;
&lt;li&gt;丰富的 Join 算法支持: semi join， anti-semi join， as of join&lt;&#x2F;li&gt;
&lt;li&gt;窗口函数扩展：range between expr and expr&lt;&#x2F;li&gt;
&lt;li&gt;窗口函数扩展：over(partition by expr order by expr where expr)&lt;&#x2F;li&gt;
&lt;li&gt;minmax 索引优化&lt;&#x2F;li&gt;
&lt;li&gt;bloom 索引优化&lt;&#x2F;li&gt;
&lt;li&gt;分区、分桶查询优化（对Join的支持）&lt;&#x2F;li&gt;
&lt;li&gt;profile based optimization&lt;&#x2F;li&gt;
&lt;li&gt;vectorized execution. QIR 基于 arrow 数据结构，以向量化的方式进行数据处理&lt;&#x2F;li&gt;
&lt;li&gt;JIT: QIR 更便于 JIT&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;query-ir-de-tuo-bu-tu&quot;&gt;Query IR 的拓扑图&lt;&#x2F;h2&gt;
&lt;p&gt;本文档中的拓扑图使用 mermaid 格式生成，具体格式如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;每个pipeline 对应一个 subgraph， pipeline 的 父子关系使用红色连接线表示&lt;&#x2F;li&gt;
&lt;li&gt;每个算子，包括 Source， Operators， Sink 对应一个 node. 使用&quot;变量名:算子名&quot;作为 label， 例如：&quot;user_filter: filter&quot;， 各个算子之间的数据流使用连接线表示&lt;&#x2F;li&gt;
&lt;li&gt;exchange_sender 与 exchange_receiver 之间的连线使用虚线，表示数据交换，其他的数据流使用实线。&lt;&#x2F;li&gt;
&lt;li&gt;lookup_hash_table 与 build_hash_table 之间的连线使用绿线相关，表示其数据依赖关系。&lt;&#x2F;li&gt;
&lt;li&gt;node 和 link 上的 label 全部使用引号包裹，以避免特殊字符的干扰。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;example-1-jian-dan-cha-xun&quot;&gt;Example 1: 简单查询&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: users(id, name, birthday, email)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; name, email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; birthday &amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1990-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其对应的 qir 代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; type users 是一个表类型信息，用于为后面的代码提供类型检查，例如字段名是否正确，数据类型是否正确等。
&lt;&#x2F;span&gt;&lt;span&gt;type users = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;id&amp;quot;, type = &amp;quot;int&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;birthday&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;email&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]    
&lt;&#x2F;span&gt;&lt;span&gt;}; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; source1 是一个 Source operator, 其输出类型为： DataFrame {
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;     columns = [
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;         {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;         {name = &amp;quot;birthday&amp;quot;, type = &amp;quot;date&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;         {name = &amp;quot;email&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;     ]
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; }
&lt;&#x2F;span&gt;&lt;span&gt;let source1 = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;, &#x2F;&#x2F; table name
&lt;&#x2F;span&gt;&lt;span&gt;    table = users, 
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;name&amp;quot;, &amp;quot;birthday&amp;quot;, &amp;quot;email&amp;quot;] ); &#x2F;&#x2F; 从 users 表中读取数据
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; filter1 是一个 ordinary operator, 其输出类型为： DataFrame {
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F;     columns = [
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F;         {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F;         {name = &amp;quot;email&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F;     ]
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; }
&lt;&#x2F;span&gt;&lt;span&gt;let filter1 = filter(input = source1, 
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.birthday &amp;gt; date&amp;#39;1990-01-01&amp;#39; },     &#x2F;&#x2F; 过滤出 birthday &amp;gt; &amp;#39;1990-01-01&amp;#39; 的数据 
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;name&amp;quot;, &amp;quot;email&amp;quot;] );   &#x2F;&#x2F; 输出 name 和 email 字段
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; sink1 是一个 sink operator, 其输出类型与输入类型相同，起到一个收集的作用
&lt;&#x2F;span&gt;&lt;span&gt;let sink1 = identity_sink(input = filter1); 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline1 = pipeline {
&lt;&#x2F;span&gt;&lt;span&gt;    source = source1,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [filter1],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = sink1
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; graph 是一个 topology 类型，用于描述整个查询的拓扑结构，也是单个 qir 文件的最终输出结果。
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology( main = pipeline1 );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-2-simple-join&quot;&gt;Example 2: simple join&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;--- table: order_item(order_item_id: u64, order_date: date, product_id: u32, quantity: u32, amount: decimal)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;--- table: product(product_id: u32, product_name: string, category_id: u32)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; product_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(quantity), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; order_item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; product on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;order_item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;product_id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;product&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;product_id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; product_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的 qir 代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 定义表结构类型
&lt;&#x2F;span&gt;&lt;span&gt;type order_item = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_item_id&amp;quot;, type = &amp;quot;u64&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_date&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;quantity&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;amount&amp;quot;, type = &amp;quot;decimal&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type product = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;product&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;category_id&amp;quot;, type = &amp;quot;u32&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 源操作符
&lt;&#x2F;span&gt;&lt;span&gt;let order_item_source = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = order_item,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;product_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;]  &#x2F;&#x2F; 只需要参与计算的字段
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let product_source = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;product_scan&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = product,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;product_id&amp;quot;, &amp;quot;product_name&amp;quot;]       &#x2F;&#x2F; 只需要关联字段和分组字段
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_build1 = build_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;	input = product_source,
&lt;&#x2F;span&gt;&lt;span&gt;	key = [ &amp;quot;product_id&amp;quot; ] );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_lookup1 = lookup_hash_table( ht = ht_build1, input = order_item_source, key = [&amp;quot;product_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;	output = [ [&amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;], &#x2F;&#x2F; field from lookup side
&lt;&#x2F;span&gt;&lt;span&gt;			   [&amp;quot;product_name&amp;quot;] ]	&#x2F;&#x2F; field from build side
&lt;&#x2F;span&gt;&lt;span&gt; );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let hash_aggr1 = hash_aggregator( input = h1_lookup1, 
&lt;&#x2F;span&gt;&lt;span&gt;	group_by = [&amp;quot;product_name&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;	aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;		sum_aggregator( name=&amp;quot;total_quantity&amp;quot;, field = &amp;quot;quantity&amp;quot; ),
&lt;&#x2F;span&gt;&lt;span&gt;		sum_aggregator( name=&amp;quot;total_amount&amp;quot;, field = &amp;quot;amount&amp;quot; )
&lt;&#x2F;span&gt;&lt;span&gt;	],
&lt;&#x2F;span&gt;&lt;span&gt;	output = [ &amp;quot;product_name&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot; ]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline1 = pipeline( source = product_source, sink = ht_build1 );
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline2 = pipeline( source = order_item_source, operators = [ht_lookup1], sink = hash_aggr1, 
&lt;&#x2F;span&gt;&lt;span&gt;	parent = [pipeline1] );	&#x2F;&#x2F; pipeline2 依赖 pipeline1, 仅当 pipeline1 执行完成后，才能开始执行
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology(main = pipeline2);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-3-join-with-filter&quot;&gt;Example 3: join with filter&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: order_item(order_item_id, order_date, user_id, product_id, quantity, amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: users(user_id, name, sex, province, city)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; province, city, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(order_item_id), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(quantity), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; order_item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; users on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;order_item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; order_date &amp;gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2025-01-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and sex = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; province, city
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 定义表结构类型
&lt;&#x2F;span&gt;&lt;span&gt;type order_item = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_item_id&amp;quot;, type = &amp;quot;u64&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_date&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;quantity&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;amount&amp;quot;, type = &amp;quot;decimal&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type users = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;sex&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;province&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;city&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 源操作符和过滤（优化版）
&lt;&#x2F;span&gt;&lt;span&gt;let users_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = users,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let users_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.sex == &amp;quot;F&amp;quot; },  &#x2F;&#x2F; 提前过滤女性用户
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_build = build_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_item_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = order_item,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;, &amp;quot;order_date&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_item_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.order_date &amp;gt;= date&amp;#39;2025-01-01&amp;#39; },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_lookup = lookup_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    ht = ht_build,
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;],  &#x2F;&#x2F; 订单表字段
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]                     &#x2F;&#x2F; 用户表字段（已过滤）
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    join_type = &amp;quot;inner&amp;quot;  &#x2F;&#x2F; 改为内连接（因为用户表已过滤）
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let hash_aggr = hash_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;    input = ht_lookup,
&lt;&#x2F;span&gt;&lt;span&gt;    group_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;        count_aggregator(name = &amp;quot;total_orders&amp;quot;, field = &amp;quot;order_item_id&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_quantity&amp;quot;, field = &amp;quot;quantity&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_amount&amp;quot;, field = &amp;quot;amount&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 流水线定义（优化版）
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline1 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [users_filter],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = ht_build
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline2 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = order_item_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [order_filter, ht_lookup, hash_aggr],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = hash_aggr,
&lt;&#x2F;span&gt;&lt;span&gt;    parent = [pipeline1]  &#x2F;&#x2F; 强依赖
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology(main = pipeline2);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-4-join-with-filter-and-having&quot;&gt;Example 4: join with filter and having&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: order_item(order_item_id, order_date, user_id, product_id, quantity, amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: users(user_id, name, sex, province, city)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; province, city, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(order_item_id), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(quantity), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; order_item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; users on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;order_item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; order_date &amp;gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2025-01-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and sex = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; province, city
&lt;&#x2F;span&gt;&lt;span&gt;having &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(order_item_id) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等价的 qir 代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 定义表结构类型（与示例3相同）
&lt;&#x2F;span&gt;&lt;span&gt;type order_item = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_item_id&amp;quot;, type = &amp;quot;u64&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_date&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;quantity&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;amount&amp;quot;, type = &amp;quot;decimal&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type users = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;sex&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;province&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;city&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 源操作符和过滤（继承优化逻辑）
&lt;&#x2F;span&gt;&lt;span&gt;let users_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = users,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let users_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.sex == &amp;quot;F&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_build = build_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_item_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = order_item,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;, &amp;quot;order_date&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_item_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.order_date &amp;gt;= date&amp;#39;2025-01-01&amp;#39; },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_lookup = lookup_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    ht = ht_build,
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    join_type = &amp;quot;inner&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 新增 HAVING 过滤阶段
&lt;&#x2F;span&gt;&lt;span&gt;let hash_aggr = hash_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;    input = ht_lookup,
&lt;&#x2F;span&gt;&lt;span&gt;    group_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;        count_aggregator(name = &amp;quot;total_orders&amp;quot;, field = &amp;quot;order_item_id&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_quantity&amp;quot;, field = &amp;quot;quantity&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_amount&amp;quot;, field = &amp;quot;amount&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let having_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = hash_aggr,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.total_orders &amp;gt; 10 },  &#x2F;&#x2F; HAVING 条件
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 流水线定义
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline1 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [users_filter],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = ht_build
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline2 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = order_item_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [order_filter, ht_lookup, hash_aggr, having_filter],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = having_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    parent = [pipeline1]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology(main = pipeline2);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的拓扑图为：
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
graph TD
    subgraph Pipeline1[&amp;quot;用户表处理&amp;quot;]
        us1[&amp;quot;users_scan: scan&amp;quot;] --&amp;gt;|&amp;quot;读取用户数据&amp;quot;| uf1[&amp;quot;users_filter: filter&amp;quot;]
        uf1 --&amp;gt;|&amp;quot;过滤女性用户&amp;quot;| hb1[&amp;quot;ht_build: build_hash_table&amp;quot;]
    end

    subgraph Pipeline2[&amp;quot;订单处理&amp;quot;]
        ois1[&amp;quot;order_item_scan: scan&amp;quot;] --&amp;gt;|&amp;quot;读取订单数据&amp;quot;| of1[&amp;quot;order_filter: filter&amp;quot;]
        of1 --&amp;gt;|&amp;quot;过滤日期&amp;quot;| hl1[&amp;quot;ht_lookup: lookup_hash_table&amp;quot;]
        hl1 --&amp;gt;|&amp;quot;连接结果&amp;quot;| ha1[&amp;quot;hash_aggr: hash_aggregator&amp;quot;]
        ha1 --&amp;gt;|&amp;quot;聚合结果&amp;quot;| hf1[&amp;quot;having_filter: filter&amp;quot;]
    end

    Pipeline1 --&amp;gt;|&amp;quot;父依赖&amp;quot;| Pipeline2
    hb1 -.-&amp;gt;|&amp;quot;哈希表依赖&amp;quot;| hl1
```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-5-shuffle-join&quot;&gt;Example 5: shuffle join&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- big table join, using shuffle join
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: order_item(order_item_id, order_date, user_id, product_id, quantity, amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table: users(user_id, name, sex, province, city)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; province, city, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(order_item_id), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(quantity), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; order_item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; users on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;order_item&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;user_id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; order_date &amp;gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2025-01-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and sex = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; province, city
&lt;&#x2F;span&gt;&lt;span&gt;having &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(order_item_id) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的 qir 代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 定义表结构类型
&lt;&#x2F;span&gt;&lt;span&gt;type order_item = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_item_id&amp;quot;, type = &amp;quot;u64&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;order_date&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;product_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;quantity&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;amount&amp;quot;, type = &amp;quot;decimal&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type users = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;user_id&amp;quot;, type = &amp;quot;u32&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;name&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;sex&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;province&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;city&amp;quot;, type = &amp;quot;string&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 用户表处理流水线（哈希表构建侧）
&lt;&#x2F;span&gt;&lt;span&gt;let users_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = users,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let users_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.sex == &amp;quot;F&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let users_exchange_sender = exchange_sender(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let users_exchange_receiver = exchange_receiver(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_exchange_sender,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let ht_build = build_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    input = users_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 订单表处理流水线（探测侧）
&lt;&#x2F;span&gt;&lt;span&gt;let order_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;order_item&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = order_item,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;, &amp;quot;order_date&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.order_date &amp;gt;= date&amp;#39;2025-01-01&amp;#39; },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;user_id&amp;quot;, &amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_exchange_sender = exchange_sender(
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let order_exchange_receiver = exchange_receiver(
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_exchange_sender,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 本地Join与聚合
&lt;&#x2F;span&gt;&lt;span&gt;let ht_lookup = lookup_hash_table(
&lt;&#x2F;span&gt;&lt;span&gt;    ht = ht_build,
&lt;&#x2F;span&gt;&lt;span&gt;    input = order_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    key = [&amp;quot;user_id&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;order_item_id&amp;quot;, &amp;quot;quantity&amp;quot;, &amp;quot;amount&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    join_type = &amp;quot;inner&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let local_aggr = hash_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;    input = ht_lookup,
&lt;&#x2F;span&gt;&lt;span&gt;    group_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;        count_aggregator(name = &amp;quot;total_orders&amp;quot;, field = &amp;quot;order_item_id&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_quantity&amp;quot;, field = &amp;quot;quantity&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_amount&amp;quot;, field = &amp;quot;amount&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 全局聚合阶段
&lt;&#x2F;span&gt;&lt;span&gt;let global_exchange_sender = exchange_sender(
&lt;&#x2F;span&gt;&lt;span&gt;    input = local_aggr,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let global_exchange_receiver = exchange_receiver(
&lt;&#x2F;span&gt;&lt;span&gt;    input = global_exchange_sender,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    shuffle_mode = &amp;quot;HASH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let global_aggr = hash_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;    input = global_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    group_by = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_orders&amp;quot;, field = &amp;quot;total_orders&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_quantity&amp;quot;, field = &amp;quot;total_quantity&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        sum_aggregator(name = &amp;quot;total_amount&amp;quot;, field = &amp;quot;total_amount&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let having_filter = filter(
&lt;&#x2F;span&gt;&lt;span&gt;    input = global_aggr,
&lt;&#x2F;span&gt;&lt;span&gt;    predictor = |row| { row.total_orders &amp;gt; 10 },
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;province&amp;quot;, &amp;quot;city&amp;quot;, &amp;quot;total_orders&amp;quot;, &amp;quot;total_quantity&amp;quot;, &amp;quot;total_amount&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 流水线定义
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline_users = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = users_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [users_filter, users_exchange_sender],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = users_exchange_sender
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline_ht = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = users_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [ht_build],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = ht_build,
&lt;&#x2F;span&gt;&lt;span&gt;    parent = [pipeline_users]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline_order = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = order_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [order_filter, order_exchange_sender],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = order_exchange_sender
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline_join = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = order_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [ht_lookup, local_aggr, global_exchange_sender],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = global_exchange_sender,
&lt;&#x2F;span&gt;&lt;span&gt;    parent = [pipeline_ht, pipeline_order]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline_global = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = global_exchange_receiver,
&lt;&#x2F;span&gt;&lt;span&gt;    operators = [global_aggr, having_filter],
&lt;&#x2F;span&gt;&lt;span&gt;    sink = having_filter,
&lt;&#x2F;span&gt;&lt;span&gt;    parent = [pipeline_join]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology(main = pipeline_global);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的拓扑图如下：
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
graph TD
    subgraph Pipeline1[&amp;quot;Users预处理&amp;quot;]
        us1[&amp;quot;users_scan: scan&amp;quot;] --&amp;gt;|&amp;quot;原始数据&amp;quot;| us2[&amp;quot;users_filter: filter&amp;quot;]
        us2 --&amp;gt;|&amp;quot;过滤女性用户&amp;quot;| us3[&amp;quot;users_exchange_sender: exchange_sender&amp;quot;]
        style us3 stroke:#666,stroke-dasharray:5 5
    end

    us3 -.-&amp;gt; ur1

    subgraph Pipeline2[&amp;quot;哈希表构建&amp;quot;]
        ur1[&amp;quot;users_exchange_receiver: exchange_receiver&amp;quot;] --&amp;gt;|&amp;quot;按user_id分区&amp;quot;| ur2[&amp;quot;ht_build: build_hash_table&amp;quot;]
        style ur1 stroke:#666,stroke-dasharray:5 5
    end

    subgraph Pipeline3[&amp;quot;Orders预处理&amp;quot;]
        od1[&amp;quot;order_scan: scan&amp;quot;] --&amp;gt;|&amp;quot;原始订单&amp;quot;| od2[&amp;quot;order_filter: filter&amp;quot;]
        od2 --&amp;gt;|&amp;quot;过滤日期&amp;quot;| od3[order_exchange_sender: exchange_sender]
        style od3 stroke:#666,stroke-dasharray:5 5
    end

    od3 -.-&amp;gt; or1

    subgraph Pipeline4[&amp;quot;本地Join聚合&amp;quot;]
        or1[&amp;quot;order_exchange_receiver: exchange_receiver&amp;quot;] --&amp;gt;|&amp;quot;按user_id分区&amp;quot;| j1[&amp;quot;ht_lookup: lookup_hash_table&amp;quot;]
        j1 -.-&amp;gt;|&amp;quot;哈希表依赖&amp;quot;| ur2
        style j1 stroke:#0F0
        j1 --&amp;gt;|&amp;quot;连接结果&amp;quot;| a1[&amp;quot;local_aggr: hash_aggregator&amp;quot;]
        a1 --&amp;gt;|&amp;quot;本地聚合&amp;quot;| e1[global_exchange_sender: exchange_sender]
        style e1 stroke:#666,stroke-dasharray:5 5
    end

    e1 -.-&amp;gt; gr1
    
    subgraph Pipeline5[&amp;quot;全局聚合&amp;quot;]
        gr1[&amp;quot;global_exchange_receiver: exchange_receiver&amp;quot;] --&amp;gt;|按省市分区| a2[&amp;quot;global_aggr: hash_aggregator&amp;quot;]
        style gr1 stroke:#666,stroke-dasharray:5 5
        a2 --&amp;gt;|最终结果| f1[&amp;quot;having_filter: filter&amp;quot;]
    end

   Pipeline1 --&amp;gt;|&amp;quot;Shuffle(user_id)&amp;quot;| Pipeline2
   Pipeline3 --&amp;gt;|&amp;quot;Shuffle(user_id)&amp;quot;| Pipeline4
   Pipeline2 --&amp;gt;|&amp;quot;哈希表数据&amp;quot;| Pipeline4
   Pipeline4 --&amp;gt;|&amp;quot;Shuffle(province&amp;#x2F;city)&amp;quot;| Pipeline5
```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-6-chuang-kou-han-shu&quot;&gt;Example 6: 窗口函数&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- table data(Plant: string, Date: date, mwh: f64)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Plant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MWh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) OVER (
&lt;&#x2F;span&gt;&lt;span&gt;        PARTITION BY &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Plant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ORDER BY &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ASC
&lt;&#x2F;span&gt;&lt;span&gt;        RANGE BETWEEN INTERVAL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; DAYS PRECEDING
&lt;&#x2F;span&gt;&lt;span&gt;                  AND INTERVAL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; DAYS FOLLOWING)
&lt;&#x2F;span&gt;&lt;span&gt;        AS &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MWh 7-day Moving Average&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ORDER BY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的 qir 代码为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qir&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qir &quot;&gt;&lt;code class=&quot;language-qir&quot; data-lang=&quot;qir&quot;&gt;&lt;span&gt;type data = table {
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;data&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;Plant&amp;quot;, type = &amp;quot;string&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;Date&amp;quot;, type = &amp;quot;date&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;        {name = &amp;quot;MWh&amp;quot;, type = &amp;quot;f64&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 数据读取
&lt;&#x2F;span&gt;&lt;span&gt;let data_scan = scan(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;data&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    table = data,
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;Plant&amp;quot;, &amp;quot;Date&amp;quot;, &amp;quot;MWh&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 本地排序与窗口计算
&lt;&#x2F;span&gt;&lt;span&gt;let sort_op = sort(
&lt;&#x2F;span&gt;&lt;span&gt;    input = data_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    columns = [
&lt;&#x2F;span&gt;&lt;span&gt;    	{column = &amp;quot;Plant&amp;quot;, direction = &amp;quot;ASC&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;    	{column = &amp;quot;Date&amp;quot;, direction = &amp;quot;ASC&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;Plant&amp;quot;, &amp;quot;Date&amp;quot;, &amp;quot;MWh&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let window_agg = window_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;    input = sort_op,
&lt;&#x2F;span&gt;&lt;span&gt;    partition_by = [&amp;quot;Plant&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    order_by = [{column = &amp;quot;Date&amp;quot;, direction = &amp;quot;ASC&amp;quot;}],
&lt;&#x2F;span&gt;&lt;span&gt;    frame = {
&lt;&#x2F;span&gt;&lt;span&gt;        type = &amp;quot;RANGE&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        start = {value = 3, unit = &amp;quot;DAY&amp;quot;, preceding = true},
&lt;&#x2F;span&gt;&lt;span&gt;        end = {value = 3, unit = &amp;quot;DAY&amp;quot;, preceding = false}
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    aggregators = [
&lt;&#x2F;span&gt;&lt;span&gt;        avg_aggregator(
&lt;&#x2F;span&gt;&lt;span&gt;            name = &amp;quot;MWh 7-day Moving Average&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            field = &amp;quot;MWh&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    output = [&amp;quot;Plant&amp;quot;, &amp;quot;Date&amp;quot;, &amp;quot;MWh 7-day Moving Average&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let sink = identity_sink(input = global_sort);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline1 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;    source = data_scan,
&lt;&#x2F;span&gt;&lt;span&gt;    sink = sort_op
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let pipeline2 = pipeline(
&lt;&#x2F;span&gt;&lt;span&gt;	input = sort_op,
&lt;&#x2F;span&gt;&lt;span&gt;	sink = window_agg,
&lt;&#x2F;span&gt;&lt;span&gt;	parent = pipeline1
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let graph = topology(main = main_pipeline);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的拓扑图为:
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
graph TD
    subgraph Pipeline1[&amp;quot;数据预处理流水线&amp;quot;]
        ds1[&amp;quot;data_scan: scan&amp;quot;] --&amp;gt;|&amp;quot;读取原始数据&amp;quot;| so1[&amp;quot;sort_op: sort&amp;quot;]
        style so1 stroke:#333
    end

    subgraph Pipeline2[&amp;quot;窗口计算流水线&amp;quot;]
        so1 --&amp;gt;|&amp;quot;排序后数据&amp;quot;| wa1[&amp;quot;window_agg: window_aggregator&amp;quot;]
    end

    Pipeline1 --&amp;gt;|&amp;quot;父依赖&amp;quot;| Pipeline2
    style Pipeline1 stroke:#F00
    style Pipeline2 stroke:#F00
```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;p&gt;TODO: qir 为窗口函数提供了不同的计算模式：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;as an operator: 支持流式的处理，可以满足对大数据集进行窗口计算。&lt;&#x2F;li&gt;
&lt;li&gt;as an sink: 不支持流式计算，需要将整个数据集放入内存进行窗口计算。
这一块稍后补充。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;he-xin-gai-nian&quot;&gt;核心概念&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;topology&quot;&gt;topology&lt;&#x2F;h2&gt;
&lt;p&gt;topology 是一个完整的查询计划，由一个或多个 pipeline 组成。pipeline 之间可以有依赖关系,形成一个有向无环图(DAG)。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pipeline&quot;&gt;pipeline&lt;&#x2F;h2&gt;
&lt;p&gt;pipeline 是一个数据处理流水线，由 source、operators 和 sink 组成:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;source: 数据源算子，负责从存储系统（或者接收外部的请求）读取数据&lt;&#x2F;li&gt;
&lt;li&gt;operators: 处理算子序列，对数据进行转换、过滤、聚合等操作&lt;&#x2F;li&gt;
&lt;li&gt;sink: 汇聚算子，负责将处理结果写入存储系统或传递给下一个 pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;pipeline 支持 partition，每个partition 中的算子的数据流动是在单个线程中，以小批量的方式进行流动，这种方式可以充分发挥 CPU 的
向量化计算和 Cache 带来的性能提升。&lt;&#x2F;p&gt;
&lt;p&gt;pipeline 支持分区时，sink 节点可以是分区的，或者是汇聚的。&lt;&#x2F;p&gt;
&lt;p&gt;pipeline 之间可以有依赖关系:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
&lt;code&gt;pipeline_a&lt;&#x2F;code&gt; 可以依赖于 &lt;code&gt;pipeline_b&lt;&#x2F;code&gt;: b 执行完成后，a 才能开始执行&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
&lt;code&gt;pipeline_a[partition_1]&lt;&#x2F;code&gt; 可以依赖于 &lt;code&gt;pipeline_b[partition_1]&lt;&#x2F;code&gt;: b 的 partition_1 执行完成后，a 的 partition_1 才能开始执行&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
operator 之间支持 notify 机制，下游 operator 可以向上游 operator 发送通知，例如：
&lt;ul&gt;
&lt;li&gt;Limit 操作，当达到指定的行数时，通知上游停止发送数据&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;operator&quot;&gt;operator&lt;&#x2F;h2&gt;
&lt;p&gt;operator 是数据处理算子，每个算子都有明确定义的输入和输出类型。常见的算子包括:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;filter: 过滤算子&lt;&#x2F;li&gt;
&lt;li&gt;join: 关联算子&lt;&#x2F;li&gt;
&lt;li&gt;aggregation: 聚合算子&lt;&#x2F;li&gt;
&lt;li&gt;sort: 排序算子&lt;&#x2F;li&gt;
&lt;li&gt;window: 窗口算子&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;source&quot;&gt;source&lt;&#x2F;h2&gt;
&lt;p&gt;source 是数据源算子，负责从存储系统读取数据。常见的 source 包括:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;scan: 表扫描算子&lt;&#x2F;li&gt;
&lt;li&gt;exchange_receiver: 数据交换接收算子&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sink&quot;&gt;sink&lt;&#x2F;h2&gt;
&lt;p&gt;sink 是汇聚算子，负责将处理结果写入存储系统或传递给下一个 pipeline。常见的 sink 包括:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;identity_sink: 恒等汇聚算子&lt;&#x2F;li&gt;
&lt;li&gt;exchange_sender: 数据交换发送算子&lt;&#x2F;li&gt;
&lt;li&gt;build_hash_table: 哈希表构建算子&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;type-system&quot;&gt;type system&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;data type&lt;&#x2F;li&gt;
&lt;li&gt;column metadata: nullable, sort, index(minmax, bloom)&lt;&#x2F;li&gt;
&lt;li&gt;table metadata: partition, bucket&lt;&#x2F;li&gt;
&lt;li&gt;对性能的优化
&lt;ul&gt;
&lt;li&gt;表达式求值，减少运行期的解释开销&lt;&#x2F;li&gt;
&lt;li&gt;nullable: 避免 null 检查&lt;&#x2F;li&gt;
&lt;li&gt;排序： 如果数据已经排序，则可以选择 Merge Sort 等算法&lt;&#x2F;li&gt;
&lt;li&gt;partition: 避免全表扫描&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;partition&quot;&gt;partition&lt;&#x2F;h2&gt;
&lt;p&gt;partition 是数据分区概念，用于并行和分布式计算:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;数据可以按照指定的字段进行分区&lt;&#x2F;li&gt;
&lt;li&gt;不同分区可以并行处理&lt;&#x2F;li&gt;
&lt;li&gt;分区之间可以通过 exchange 算子进行数据交换&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;suan-zi-shuo-ming&quot;&gt;算子说明&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;scan 表扫描算子，用于从表中读取数据&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;name: 表名&lt;&#x2F;li&gt;
&lt;li&gt;table: 表类型定义，optional， 用于类型检查&lt;&#x2F;li&gt;
&lt;li&gt;output: 需要输出的字段列表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;filter 对输入 DataFrame 进行过滤操作&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;predictor: 过滤函数，返回 true 表示保留，返回 false 表示丢弃&lt;&#x2F;li&gt;
&lt;li&gt;output: 输出字段列表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;build_hash_table 构建哈希表，用于关联操作&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;key: 哈希表的 key 列&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;lookup_hash_table 从哈希表中查找数据，用于关联操作&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ht: 哈希表，由 build_hash_table 构建&lt;&#x2F;li&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;key: 关联字段&lt;&#x2F;li&gt;
&lt;li&gt;output: 输出字段列表，格式为 [[lookup_side_fields]， [build_side_fields]]&lt;&#x2F;li&gt;
&lt;li&gt;join_type: 连接类型，inner&#x2F;left&#x2F;right&#x2F;semi&#x2F;anti-semi&#x2F;crossjoin 等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;hash_aggregator 哈希聚合算子&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;group_by: 分组字段列表&lt;&#x2F;li&gt;
&lt;li&gt;aggregators: 聚合函数列表&lt;&#x2F;li&gt;
&lt;li&gt;output: 输出字段列表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;count_aggregator 计数聚合函数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;name: 聚合结果字段名&lt;&#x2F;li&gt;
&lt;li&gt;field: 要计数的字段名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;sum_aggregator 求和聚合函数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;name: 聚合结果字段名&lt;&#x2F;li&gt;
&lt;li&gt;field: 要求和的字段名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;identity_sink 恒等汇聚算子&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;说明: 输出类型与输入类型相同，用于数据收集&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;exchange_sender 发送端算子，用于分布式计算&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;partition_by: 分区字段列表&lt;&#x2F;li&gt;
&lt;li&gt;shuffle_mode: &quot;HASH&quot; for hash shuffle， &quot;GLOBAL&quot; for collect all data to one partition&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;exchange_receiver 接收端算子，用于分布式计算&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;input: 输入 DataFrame， 对应于 exchange_sender 算子&lt;&#x2F;li&gt;
&lt;li&gt;partition_by: 分区字段列表，需要与 exchange_sender 算子的 partition_by 一致&lt;&#x2F;li&gt;
&lt;li&gt;shuffle_mode: &quot;HASH&quot; for hash shuffle， &quot;GLOBAL&quot; for collect all data to one partition，需要与 exchange_sender 算子的 shuffle_mode 一致&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;window_aggr 带补充&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;pipeline 流水线定义&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;source: 源算子&lt;&#x2F;li&gt;
&lt;li&gt;operators: 算子列表（可选）&lt;&#x2F;li&gt;
&lt;li&gt;sink: 汇聚算子&lt;&#x2F;li&gt;
&lt;li&gt;parent: 依赖的父流水线列表（可选）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;topology 查询拓扑结构&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;main: 主流水线&lt;&#x2F;li&gt;
&lt;li&gt;说明: 用于描述整个查询的拓扑结构，是单个 qir 文件的最终输出&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;当进行大数据量的表之间 join 时，通常会使用 shuffle join 算法，即将数据按照 join key 进行哈希分区，然后将相同 key 的数据发送到同一个节点进行 join 操作。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;支持 &lt;code&gt;SELECT sum(amount), sum(amount) FILTER (region != &#x27;north&#x27;) FROM sales;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;支持 &lt;code&gt;SELECT first(amount ORDER BY date ASC) FROM sales;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;提供更多基础时间窗口能力（date based）,增强对时间快速计算的支持。
&lt;ul&gt;
&lt;li&gt;年&#x2F;年季&#x2F;年月&#x2F;年周&#x2F;年月日 多种层次结构  &lt;code&gt;date_trunc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;前期、同期&lt;&#x2F;li&gt;
&lt;li&gt;（年&#x2F;月&#x2F;周）累计、前期累计、同期累计&lt;&#x2F;li&gt;
&lt;li&gt;滑动、滚动窗口&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;提供更多时序窗口能力（time based）&lt;&#x2F;li&gt;
&lt;li&gt;支持更灵活的窗口函数能力。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SUM(X) OVER (PARTITION BY expr ORDER BY expr RANGE BETWEEN expr AND expr)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SUM(X) OVER (PARTITION BY expr ORDER BY expr WHERE expr)&lt;&#x2F;code&gt;
对字符串等类型而言，range bettween expr precedding 没法使用，对日期、时间等也更简洁。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;扩展支持如下的 SQL 语法，这样，就可以处理类似于 MDX 的衍生度量（修改当前 Context 的上下文，包括增加新的维度条件，或者减少现有的维度限制，但保持当前的查询行不变）。&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; a, b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(X),
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(X) FILTER (c &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- SUM(X, a, b, c &amp;gt; 10) 
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(X) BY a FILTER(b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;and c &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- SUM(X, a, b = 2, c &amp;gt; 10)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
提供这种扩展能力，不仅提升了 SQL 的表达能力，而且这个可以生成一个高效的执行 plan，执行效率也能得到显著提升。&lt;&#x2F;li&gt;
&lt;li&gt;支持：这个特性可以显著简化 分组小计的 SQL 查询。
&lt;ul&gt;
&lt;li&gt;duckdb:&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- the syntax () denotes the empty set (i.e., computing an ungrouped aggregate)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 这个功能非常适合于进行分组小计的计算。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; city, street_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(income)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; addresses
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span&gt; GROUPING SETS ((city, street_name), (city), (street_name), ());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; city, street_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(income)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; addresses
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span&gt; CUBE (city, street_name); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 等效于 group by grouping sets( (city, street_name), (city), (street_name), ());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; city, street_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span&gt;(income)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; addresses
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span&gt; ROLLUP (city, street_name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 等效于 group by grouping sets( (city, street_name), (city), () );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- grouping_id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>April 2025</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-04/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-04/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-04/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Rust
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tweedegolf.nl&#x2F;en&#x2F;blog&#x2F;152&#x2F;does-using-rust-really-make-your-software-safer&quot;&gt;does using rust really make safer?&lt;&#x2F;a&gt;
一个很有趣的实验，对一个 DNS 解析的安全漏洞，选择4个人使用Rust进行重写（包括实习生与有经验的同学），整体的安全性能大幅度改进。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bumpalo&#x2F;latest&#x2F;bumpalo&#x2F;&quot;&gt;bumpalo:A fast bump allocation arena for Rust.&lt;&#x2F;a&gt;
类似于 zig 的 ArenaAllocator。对于 Request&#x2F;Response 模式的应用场景，有着最好的内存分配性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scala
&lt;ul&gt;
&lt;li&gt;Scala.js 1.19.0 对 WASM 支持增强。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;JavaScript
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;evanw.github.io&#x2F;source-map-visualization&#x2F; 这个工具可以帮助我们很好的理解 SourceMap&lt;&#x2F;li&gt;
&lt;li&gt;基于 SourceMap 可以很好的进行 package 后的代码大小进行分析。source-map-explorer 这个工具好像已经过时了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Datafusion
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1D3GDVas-8y0sA4c8EOgdCvEjVND4s2E7I6zfs67Y4j8&#x2F;edit#slide=id.p&quot;&gt;Part 1: Query Engine Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1ypylM3-w60kVDW7Q6S99AHzvlBgciTdjsAfqNP85K30&quot;&gt;Part 2: Logical Plan and  Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1cA2WQJ2qg6tx6y4Wf8FH2WVSm9JQ5UgmBWATHdik0hg&quot;&gt;Part 3: Physical Plan and Execution&lt;&#x2F;a&gt;
思考：&lt;&#x2F;li&gt;
&lt;li&gt;对比 Datafusion 与 DuckDB&#x2F;Polars 的执行计划
&lt;ol&gt;
&lt;li&gt;从 Part 3, page 11 来看，datafusion 在 operator 间基于 async&#x2F;await 异步执行。而 duckdb 在 pipeline 之内的 operator 是同步执行的。
这个可能是 duckdb 的性能优势。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;引入一个新的 IR 思考：&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;qir-design&#x2F;&quot;&gt;another query plan IR- draft&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;1894867212713579084&quot;&gt;DSM vs. NSM 为什么列存数据库DuckDB的算子会用到行存&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;2024&#x2F;03&#x2F;29&#x2F;external-aggregation.html&quot;&gt;duckdb hash aggr性能分析&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tecton.ai&#x2F;blog&#x2F;introducing-rift-tectons-compute-engine&#x2F;&quot;&gt;Introducing Rift: Tecton’s Compute Engine&lt;&#x2F;a&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-04&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Big data is dead because of Big Machine. 34T memory * 480 cores&lt;&#x2F;li&gt;
&lt;li&gt;Single node queries are cool again.&lt;&#x2F;li&gt;
&lt;li&gt;Storage and Compute separation.&lt;&#x2F;li&gt;
&lt;li&gt;Familiar, Python-native(notebook), local first developer experience.&lt;&#x2F;li&gt;
&lt;li&gt;Scalable, efficient, and portable across all workloads.&lt;&#x2F;li&gt;
&lt;li&gt;Faster time to market with lower operational cost.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;web-frontend&quot;&gt;Web &amp;amp; Frontend&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understand Svelte Rune</title>
        <published>2025-03-26T00:00:00+00:00</published>
        <updated>2025-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/understand-svelte-rune/"/>
        <id>https://wangzaixiang.github.io/blog/understand-svelte-rune/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/understand-svelte-rune/">&lt;h1 id=&quot;what-is-rune&quot;&gt;What is Rune?&lt;&#x2F;h1&gt;
&lt;p&gt;Svelte 5 是 Svelte 的一次大版本更新，其核心特性是引入了 runes 这个概念，在&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;runes&quot;&gt;这篇官方 blog&lt;&#x2F;a&gt; 中，作者对 runes 进行了解释：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;rune:
A letter or mark used as a mystical or magic symbol. (一种通过字符或者标记来表达某种特殊含义的符号)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在某些编程语言中，也有相似的概念：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vimscript 中的变量前缀&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;let g:ack_options = &amp;#39;-s -H&amp;#39;    &amp;quot; g: global
&lt;&#x2F;span&gt;&lt;span&gt;let s:ack_program = &amp;#39;ack&amp;#39;      &amp;quot; s: local (to script)
&lt;&#x2F;span&gt;&lt;span&gt;let l:foo = &amp;#39;bar&amp;#39;              &amp;quot; l: local (to function)
&lt;&#x2F;span&gt;&lt;span&gt;let w:foo = &amp;#39;bar&amp;#39;    &amp;quot; w: window
&lt;&#x2F;span&gt;&lt;span&gt;let b:state = &amp;#39;on&amp;#39;   &amp;quot; b: buffer
&lt;&#x2F;span&gt;&lt;span&gt;let t:state = &amp;#39;off&amp;#39;  &amp;quot; t: tab
&lt;&#x2F;span&gt;&lt;span&gt;echo v:var           &amp;quot; v: vim special
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ruby 中的变量前缀&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;global_variable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance_variable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;@@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class_variable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;CONSTANT = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;local_variable = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;go 语言中通过大小写来区分变量的可见性&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GlobalVariable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;globalVariable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GlobalVariable&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;globalVariable&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过使用某些前缀性标识字符，来表达某种特殊的含义，和 ROR(Rails on Ruby) 中的约定优于配置(Convention Over Configuration)的思想类似，
这种方式可以让代码更加易读，更加易于维护。但一般较少应用与底层编程语言中，因为一般来说，约定是上层的，在不同的环境中，可能会有不同的约定。而底层
语言一般不与特定的环境绑定，所以一般不会有这种约定。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;svelte-rune&quot;&gt;Svelte Rune&lt;&#x2F;h1&gt;
&lt;p&gt;通过一个简单的代码示例，对比一下 Svelte 4 与 Svelte 5 的区别：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&#x2F;&#x2F; Svelte 4
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on:click&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{increment}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        clicks: {count}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Svelte 5
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; vs: let count = 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on:click&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{increment}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        clicks: {count}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;粗略的看，Svelte 5 的代码比 Svelte 4 几乎是一样的，只是在 count 的定义上，多了一个 &lt;code&gt;$state&lt;&#x2F;code&gt; 的调用。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Svelte 4 中，这段代码是一段完全标准的 JavaScript 代码，没有任何特殊的地方。但 Svelte 框架会这段代码进行 Reactive 变换处理。这个过程
是完全隐式的。
&lt;ul&gt;
&lt;li&gt;优点的是，对用户完全透明，现有的代码无需任何修改，就可以使用 Svelte 的 Reactive 特性。&lt;&#x2F;li&gt;
&lt;li&gt;缺点也是：用户难以了解这段代码的实际运行语义，是 reactive 的还是普通的 JavaScript 代码。&lt;&#x2F;li&gt;
&lt;li&gt;如果这段代码不是放在 .svelte 文件中，而是放在一个普通的 .js 文件中，这种不明确的语义就会更加明显。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Svelte 5 中，通过 &lt;code&gt;$state&lt;&#x2F;code&gt; 调用(下面会介绍到，这其实不是一个函数调用)，明确的表明了这个变量是一个 Reactive 变量。这样，用户就可以清楚的知道这个变量是一个 Reactive 变量。
&lt;ul&gt;
&lt;li&gt;优点是：用户可以清楚的知道这个变量是一个 Reactive 变量。对这个变量的读写，会按照 reactive 机制来进行。（下面会介绍这个reactive 机制）&lt;&#x2F;li&gt;
&lt;li&gt;缺点是：从非 reactive 的代码转换到 reactive 的代码，需要进行修改。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;可以这么理解：Svelte 5 和 Svelte 4 具有几乎相同的运行时语义，而差异仅仅是在源代码中的表述方式不同：Svelte 4 通过完全隐式的方式（按照约定），
而 Svelte 5 通过显式的方式,使用 runes 来显示标记需要进行 reactive 处理的变量。&lt;&#x2F;p&gt;
&lt;p&gt;在支持 macro 的编程语言中，也会使用类似的方式来处理：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Rust 中的 &lt;code&gt;#[derive(Debug, Display)]&lt;&#x2F;code&gt; 注解，会自动为类型实现 Debug 和 Display trait。&lt;&#x2F;li&gt;
&lt;li&gt;Java 中的 Lombok 框架，对类型添加 &lt;code&gt;@Data&lt;&#x2F;code&gt; 注解，会自动为类型添加 getter&#x2F;setter&#x2F;hashCode&#x2F;equals 等方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ThoughtWorksInc&#x2F;Binding.scala&quot;&gt;Scala Binding&lt;&#x2F;a&gt; Scala 通过 macro 实现对代码的转换实现 reactive 机制。利用 macro 和 @html 注解。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;参照上述的对比，我们可以这么理解，runes 是类似于 Macro 的一种机制，采用 现有语言的语法（在svelte中，使用了 &lt;code&gt;$state, $props, $derived, $effect, $bindable, $inspect, $host&lt;&#x2F;code&gt; 等标记函数）
来显示申明某种特定的语义（这个语义由 macro-expansion 机制进行实现，在这里，就是 svelte compiler, svelte compiler 相当于 Scala 中 的 Macro）&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-svelte-rune-works&quot;&gt;How Svelte Rune works&lt;&#x2F;h1&gt;
&lt;p&gt;Svelte 提供了 playground 可以方便我们进行实验，这个 playground 还提供了查看编译后生成的 JS 代码的功能，可以帮助我们理解 runes 背后的工作原理。&lt;&#x2F;p&gt;
&lt;p&gt;case: &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;playground&#x2F;reactive-assignments&quot;&gt;Reactive assignments示例&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handleClick&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{handleClick}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	Clicked {count}
&lt;&#x2F;span&gt;&lt;span&gt;	{count === 1 ? &amp;#39;time&amp;#39; : &amp;#39;times&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的编译后的 JS 代码(已手动添加上类型信息)：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;svelte&#x2F;internal&#x2F;disclose-version&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;svelte&#x2F;internal&#x2F;client&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function handleClick() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;		count += 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handleClick&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: Source&amp;lt;number&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; template compiled
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Node = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;button&amp;gt; &amp;lt;&#x2F;button&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$$anchor&lt;&#x2F;span&gt;&lt;span&gt;: Node) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: Source&amp;lt;number&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let count = $state(0);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;= root(); 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__click &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handleClick&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;];   
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Clicked {count}\n{count === 1 ? &amp;#39;time&amp;#39; : &amp;#39;times&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;template_effect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;, `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Clicked ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;?? &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;? &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; : &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;times&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;?? &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$$anchor&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delegate&lt;&#x2F;span&gt;&lt;span&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;let count = $state 声明了一个 reactive 变量（对应类型为 &lt;code&gt;Source&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;在源代码中，对变量 count 的访问 get&#x2F;set 操作，被提升为 &lt;code&gt;$.get(count)&lt;&#x2F;code&gt; 和 &lt;code&gt;$.set(count, value)&lt;&#x2F;code&gt; 的调用。&lt;&#x2F;li&gt;
&lt;li&gt;为什么要提升？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$.get(count)&lt;&#x2F;code&gt; 提升后，在 effect 上下文中时，自动建立上下文对 count 的响应式监听。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$.set(count, value)&lt;&#x2F;code&gt; 提升后，除了更新 count 的值外，还会触发对下游监听着的通知，从而实现响应式的传播。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在这个示例中，只有 text node 建立了对 count 的监听，模版的其他部份（静态内容）并不关心 count 的变化，因此，当 count 发生变化时，
并不是整个 template 都会更新，而只有 text node 会更新。（当然，目前来说，一个 text node 是作为整体的）
&lt;ul&gt;
&lt;li&gt;从目前 svelte 生成的代码来看，在一个模版内的静态内容，即使只有部份发生了变化，仍然是所有静态内容都重新计算并刷新，这一块还有优化空间。&lt;&#x2F;li&gt;
&lt;li&gt;如果一个 $state 变量在整个App中，没有修改点，其会退化为一个 普通变量。&lt;&#x2F;li&gt;
&lt;li&gt;从这个示例来看，这里的 effect 依赖过程是完全编译期静态确定的，svelte 仍然是在编译期动态处理，如果调整到编译期静态建立依赖关系，是否
会有更好的初始化性能？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;这个实现方式放在 scala.js 中似乎实现成本更低。这个只是一个猜测，还没有实际评估。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h1&gt;
&lt;p&gt;对其他的 rune，后续进行分析。&lt;&#x2F;p&gt;
&lt;p&gt;总结： rune 可以理解为使用现有语法元素，来定义一种新的语言级特性（也可以理解为一种新的语法），是一个貌似函数，实际为语法的标记。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>大量组件树下的性能对比</title>
        <published>2025-03-06T00:00:00+00:00</published>
        <updated>2025-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/lot-of-components-perf/"/>
        <id>https://wangzaixiang.github.io/blog/lot-of-components-perf/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/lot-of-components-perf/">&lt;p&gt;这个测试是在创建大量组件树的情况下，对比几个前端框架的性能，为在高性能敏感的场景下选择合适的框架提供参考。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chang-jing-shuo-ming&quot;&gt;场景说明：&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;App 包括 1 个 PerfComp20 组件&lt;&#x2F;li&gt;
&lt;li&gt;1个 PerfComp20 组件包括 26 个 PerfComp11 组件&lt;&#x2F;li&gt;
&lt;li&gt;1个 PerfComp11 组件包括 1 个 PerfComp10 组件 (总共 26 个 PerfComp10 组件)&lt;&#x2F;li&gt;
&lt;li&gt;1个 PerfComp10 组件包括 200 个 PerfComp01 组件 （总共 5200 个 PerfComp01 组件）&lt;&#x2F;li&gt;
&lt;li&gt;1个 PerfComp01 组件包括 5 个 PerfComp00 组件 （总共 26000 个 PerfComp00 组件）&lt;&#x2F;li&gt;
&lt;li&gt;整个页面包括：
&lt;ul&gt;
&lt;li&gt;26 * 200 * 5 = 26000 个 PerfComp00 组件&lt;&#x2F;li&gt;
&lt;li&gt;26 * 200 = 5200 个 PerfComp01 组件&lt;&#x2F;li&gt;
&lt;li&gt;26 = 26 个 PerfComp10 组件&lt;&#x2F;li&gt;
&lt;li&gt;26 = 26 个 PerfComp11 组件&lt;&#x2F;li&gt;
&lt;li&gt;1 = 1 个 PerfComp20 组件&lt;&#x2F;li&gt;
&lt;li&gt;1 = 1 个 App 组件&lt;&#x2F;li&gt;
&lt;li&gt;总共 31254 个组件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ce-shi-jie-guo&quot;&gt;测试结果：&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Part&lt;&#x2F;th&gt;&lt;th&gt;Svelte&lt;&#x2F;th&gt;&lt;th&gt;Vue3&lt;&#x2F;th&gt;&lt;th&gt;Lit&lt;&#x2F;th&gt;&lt;th&gt;Lit + Native PerfComp00&lt;&#x2F;th&gt;&lt;th&gt;Lit + Native PerfComp00, PerfComp01&lt;&#x2F;th&gt;&lt;th&gt;All Native WC&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Scripting&lt;&#x2F;td&gt;&lt;td&gt;134.28ms&lt;&#x2F;td&gt;&lt;td&gt;332.95ms&lt;&#x2F;td&gt;&lt;td&gt;427.68ms&lt;&#x2F;td&gt;&lt;td&gt;265.5ms&lt;&#x2F;td&gt;&lt;td&gt;112.29ms&lt;&#x2F;td&gt;&lt;td&gt;85ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Styling&lt;&#x2F;td&gt;&lt;td&gt;17.39ms&lt;&#x2F;td&gt;&lt;td&gt;15.3ms&lt;&#x2F;td&gt;&lt;td&gt;59.71ms&lt;&#x2F;td&gt;&lt;td&gt;24.86ms&lt;&#x2F;td&gt;&lt;td&gt;20ms&lt;&#x2F;td&gt;&lt;td&gt;21ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Layout&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;51.69ms&lt;&#x2F;td&gt;&lt;td&gt;124.53ms&lt;&#x2F;td&gt;&lt;td&gt;33ms&lt;&#x2F;td&gt;&lt;td&gt;31ms&lt;&#x2F;td&gt;&lt;td&gt;32ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Paint&lt;&#x2F;td&gt;&lt;td&gt;2.10ms&lt;&#x2F;td&gt;&lt;td&gt;8.6ms&lt;&#x2F;td&gt;&lt;td&gt;34ms&lt;&#x2F;td&gt;&lt;td&gt;20ms&lt;&#x2F;td&gt;&lt;td&gt;11ms&lt;&#x2F;td&gt;&lt;td&gt;14ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;web-component-de-duo-chong-fang-shi-xing-neng-dui-bi&quot;&gt;Web Component 的多种方式性能对比&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Lit Element &#x2F; Native HTMLComponent&lt;&#x2F;li&gt;
&lt;li&gt;DOM structure
&lt;ul&gt;
&lt;li&gt;Shadow DOM + div.text shared style &lt;code&gt;&amp;lt;div&amp;gt;${text}&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Shadow DOM + div.text inlined style &lt;code&gt;&amp;lt;div style=&quot;display: inline;&quot;&amp;gt;${text}&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Shadow DOM + text &lt;code&gt;${text}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;element DOM + div.text shared style &lt;code&gt;&amp;lt;div class=&quot;inlined&quot;&amp;gt;${text}&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;element DOM + text &lt;code&gt;${text}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Mode&lt;&#x2F;th&gt;&lt;th&gt;DOM Structure&lt;&#x2F;th&gt;&lt;th&gt;Scripting&lt;&#x2F;th&gt;&lt;th&gt;Styling&lt;&#x2F;th&gt;&lt;th&gt;Layout&lt;&#x2F;th&gt;&lt;th&gt;Paint&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Lit&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + div.text shared style&lt;&#x2F;td&gt;&lt;td&gt;470&lt;&#x2F;td&gt;&lt;td&gt;93.70&lt;&#x2F;td&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Lit&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + div.text inlined style&lt;&#x2F;td&gt;&lt;td&gt;447&lt;&#x2F;td&gt;&lt;td&gt;46.39&lt;&#x2F;td&gt;&lt;td&gt;105.11&lt;&#x2F;td&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Lit&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + text&lt;&#x2F;td&gt;&lt;td&gt;443&lt;&#x2F;td&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;39.27&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Lit&lt;&#x2F;td&gt;&lt;td&gt;element DOM + div.text shared style&lt;&#x2F;td&gt;&lt;td&gt;428&lt;&#x2F;td&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;119&lt;&#x2F;td&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Lit&lt;&#x2F;td&gt;&lt;td&gt;element DOM + text&lt;&#x2F;td&gt;&lt;td&gt;430&lt;&#x2F;td&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + div.text shared style&lt;&#x2F;td&gt;&lt;td&gt;103&lt;&#x2F;td&gt;&lt;td&gt;93.97&lt;&#x2F;td&gt;&lt;td&gt;120.85&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + div.text inlined style&lt;&#x2F;td&gt;&lt;td&gt;101&lt;&#x2F;td&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;Shadow DOM + text&lt;&#x2F;td&gt;&lt;td&gt;86&lt;&#x2F;td&gt;&lt;td&gt;20.8&lt;&#x2F;td&gt;&lt;td&gt;32.78&lt;&#x2F;td&gt;&lt;td&gt;14.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;element DOM + div.text shared style&lt;&#x2F;td&gt;&lt;td&gt;83&lt;&#x2F;td&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;99.5&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;element DOM + text&lt;&#x2F;td&gt;&lt;td&gt;75&lt;&#x2F;td&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;fen-xi-jie-lun&quot;&gt;分析结论&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于 Lit 的 Web Component 用于 micro component 时，导致页面中大量的 shadow dom 和 大量的DOM时
对性能的影响较大，尤其是对 styling 和 layout 的影响的耗时影响较大。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scripting: Lit 的初始化开销较大，估计主要是 Lit Template 的开销。按照 &lt;a href=&quot;https:&#x2F;&#x2F;lit.dev&#x2F;blog&#x2F;2023-10-10-lit-3.0&#x2F;#compiler&quot;&gt;Lit 文档&lt;&#x2F;a&gt;中的说法，对于 heavy-template 的情况下，采用预编译的
方式，首次性能提升 45%，更新时提升21%。 对需要大量重复的组件，可以考虑直接使用 Native Web Component。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;styling: Lit 目前选择的组件级共享的 style，由于在 shadow dom 中引入了 stylesheet，其对性能有一定的影响。相反，Svelte&#x2F;Vue3 等采用在 document level 的 style 似乎性能更好。&lt;&#x2F;p&gt;
&lt;p&gt;这个与感觉上并不一致，从感觉上来看，shadow dom 内的 style sheet 似乎会因为层次简单而有更高的 match 效率。但实际上，反而有损失，估计与批量处理有关。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;layout：shadow dom 的引入并不会导致 DOM 的复杂，layout 不会有大的影响。相反，组件带来的 DOM 结构的复杂性，会导致 layout 的性能开销。&lt;&#x2F;p&gt;
&lt;p&gt;对于 Svelte，micro component 自身可能不会引入额外的 DOM 结构，例如直接映射成 document 上的div&#x2F;text 元素。而 web component 中，每一个 component 自身会
占用一个 DOM element，在出现大量的组件时，可能会导致 layout 的性能开销。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Web Component 性能&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在本次测试中，使用 Native 编写全部的 Web Component 性能最佳，其开销甚至低于 Svelte（框架开销）。&lt;&#x2F;li&gt;
&lt;li&gt;shadow dom 自身并不会影响 DOM 结构的复杂度，不会带来额外的 layout 开销。&lt;&#x2F;li&gt;
&lt;li&gt;shadow dom 中的 adoptedStyleSheets 会带来 styling 的开销。当出现大量组件时，Styling 的时间有所增加。&lt;&#x2F;li&gt;
&lt;li&gt;说明引入框架多少会引入开销，尤其是UI组件首次初始化有处理模版、reactive框架等开销。
在这些方面，Svelte 的优势在于其编译时的静态优化而成本最低。Lit 的 Template compiler 应该是对此看齐，但目前还不成熟。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;本次测试较为变态，在一般应用场景中如不涉及到如此巨大的组件树（建议一般控制在2000以下时），一般无需担心初始化的性能问题。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考：&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;项目源代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;lot-of-elements-compare&quot;&gt;Git Repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Recalculate Style
&lt;blockquote&gt;
&lt;p&gt;In your performance recordings, some of these long-running tasks may be Recalculate Style events.
A Recalculate Style event tracks the time it takes for the browser to do the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Iterate through the DOM elements on a page, to find all of the CSS style rules that match a given element.&lt;&#x2F;li&gt;
&lt;li&gt;Compute each element&#x27;s actual style, based on the matching CSS style rules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;CSS styles need to be recalculated whenever the applicability of CSS rules may have changed, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When elements are added to or removed from the DOM.&lt;&#x2F;li&gt;
&lt;li&gt;When an element&#x27;s attributes are changed, such as the value of a class or id attribute.&lt;&#x2F;li&gt;
&lt;li&gt;When user input occurs, such as a mouse move or a change of which element in a webpage has focus, which can affect :hover rules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;see: https:&#x2F;&#x2F;developer.chrome.com&#x2F;docs&#x2F;devtools&#x2F;performance&#x2F;selector-stats?hl=zh-cn&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;对大量 DOM 进行更新导致 reflow 时，可以考虑使用 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wilsonpage&#x2F;fastdom?tab=readme-ov-file&quot;&gt;FastDOM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Shadow DOM 对 Style 的性能影响。&lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s?__biz=MzA5NTg1NzI0Mw==&amp;amp;mid=2650000010&amp;amp;idx=1&amp;amp;sn=dd2c9188b1e91467358d542e4ed99001&amp;amp;chksm=895bac7764066c46c70e6fb79023871313717d67db92722402bd04eb296e0735f398e6f393b9#rd&quot;&gt;中文&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;nolanlawson.com&#x2F;2021&#x2F;08&#x2F;15&#x2F;does-shadow-dom-improve-style-performance&#x2F;&quot;&gt;原文:Does shadow DOM improve style performance?&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;如果 page 比较复杂（DOM节点越多、CSS规则越多），shadow dom 可以提高 Style 速度&lt;&#x2F;li&gt;
&lt;li&gt;如果 page 并不复杂，引入 shadow dom 会增加固定的开销，反而增加 Style 开销（从单个大批量转换为多个小批量）
在很多时候，Style的时间会比 layout 更耗时。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nolanlawson.com&#x2F;2022&#x2F;06&#x2F;22&#x2F;style-scoping-versus-shadow-dom-which-is-fastest&#x2F;#:~:text=TL%3BDR%3A%20My%20new%20benchmark%20largely%20confirmed%20my%20previous,scenarios%2C%20but%20in%20others%20it%E2%80%99s%20much%20less%20performant&quot;&gt;Style scoping versus shadow DOM: which is fastest?&lt;&#x2F;a&gt;
总体支持 Shadow DOM 有改善 Style 性能的观点，且性能比较稳定。
&lt;ul&gt;
&lt;li&gt;相关测试项目 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nolanlawson&#x2F;shadow-selector-benchmark&quot;&gt;shadow-selector-benchmark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在线测试：https:&#x2F;&#x2F;nolanlawson.github.io&#x2F;shadow-selector-benchmark&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;Firefox Stylo 引擎是最快的，几乎可以忽略这一块的开销。在其他浏览器需要花1000ms的场景下，Firefox 只需要花费 100ms。&lt;&#x2F;li&gt;
&lt;li&gt;在2025年，这一块的性能对比 FF(360ms) &amp;gt; Chrome(460ms) &amp;gt; Safari(931ms) Chrome 与 Safari 的差距虽小了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Shadow DOM 对 layout 的性能影响。
&lt;ul&gt;
&lt;li&gt;减少布局范围，是否仅影响边界内的局部布局？&lt;&#x2F;li&gt;
&lt;li&gt;结合 CSS containment 属性，是否可以减少 layout 的开销？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blogs.igalia.com&#x2F;mrego&#x2F;files&#x2F;2019&#x2F;01&#x2F;css-contain-example.html&quot;&gt;CSS Containment Performance Example&lt;&#x2F;a&gt;
使用 contain: strict 带来了8倍的性能提升。在某些程度上，CSS containment 与 shadow dom 有相似之处。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>March 2025</title>
        <published>2025-03-03T00:00:00+00:00</published>
        <updated>2025-03-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-03/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-03/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-03/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;sCRHoM-JITyp0L4kgWH1Jw&quot;&gt;Rust 2024 年度报告 之一： Rust 2024 Edition 变更特性详解&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哲学
&lt;ul&gt;
&lt;li&gt;Safety &amp;amp; Performance&lt;&#x2F;li&gt;
&lt;li&gt;生态系统 与 社区协作的开放治理&lt;&#x2F;li&gt;
&lt;li&gt;Zero Cost Abstractions &amp;amp; 现代语言特性的兼容&lt;&#x2F;li&gt;
&lt;li&gt;系统编程 与 应用落地&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;2024 Edition (需要花些时间逐一理解一下)
&lt;ul&gt;
&lt;li&gt;if-let chains&#x2F; let chains&lt;&#x2F;li&gt;
&lt;li&gt;表达式临时值的scope&lt;&#x2F;li&gt;
&lt;li&gt;match 绑定变量&lt;&#x2F;li&gt;
&lt;li&gt;! 类型的回退类型&lt;&#x2F;li&gt;
&lt;li&gt;gen 生成器&lt;&#x2F;li&gt;
&lt;li&gt;async trait fn&lt;&#x2F;li&gt;
&lt;li&gt;async closure&lt;&#x2F;li&gt;
&lt;li&gt;use&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;zig 0.14 2025-3-5 发布&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;switch 支持 continue :label value 语法&lt;&#x2F;li&gt;
&lt;li&gt;.foo 支持 Result Location Semantics&lt;&#x2F;li&gt;
&lt;li&gt;field &amp;amp; declarations 不能同名&lt;&#x2F;li&gt;
&lt;li&gt;全局变量初始化可以使用彼此的地址。&lt;&#x2F;li&gt;
&lt;li&gt;@branchHint(.unlikely)&lt;&#x2F;li&gt;
&lt;li&gt;...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;felixwrt.dev&#x2F;posts&#x2F;const-fn&#x2F;&quot;&gt;Const Fn in Rust&lt;&#x2F;a&gt;
这篇文章并没有介绍 const fn 是如何在 compile time 时evaluate 的，只是介绍了 const fn 的基本用法。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;const_eval.html&quot;&gt;compile time evaluation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;学习 register allocation&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;c9x.me&#x2F;compile&#x2F;bib&#x2F;pcc-rega.pdf&quot;&gt;A Generalized Algorithm for Graph-Coloring Register Allocation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;640647465&quot;&gt;CS143 编译原理笔记 6 - Register Allocation&lt;&#x2F;a&gt; 中文笔记
&lt;ul&gt;
&lt;li&gt;Liveness Analysis&lt;&#x2F;li&gt;
&lt;li&gt;Register interference graph&lt;&#x2F;li&gt;
&lt;li&gt;Graph coloring&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;c9x.me&#x2F;compile&#x2F;bib&#x2F;linearscan.pdf&quot;&gt;Linear Scan Register Allocation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;628123333&quot;&gt;中文笔记&lt;&#x2F;a&gt;
简单的选择，life time 最长的variable 进行 spill，简单粗暴（存活时间最长就意味着占用最多资源）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;理解 rust 的编译方式与 LTO&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;rust 的编译单元是 crate, 一个 crate 可以编译称为一个 rlib 或者一个 executable, 一个 crate 会包括多个 .o 文件（具体构成待分析）&lt;&#x2F;li&gt;
&lt;li&gt;rust 在每个 crate 中会对 generic 进行展开，因此，会包括展开的代码（在使用的crate中展开）&lt;&#x2F;li&gt;
&lt;li&gt;如果 a crate 依赖了 b, c crate，那么在 b, c 中可能都包括了对 generic 的相同展开代码（如果是相同的范型参数）。如果不使用 LTO
优化，在最终生成的 a 中会包括重复的代码。启用 LTO 则可以消除。&lt;&#x2F;li&gt;
&lt;li&gt;这也意味着 generic 展开，会在每个 crate 编译时中重复一次。有分析说这是 rust 慢的主要原因之一，可能是大型项目大量的crate导致了这种情况。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;与早期的 C 语言不同，在 C 中，每个 .c 文件编译称为一个 .o 文件，最后通过 linker 进行连接（在早期内存较少的情况下，这种方式是合适的）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust&#x2F;C++ 由于引入了 generic&#x2F;template, Vec&lt;T&gt; 的代码需要在 T 确定时进行生成。Rust 是在每个 crate 中生成这些代码，然后在 link 时
通过 LTO 进行合并。&lt;&#x2F;li&gt;
&lt;li&gt;Zig 则是作为整体进行编译，因此，总是全局消除重复的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;645064049&quot;&gt;DuckDB -- ART索引&lt;&#x2F;a&gt;
trie 树的变种，面向内存（索引数据全部加载到内存）&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Node4 ( &lt;code&gt;key[4], child[4]&lt;&#x2F;code&gt; ):  4 + 4 * 8 = 36 bytes&lt;&#x2F;li&gt;
&lt;li&gt;Node16 ( &lt;code&gt;key[16], child[16]&lt;&#x2F;code&gt; ) 16 + 16 * 8 = 144 bytes&lt;&#x2F;li&gt;
&lt;li&gt;Node48 ( &lt;code&gt;key[256], child[48]&lt;&#x2F;code&gt; ) 256 + 48 * 8 = 400 bytes&lt;&#x2F;li&gt;
&lt;li&gt;Node256 ( &lt;code&gt;child[256]&lt;&#x2F;code&gt; ) 256 * 8 = 2048 bytes&lt;&#x2F;li&gt;
&lt;li&gt;Leaf&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;优化：Node: prefix + key + index, Leaf: prefix + value。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;2022&#x2F;07&#x2F;27&#x2F;art-storage.html&quot;&gt;Duck DB -- ART&lt;&#x2F;a&gt;
DuckDB 早期 ART 索引是不存储的，启动时会重建。目前的版本是持久化的。
使用 ART 来存储 PK（每一行都需要在 Leaf 中）:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;是否会占用大量内存？lazy load node 使得无需将全部索引加载到内存中。&lt;&#x2F;li&gt;
&lt;li&gt;如何进行存储？方便 lazy load
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-03&#x2F;art-post-order.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-03&#x2F;art-storage.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;
使用 post-order 可以使得一个一个 Block (256K) 作为一个整体进行读取（存储时可选压缩）。当 block 未加载时，只需整体加载该 block 到内存中。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-03&#x2F;swizzlable-pointer.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;post order 维持了 node 的整体有序性，一个 block 中的节点是基本连续、有序的。&lt;&#x2F;li&gt;
&lt;li&gt;插入、修改操作涉及到对 block 的拆分、合并。&lt;&#x2F;li&gt;
&lt;li&gt;索引的存储放大比率如何？比如说对 1G 的数据行， ART 索引需要多少空间？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>measure IPC for M1</title>
        <published>2025-02-06T00:00:00+00:00</published>
        <updated>2025-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/measure-ipc-for-m1/"/>
        <id>https://wangzaixiang.github.io/blog/measure-ipc-for-m1/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/measure-ipc-for-m1/">&lt;p&gt;现在的高性能CPU基本上都是超标量 + SIMD 支持了，超标量的设计是提高指标并行度（IPC: Instruction Per Cycle）, SIMD 是提高数据并行度。二者
结合在很多高性能的场景下，可以发挥出很好的性能。本文注重与通过一些代码示例来度量 IPC，以及通过 IPC 来认知 CPU 的相关优化特性。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;1-ru-he-du-liang-ipc&quot;&gt;1. 如何度量 IPC?&lt;&#x2F;h1&gt;
&lt;p&gt;在 x86 平台上，我们可以通过 perf 来度量 IPC（但大部分的云虚拟环境下，perf 都不支持 IPC的度量），但是在 M1 上，perf 并不支持 IPC 度量。&lt;&#x2F;p&gt;
&lt;p&gt;经过不懈的搜索，终于找到了一些 M1 上度量 IPC 的方法，参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;ibireme&#x2F;173517c208c7dc333ba962c1f0d67d12&quot;&gt;M1: A demo shows how to read Intel or Apple M1 CPU performance counter in macOS.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;El-Naizin&#x2F;rust-kperf&quot;&gt;rust-kperf&lt;&#x2F;a&gt; MacOS 下的未公开的API 的逆向工程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;m1_ipc_measure&quot;&gt;我改进的 M1 IPC 度量小工具&lt;&#x2F;a&gt; 在上述资料的基础上，我稍微改进的一个命令行工具，可以度量某个命令的 IPC 值。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;本文中主要基于上述改进的 M1 IPC 度量小工具来度量 IPC。这个工具还很不完善，主要原因是 M1 的 kperf 库的API 资料还相当缺失，大部份都是通过逆向工程得到的，
我目前对这个 API 还是一知半解，目前这个小工具也只是勉强凑合，限制还很多，这些在该项目的 readme.md 中都有说明。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-the-m1-microarchitecture&quot;&gt;2. the m1 microarchitecture.&lt;&#x2F;h1&gt;
&lt;p&gt;本文是在 M1 Max(Mac Book Pro 2021)上进行的， 下文中的 IPC 分析会参考这个 CPU 的特性。这里附上 M1 微架构图（来源：&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;700865927&quot;&gt;中文&lt;&#x2F;a&gt;、
&lt;a href=&quot;https:&#x2F;&#x2F;dougallj.github.io&#x2F;applecpu&#x2F;firestorm.html&quot;&gt;原文&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;M1-Firestorm-MicroArchitecture.2e1440e8b51702f1.png&quot; &#x2F;&gt;&lt;h1 id=&quot;3-ipcdu-liang&quot;&gt;3. IPC度量&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;3-1-test1-ipc-3-74-wei-shen-me-bu-shi-6&quot;&gt;3.1 test1: IPC ～ 3.74, 为什么不是 6+ ?&lt;&#x2F;h2&gt;
&lt;p&gt;代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;master&#x2F;src&#x2F;bin&#x2F;TestIPC.rs#L44&quot;&gt;完整源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test1&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i1}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i1}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {base1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        base0 = in(reg) base0,
&lt;&#x2F;span&gt;&lt;span&gt;        base1 = in(reg) base1,
&lt;&#x2F;span&gt;&lt;span&gt;        i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i1,
&lt;&#x2F;span&gt;&lt;span&gt;        i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i2,
&lt;&#x2F;span&gt;&lt;span&gt;        i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i3,
&lt;&#x2F;span&gt;&lt;span&gt;        i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i4,
&lt;&#x2F;span&gt;&lt;span&gt;        i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i5,
&lt;&#x2F;span&gt;&lt;span&gt;        i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i6,
&lt;&#x2F;span&gt;&lt;span&gt;        i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i7,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i9,
&lt;&#x2F;span&gt;&lt;span&gt;        i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i10,
&lt;&#x2F;span&gt;&lt;span&gt;        i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i11,
&lt;&#x2F;span&gt;&lt;span&gt;        i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i12,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time1 = time0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test1 total time: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, iteration: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:.2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ns&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, time1, time1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_nanos&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64  &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 inline asm 的方式，避免来自rust的优化，这样可以更为直接的观察 CPU 的执行情况。&lt;&#x2F;p&gt;
&lt;p&gt;这个示例循环100亿次，每次循环中执行 12 * 2 次的 add 指令，每12条 add 指令是完全无上下文依赖的，第2组对第一组有依赖，即每隔12条指令有上下文依赖。&lt;&#x2F;p&gt;
&lt;p&gt;度量结果：IPC: 3.74&lt;&#x2F;p&gt;
&lt;p&gt;按照架构图的设计，M1 有 6个 ALU 单元，都可以执行 add 指令， 理论上 IPC 值应该可以 达到 6，但只测试到了 3.74, 这个原因还有待分析。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-2-test2-ipc-1-84&quot;&gt;3.2 test2: IPC ~1.84&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test2&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i1}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1. loop N: instr 0 -&amp;gt; loop N - 1 : instr 12
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {i1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {i2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {i3}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {i4}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {i5}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {i6}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {i7}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {i8}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 9
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {i9}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 10
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {i10}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 11
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {i11}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 12
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i1}, {i12}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 13
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {i1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 14
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {i2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 15
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {i3}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 16
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {i4}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 17
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {i5}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 18
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {i6}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 19
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {i7}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 20
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {i8}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 21
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {i9}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 22
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {i10}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 23
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {i11}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 24
&lt;&#x2F;span&gt;&lt;span&gt;        base0 = in(reg) base0,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; base1 = in(reg) base1,
&lt;&#x2F;span&gt;&lt;span&gt;        i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i1,
&lt;&#x2F;span&gt;&lt;span&gt;        i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i2,
&lt;&#x2F;span&gt;&lt;span&gt;        i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i3,
&lt;&#x2F;span&gt;&lt;span&gt;        i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i4,
&lt;&#x2F;span&gt;&lt;span&gt;        i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i5,
&lt;&#x2F;span&gt;&lt;span&gt;        i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i6,
&lt;&#x2F;span&gt;&lt;span&gt;        i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i7,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i9,
&lt;&#x2F;span&gt;&lt;span&gt;        i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i10,
&lt;&#x2F;span&gt;&lt;span&gt;        i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i11,
&lt;&#x2F;span&gt;&lt;span&gt;        i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i12,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time1 = time0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test2 total time: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, iteration: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:.2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ns&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, time1, time1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_nanos&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64  &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这段代码中，每轮循环中的24条指令是有上下文依赖的，即每条指令都依赖于上一条指令的结果，理论上只能串行执行，但很奇怪的是，IPC 仍然达到了 1.84，
而不是1，即每个周期内，CPU 仍然执行了1.84条指令。&lt;&#x2F;p&gt;
&lt;p&gt;仔细分析，虽然在每个循环内部，有上下文依赖，但下一个循环的第一条指令仅依赖于上一轮循环的第13条指令，所以，理论上 Loop1:14 和 Loop2:1 可以并行执行，
Loop1:15 和 Loop2:2 可以并行执行，Loop1:24 和 Loop2:11 可以并行执行，在大部份时间范围内，CPU 仍然可以并行2条指令。&lt;&#x2F;p&gt;
&lt;p&gt;那么为什么 Loop3 不能加入到并行执行中来呢？这样的话，IPC就可以接近3了？对照 M1 的架构图，我们可以猜测：由于受 ALU dispatch queue 的限制，
但具体的原因还有待进一步的分析。&lt;&#x2F;p&gt;
&lt;p&gt;在如此串行的代码中，IPC 仍然这么高，对简单的ALU操作，是否有可能限制到 1 呢？如果让 Loop2:head 依赖 Loop1:tail，理论上这样的代码就不太可能
并行执行了。我们可以尝试一下。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-3-test2-1-ipc-1-0&quot;&gt;3.3 test2_1: IPC ~1.0&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test2_1&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i12}, {base0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {i1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {i2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {i3}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {i4}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {i5}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {i6}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {i7}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {i8}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {i9}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {i10}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {i11}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i1}, {i1}, {i12}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i2}, {i2}, {i1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i3}, {i3}, {i2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i4}, {i4}, {i3}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i5}, {i5}, {i4}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i6}, {i6}, {i5}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i7}, {i7}, {i6}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i8}, {i8}, {i7}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i9}, {i9}, {i8}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i10}, {i10}, {i9}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i11}, {i11}, {i10}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {i12}, {i12}, {i11}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        base0 = in(reg) base0,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; base1 = in(reg) base1,
&lt;&#x2F;span&gt;&lt;span&gt;        i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i1,
&lt;&#x2F;span&gt;&lt;span&gt;        i2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i2,
&lt;&#x2F;span&gt;&lt;span&gt;        i3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i3,
&lt;&#x2F;span&gt;&lt;span&gt;        i4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i4,
&lt;&#x2F;span&gt;&lt;span&gt;        i5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i5,
&lt;&#x2F;span&gt;&lt;span&gt;        i6 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i6,
&lt;&#x2F;span&gt;&lt;span&gt;        i7 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i7,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        i9 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i9,
&lt;&#x2F;span&gt;&lt;span&gt;        i10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i10,
&lt;&#x2F;span&gt;&lt;span&gt;        i11 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i11,
&lt;&#x2F;span&gt;&lt;span&gt;        i12 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) i12,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time1 = time0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test2_1 total time: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, iteration: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:.2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ns&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, time1, time1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_nanos&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64  &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_0000_0000.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对这个完全首尾相衔的代码，IPC 约为：~ 1.08，至于为什么仍然大于1，应该是处理循环的额外指令，这些指令可以被并发执行，从而稍微的提高了 IPC。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-4-ru-he-shi-ipc-da-dao-zui-da-zhi-8&quot;&gt;3.4 如何使 IPC 达到最大值 8？&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;3-5-li-jie-register-renaming&quot;&gt;3.5 理解 register renaming&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;3-6-ce-shi-load-store-zhi-ling&quot;&gt;3.6 测试 load&#x2F;store 指令&lt;&#x2F;h2&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>the 1brc program</title>
        <published>2025-02-06T00:00:00+00:00</published>
        <updated>2025-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/the-1brc-program/"/>
        <id>https://wangzaixiang.github.io/blog/the-1brc-program/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/the-1brc-program/">&lt;h1 id=&quot;about-1brc&quot;&gt;About 1brc&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gunnarmorling&#x2F;1brc&quot;&gt;1brc&lt;&#x2F;a&gt; 编程挑战原本是一个使用 Java 处理 10 亿行文本数据，并进行汇总统计的挑战，这个程序的逻辑并不复杂：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;读取并分析文本数据，其格式如下：&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; Hamburg;12.0
&lt;&#x2F;span&gt;&lt;span&gt; Bulawayo;8.9
&lt;&#x2F;span&gt;&lt;span&gt; Palembang;38.8
&lt;&#x2F;span&gt;&lt;span&gt; St. John&amp;#39;s;15.2
&lt;&#x2F;span&gt;&lt;span&gt; Cracow;12.6
&lt;&#x2F;span&gt;&lt;span&gt; Bridgetown;26.9
&lt;&#x2F;span&gt;&lt;span&gt; Istanbul;6.2
&lt;&#x2F;span&gt;&lt;span&gt; Roseau;34.4
&lt;&#x2F;span&gt;&lt;span&gt; Conakry;31.2
&lt;&#x2F;span&gt;&lt;span&gt; Istanbul;23.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
每一行包括一个城市名和一个气温数值，以分号分隔。&lt;&#x2F;li&gt;
&lt;li&gt;统计每一个城市的最高气温、最低气温、平均气温，并输出到标准输出。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;程度的挑战在于，需要处理 10亿 行的文本数据（约13.7GB），到底可以在多快的时间内完成这个任务呢？不同于其他的编程挑战，会限定有限的内存、CPU 等资源，
1brc 官方给定的运行环境是 32 core AMD EPYC™ 7502P (Zen2), 128 GB RAM, 还是一个非常强大的机器。本文所使用的执行环境是 M1 Max(Macbook Pro 2021):
8性能核心，2节能核心，64GB RAM，也是一款非常强大的机器。这个挑战是在现代CPU和充裕的内存资源下，到底可以在多快的时间内，完成10亿行文本数据的处理。&lt;&#x2F;p&gt;
&lt;p&gt;原项目是使用Java进行挑战，不过在本文中，我会尝试基于 Rust 来完成这个挑战，毕竟，Rust 距离 CPU 更近，有更多的空间可供我们腾挪。当然，对我来说，也是一次
学习 Rust 的机会。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver1-yuan-shi-ban-ben-108s&quot;&gt;ver1: 原始版本 108s&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::BufRead;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(dead_code)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ver1&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;HashMap&amp;lt;String,(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file = std::fs::File::open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; reader = std::io::BufReader::new(file);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Item {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hash: HashMap&amp;lt;String, Item&amp;gt; = std::collections::HashMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; line in reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; name;value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line = line?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parts = line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).collect::&amp;lt;Vec&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = parts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = parts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(*name) {
&lt;&#x2F;span&gt;&lt;span&gt;            Some(item) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                item.count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                item.sum += value;
&lt;&#x2F;span&gt;&lt;span&gt;                item.min = item.min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;                item.max = item.max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item = Item {
&lt;&#x2F;span&gt;&lt;span&gt;                    min: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    max: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    sum: value
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), item);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        (name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), (item.min, item.max, item.sum &#x2F; item.count as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok( result )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;作为一个基础版本，这段代码可谓是中规中矩：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;BufReader&lt;&#x2F;code&gt; 逐行读取文件，然后使用 &lt;code&gt;split&lt;&#x2F;code&gt; 分割字符串。（如果不使用 BufReader，估计速度还会慢1个数量级）&lt;&#x2F;li&gt;
&lt;li&gt;使用 HashMap 来处理聚合数据。&lt;&#x2F;li&gt;
&lt;li&gt;单线程。（本案例全部基于单线程来进行分析）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：107.9s&lt;&#x2F;li&gt;
&lt;li&gt;IPC: 4.91 (看起来还很不错)&lt;&#x2F;li&gt;
&lt;li&gt;Branch misses: 0.64%&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mstange&#x2F;samply&quot;&gt;samply&lt;&#x2F;a&gt; profile &lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;3WMkb80&quot;&gt;link&lt;&#x2F;a&gt;:
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;samply&lt;&#x2F;span&gt;&lt;span&gt; load profiles&#x2F;profile-v1.json  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 然后使用 firefox 打开 http:&#x2F;&#x2F;localhost:3000 端口即可查看 samply 的 profile 分析图表
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;read_line: ~46s
&lt;ul&gt;
&lt;li&gt;fill_buf: ~2.76s 这里是真实与OS打交道，读取文件内容的开销（真实的读取文件的开销并不高，远低于其他部分）。&lt;&#x2F;li&gt;
&lt;li&gt;memchr: ~20.5s 是查找换行符的开销。&lt;&#x2F;li&gt;
&lt;li&gt;Vec::extend_from_slice: ~12.75s 是复制数据到 Vec 的开销。&lt;&#x2F;li&gt;
&lt;li&gt;from_utf8: ~7s, 是处理 UTF-8 的开销。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;line.split(&#x27;;&#x27;).collect::&amp;lt;Vec&amp;lt;&amp;amp;str&amp;gt;&amp;gt;()&lt;&#x2F;code&gt; ~22s
&lt;ul&gt;
&lt;li&gt;Vec 分配内存的时间： ~6.5s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hash.get_mut(*name)&lt;&#x2F;code&gt; ~12s，Rust 的 HashMap 采用了 SIMD 加速，比常规的 HashMap 快了很多。&lt;&#x2F;li&gt;
&lt;li&gt;Drop Vec&amp;lt;&amp;amp;str&amp;gt; ~11s: 释放内存的开销居然这么高，如果再加上 Vec&#x2F;String 的分配开销（~13s），花在内存分配释放上的时间(~16s)，不容小嘘。&lt;&#x2F;li&gt;
&lt;li&gt;Drop String ~7.7s&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;parts.get(1).unwrap().parse::&amp;lt;f32&amp;gt;()?&lt;&#x2F;code&gt; ~ 6.6s，目前还不是我们的瓶颈点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;第一个基线版本出来了，看起来，read_line 是目前最大的瓶颈，其中真实的 IO 开销并不高（本次测试的电脑有64G内存，因此，文件的内容大概率是全部在 Page Cache中的，
并不会涉及到真实的IO，目前来看，2.76s 读取完全部文件内容，看起来还是比较快的），而花在 查找换行符，复制数据（String）、解析UTF-8、分配和释放内存的耗时占比很比。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver2-89s&quot;&gt;ver2, 89s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver1 中，我们发现 read_line 中 &lt;code&gt;Vec::extend_from_slice&lt;&#x2F;code&gt; 上花费了12.75s 的时间，原因是我们每次读取并返回一个新行（String），处理完成后
就释放掉这个该字符串（～7.7s），如果我们不重复分配、释放内存，而是复用一个 String 呢？简单的做如下修改：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver2.rs&quot;&gt;详细代码&lt;&#x2F;a&gt;：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;diff_ver2_ver1.png&quot; alt=&quot;diff_ver2_ver1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：89.3s (-17.6s, +16.3%)&lt;&#x2F;li&gt;
&lt;li&gt;IPC: 4.57&lt;&#x2F;li&gt;
&lt;li&gt;Branch misses: 8.4%&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4htrWrC&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;看起来不错，几行代码的修改，就提升了16.3%的性能，查看 samply profile, 计划要消除的耗时都如预期的减少了。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;内存分配和释放的成本，并没有那么的廉价（当然，这个案例可是10亿次循环，把这个成本给放大了）。对于parser 处理 AST 这样的场景，多遍遍历，
大量的小对象的分配和释放，这个成本是非常高的。&lt;&#x2F;li&gt;
&lt;li&gt;在 JVM 中，对象的分配和释放更是无处不在，由于没有 value object，所有的对象都在 heap 中分配，而更高效的语言，一定需要 value object,并
优先在 stack（or in-place）中分配。相比 heap， stack allocate 可以认为是零成本的。当然，JVM的GC机制，可能会比C&#x2F;Rust等语言在分配&#x2F;释放内存
上更加高效：一是由于内存整理，避免了碎片的存在，分配内存成本更低。二是几种的释放，尤其是分代GC下年轻代的复制回收机制，成本相比逐一的回收会有
显著的提升。但无论如何，如果能避免分配和释放，才是最佳的选择。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ver3-65s&quot;&gt;ver3, 65s&lt;&#x2F;h1&gt;
&lt;p&gt;消除了 read_line 的内存分配和释放的成本，我们的瓶颈点又转移到了 &lt;code&gt;line.split(&#x27;;&#x27;).collect::&amp;lt;Vec&amp;lt;&amp;amp;str&amp;gt;&amp;gt;()&lt;&#x2F;code&gt; 上，这个操作的成本是22s，其主要成本也是
花费在 Iterator 的遍历和 Vec 的分配和释放上。由于每一行文本格式比较简单，因此我们重新优化一下我们的代码 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver3.rs&quot;&gt;ver3完整连接&lt;&#x2F;a&gt;：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;ver2_collect.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;ver3_code1.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;ver3_code2.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：65.5s (vs ver2: -23.8s, +26.6%) (vs ver1: -42.4s, +39.4%)&lt;&#x2F;li&gt;
&lt;li&gt;IPC: 4.12&lt;&#x2F;li&gt;
&lt;li&gt;Branch misses: 0.94%&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4hqukPN&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ver2&#x2F;ver3 两轮优化后，在 samply profile 中，已经看到没有明显的内存分配、释放的开销了，性能的整体提升达到了39.4%。为我们的优化成就鼓掌。&lt;&#x2F;p&gt;
&lt;p&gt;收获：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在这两轮的优化中，samply 的贡献是最大的，他为我们提供了直观的性能数据。&lt;&#x2F;li&gt;
&lt;li&gt;大部份应用在早期都存在“低垂”的果实，往往只需要较少的代价，就可以取得巨大的性能提升。在实际应用中，这些低垂的果实，可能会获得成倍、
数十倍的性能提升，而代价则非常微小。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ver4-51s&quot;&gt;ver4, 51s&lt;&#x2F;h1&gt;
&lt;p&gt;对 ver3 的 profile 数据进行分析发现，&amp;amp;str::from_utf8 花费了 ~9s 的时间，由于我们的输入文件是一个格式良好的文件，在本次性能挑战中，可以忽略
UTF8 检查的成本（当然，在实际应用中，需要权衡输入检查的必要性，不一定能够妥协，不过在一个复杂系统中，应该尽可能的在最外层进行足够的输入校验，避免在
后续内部的处理中重复的进行正确性的检查：即浪费了计算资源，也增加了代码复杂性，参考我在这篇 &lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;complexity&#x2F;&quot;&gt;blog 中所说的 DBC&lt;&#x2F;a&gt;）&lt;&#x2F;p&gt;
&lt;p&gt;调整后的代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver4.rs&quot;&gt;完整链接&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_line&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std::io::BufReader&amp;lt;std::fs::File&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Result&amp;lt;Option&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pos = line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n1 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_until&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, line)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n1 &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let part1 = &amp;amp;line[pos..pos+n1-1];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n2 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_until&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, line)?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n2 &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; part1 = &amp;amp;line[pos..pos + n1 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; part2 = &amp;amp;line[pos + n1..pos + n1 + n2 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sign = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i in part2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;*i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;*i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; {
&lt;&#x2F;span&gt;&lt;span&gt;                    sign = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    value = value * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ (i - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(Some((part1, value * sign)))
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(None)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(None)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;ver4_code1.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：51.2s (vs ver3: -14.3s, +21.8%) (vs ver2: -38.7s, +43%) (vs ver1: -56.7s, +52.6%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;40ObCun&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;经过 ver4 的优化后，samply profile 中的火焰图变得更加的简单，目前主要的开销包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::io::BufRead::read_until&lt;&#x2F;code&gt; ~ 32s 以 &lt;code&gt;, \n&lt;&#x2F;code&gt; 作为分隔符逐一读取 &amp;amp;str&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::collections::hash::map::HashMap::get_mut&lt;&#x2F;code&gt; ~ 15s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;低垂的果实似乎已经采摘完毕，这两个感觉都不好进行进一步的优化了。那么我们还能做些什么呢？&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver5-48-3s&quot;&gt;ver5, 48.3s&lt;&#x2F;h1&gt;
&lt;p&gt;这个版本尝试对 next_line 进行优化，使用状态机来进行 one scan per line 的处理，效果较为有限，这里就不贴代码和性能数据了，
感兴趣的可以查看&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver4.rs&quot;&gt;ver5源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver6-30-9s&quot;&gt;ver6, 30.9s&lt;&#x2F;h1&gt;
&lt;p&gt;经过前面5轮的优化，目前最大的瓶颈点是 &lt;code&gt;std::io::read_until(b&#x27;;&#x27; or b&#x27;\n&#x27;)&lt;&#x2F;code&gt;，这里涉及到：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;需要使用 Buffer 的方式从 OS 读取数据到 进程Buffer（固定大小，一般为8K）中。 ~ 3s&lt;&#x2F;li&gt;
&lt;li&gt;在 Buffer 中查找下一个分隔符的位置。（每一行有2个分隔符：&lt;code&gt;;&lt;&#x2F;code&gt; 和 &lt;code&gt;\n&lt;&#x2F;code&gt;) ~ 19.2s&lt;&#x2F;li&gt;
&lt;li&gt;从 Buffer 中复制到 Vec 中（读者可以思考为什么需要这次复制，不直接在 Buffer 中处理？）~ 6.7s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们是否可以避免两次数据复制呢，并减少查找分隔符的成本呢？zero copy 是解决这类问题的一个方向，在 Kafka 等 Java 项目中，使用 sendfile
这样的系统调用来避免数据的复制，在本例中，我们使用 &lt;a href=&quot;https:&#x2F;&#x2F;www.man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;mmap.2.html&quot;&gt;mmap&lt;&#x2F;a&gt; 来实现 zero copy。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;memchr::memchr;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;memmap2::Mmap;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_buf&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ~0.5s
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; return 0;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::intrinsics::unlikely;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sign = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; b in _buf {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;(*b == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;            sign = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;(*b == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            value = value * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ (*b - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    value * sign
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(dead_code)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ver6&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;HashMap&amp;lt;String, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file = std::fs::File::open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mmap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Mmap::map(&amp;amp;file)? };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = mmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Item {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hash: HashMap&amp;lt;String, Item&amp;gt; = HashMap::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16384&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mut hash:FxHashMap&amp;lt;String, Item&amp;gt; = FxHashMap::with_capacity_and_hasher(16384, rustc_hash::FxBuildHasher::default());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;callback &lt;&#x2F;span&gt;&lt;span&gt;= |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::str::from_utf8_unchecked(name) }) {
&lt;&#x2F;span&gt;&lt;span&gt;            Some(item) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                item.count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                item.sum += value;
&lt;&#x2F;span&gt;&lt;span&gt;                item.min = item.min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;                item.max = item.max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item = Item {
&lt;&#x2F;span&gt;&lt;span&gt;                    min: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    max: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    sum: value
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::str::from_utf8_unchecked(name) }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), item);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; _no_used = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mut callback = |_name: &amp;amp;[u8], value: i32| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;     _no_used += value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memchr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;amp;buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..]) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scan ~14s
&lt;&#x2F;span&gt;&lt;span&gt;            Some(pos1) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;amp;buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..pos1];
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remain = &amp;amp;buf[pos1+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..];
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memchr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, remain) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Some(pos2) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_value&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;remain[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..pos2]);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(name, value);      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 7.5s
&lt;&#x2F;span&gt;&lt;span&gt;                        buf = &amp;amp;remain[pos2+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..];
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        (name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), (item.min as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;, item.max as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;, item.sum as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0 &lt;&#x2F;span&gt;&lt;span&gt;* item.count as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(result)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver6.rs&quot;&gt;ver6完整源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：31s （vs ver4: -20.3s, +39.6%）（vs ver1: -76.9s, +71.1%）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4hOMo5W&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;采用 zero copy 优化后，我们的性能获得了显著提升，相对于 ver1，耗时缩短到 29%。从 flame graph 中，可以看到，已经没有数据复制的成本了。
目前，最大的几块耗时为：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memchr::memchr::memchr&lt;&#x2F;code&gt; ~ 3.7s&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;onebrc_rust::ver6::parse_value&lt;&#x2F;code&gt; ~ 4.87s&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::collections::hash::map::HashMap::get_mut&lt;&#x2F;code&gt; ~ 19.5s， 有点奇怪，这里的耗时相比之前的版本，反而增加了。这个以后再分析。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;ver7-25-5s&quot;&gt;ver7, 25.5s&lt;&#x2F;h1&gt;
&lt;p&gt;查看 ver6 的 flame graph，我们发现 HashMap 中最大的开销是 make_hash, 消耗了～16s 的时间，反而 其他的lookup 操作(~3s)并不大，经查阅资源，&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;https:&#x2F;&#x2F;nnethercote.github.io&#x2F;perf-book&#x2F;hashing.html&lt;&#x2F;p&gt;
&lt;p&gt;HashSet and HashMap are two widely-used types. The default hashing algorithm is not specified, but at the time of
writing the default is an algorithm called SipHash 1-3. This algorithm is high quality—it provides high protection
against collisions—but is relatively slow, particularly for short keys such as integers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以看到，在 Rust 的哲学中，HashMap 的设计是为了保证高质量的 hash，而不是为了速度。&lt;&#x2F;p&gt;
&lt;p&gt;按照文中的推荐，我们切换到 &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;fxhash&quot;&gt;fxhash&lt;&#x2F;a&gt;, 完整源代码参见：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver7.rs&quot;&gt;ver7&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：25.5s (vs ver6: -5.5s, +21.5%) (vs ver1: -82.5s, +76.3%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4hE32Fs&quot;&gt;samply profile&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;make_hash 的时间大幅缩短，~5.1s&lt;&#x2F;li&gt;
&lt;li&gt;lookup 的时间反而提升，从 ~3s 提升到 ～8.8s. 这个原因后续分析。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;切换到 fxhash 后，性能又小幅度的提升，进入到 25s，当然，相比 ver1，我们已经有 4+倍 的性能提升了。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver8-23-25s&quot;&gt;ver8, 23.25s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver1 - ver7 中，我们都没有使用 SIMD 这一技术，从 ver8 开始，我们将逐步引入 SIMD 技术。先从 查找分隔符开始。在之前的例子中，一直使用
&lt;code&gt;memchr&lt;&#x2F;code&gt; 或 read_until(其内部也基于 memchr )，如果查找 crate.io 的文档，我们得知，memchr 内部也会采用 SIMD 技术进行优化，不过如果阅读
源代码，memchr 尽在较大的数组中使用 SIMD，而对小数组则直接遍历。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在 1brc 这个挑战赛中，平均每行的长度为 13.8 字符，而且每行包含2个分隔符，因此，memchr 大部份情况下都没有采用 SIMD 优化。&lt;&#x2F;li&gt;
&lt;li&gt;ver1 - ver7 的版本中，每次都是获取下一个分隔符的位置，这并没有充分发挥 SIMD 的效率。我们完全可以一次读取一个 block(比如64B)，使用
SIMD 指令一次找出全部的分隔符的位置，然后再进行处理。如果是 64B 的 Block，平均包含 4.6 行的数据，共 9.2 个分隔符。这就相当于原来需要
9次 memchr 的操作可以在 单个 SIMD 操作中完成。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver8.rs&quot;&gt;ver8源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ver8&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;HashMap&amp;lt;String,(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file = std::fs::File::open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mmap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Mmap::map(&amp;amp;file)? };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf = mmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Item {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mut hash = HashMap::with_capacity_and_hasher(16384, fasthash::spooky::Hash64);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hash:FxHashMap&amp;lt;String, Item&amp;gt; = FxHashMap::with_capacity_and_hasher(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16384&lt;&#x2F;span&gt;&lt;span&gt;, rustc_hash::FxBuildHasher::default());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mut sum = 0;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;callback &lt;&#x2F;span&gt;&lt;span&gt;= |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;| {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ~13.5s 60%
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::str::from_utf8_unchecked(name) }) {
&lt;&#x2F;span&gt;&lt;span&gt;            Some(item) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                item.count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                item.sum += value as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                item.min = item.min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;                item.max = item.max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item = Item {
&lt;&#x2F;span&gt;&lt;span&gt;                    min: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    max: value,
&lt;&#x2F;span&gt;&lt;span&gt;                    count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    sum: value as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ core::str::from_utf8_unchecked(name) }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), item);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v01 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v02 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BEGIN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POS1
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; state2: State = State::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BEGIN&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; BEGIN, POS1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; line_begin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; always valid
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; pos1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; when state2 is POS1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; cursor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; if block_is_tail, cursor can scroll forward, otherwise, cursor is always the head of the block
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; block_is_tail: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; simd_mask: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= {      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; when block_is_tail == false, simd_mask is the search mask
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v1: u8x64 = u8x64::from_slice(buf);        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 64 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        (v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(v01) | v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(v02)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pos: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(block_is_tail == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) {    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1. simd_block
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first = simd_mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trailing_zeros&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0..64
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(first &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;) {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1.1 having a match
&lt;&#x2F;span&gt;&lt;span&gt;                    simd_mask &amp;amp;= !(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; first);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt; cursor + first as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; break result 1: from simd_block
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1.2 load next block and continue loop
&lt;&#x2F;span&gt;&lt;span&gt;                    cursor += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(cursor + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1.2.1 load next u8x64 block
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v1 = u8x64::from_slice(&amp;amp;buf[cursor..cursor + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;                        simd_mask = (v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(v01) | v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(v02)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1.2.2 load the tail block
&lt;&#x2F;span&gt;&lt;span&gt;                        block_is_tail = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 2. tail block
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memchr2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;amp;buf[cursor..]) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Some(index) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = cursor + index;
&lt;&#x2F;span&gt;&lt;span&gt;                        cursor += index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt; result;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; break result 2: from tail block
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        unreachable!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tail block should always have a match&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; state2 {
&lt;&#x2F;span&gt;&lt;span&gt;            State::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BEGIN &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                pos1 = pos;
&lt;&#x2F;span&gt;&lt;span&gt;                state2 = State::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POS1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            State::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POS1 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pos2 = pos;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;buf[line_begin..pos1], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_value&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;buf[pos1+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..pos2]));
&lt;&#x2F;span&gt;&lt;span&gt;                state2 = State::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BEGIN&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                line_begin = pos2 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;( pos + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;== buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        (name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), (item.min as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;, item.max as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;, item.sum as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; item.count as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(result)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时: 23.25s (vs ver7: -2.25s, +9.2%) (vs ver1: -84.65s, +78.3%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;3Er2Afo&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对比ver7, 有小幅度提升（这是因为 v7 中 memchr 的耗时也只有 3s, 并不大）。&lt;&#x2F;p&gt;
&lt;p&gt;切换成 SIMD 处理后，代码稍微又些复杂，这是因为在性能优化的过程中，我会产生越来越多的”自我控制“感，以避免编译期生成不佳的代码，也就是说，在
很多情况下，高性能的代码与 zero cost abstraction 是有矛盾的。当然，后面我们也会看到，这种感觉并不可靠，很多情况下，现代编译期足以生成高效的
代码，并且无悖于 zero cost abstraction。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver9-23-76s&quot;&gt;ver9, 23.76s&lt;&#x2F;h1&gt;
&lt;p&gt;ver9 是在 ver8 的基础上，对 parse_value 进行优化，使用 SIMD 指令进行优化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16 &lt;&#x2F;span&gt;&lt;span&gt;{    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ~0.5s
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; return 0;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; scale = u16x4::from_array( [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sign = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; {-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v1 = {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf = &amp;amp;buf[offset..];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; arr: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;- buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()..].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;copy_from_slice&lt;&#x2F;span&gt;&lt;span&gt;(buf);
&lt;&#x2F;span&gt;&lt;span&gt;        u16x4::from_array( [ arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;] )
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    ((v1 - u16x4::splat(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;))  * scale).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reduce_sum&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16 &lt;&#x2F;span&gt;&lt;span&gt;* sign
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver9.rs&quot;&gt;ver9完整源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：23.76s (vs ver8: +0.51s, -2.1%) (vs ver1: -84.14s, +78.1%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;3EtGoRX&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对 parse_value 进行 SIMD 优化并没有达到预期的结果。我们继续前行。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver10-27-10s&quot;&gt;ver10, 27.10s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver9 的火焰图上，当前最大的开销是 &lt;code&gt;std::collections::hash::map::HashMap::get_mut&lt;&#x2F;code&gt;(~11.7s), ver10 尝试使用一个替代的 HashMap
方案，来减少 hash 的计算开销和 lookup 的开销，不过，这个版本并没有达到预期的效果。 这里就不分析了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver10.rs&quot;&gt;ver10源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver12-13-07s&quot;&gt;ver12，13.07s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver10 中，我们尝试自建一个替代的 HashMap，基本的方向是将 city_name 映射为 integer, 然后使用一个稀疏的 Vec 来存储 key-value，
在 ver10 中尝试是失败的，主要是 HashMap 的 Miss 比例过高（50%）,即有50%的 key 都需要进行都多余1次的查找。&lt;&#x2F;p&gt;
&lt;p&gt;在 ver12 中，我们继续优化数据结构，尝试将 flame graph 中目前最大的开销 &lt;code&gt;std::collections::hash::map::HashMap::get_mut&lt;&#x2F;code&gt;(~11.7s)
降下来。&lt;&#x2F;p&gt;
&lt;p&gt;优化后的算法：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;将 city_name 映射为 i128, 即仅取 city_name 的最多16字节作为 key。（有些取巧，在测试中，所有的city name 截取前16个字节时，是没有
重复的。）&lt;&#x2F;li&gt;
&lt;li&gt;使用如下算法将 i128 映射为 i20:&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;= ??? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 低64位
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;= ??? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 高64位
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hash = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; b[0..19] ^ b[20..39] ^ b[40..59] ^ b[64..83] ^ b[84..103] ^ b[104..123]
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p0 = key_a &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p1 = (key_a &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p2 = (key_a &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p3 = key_b &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p4 = (key_b &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p5 = (key_b &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; mask;
&lt;&#x2F;span&gt;&lt;span&gt;         p0 ^ p1 ^ p2 ^ p3 ^ p4 ^ p5
&lt;&#x2F;span&gt;&lt;span&gt;     };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;分配一个 2^20 + 1024 的 Vec&lt;AggrItem&gt;, 其中: AggrItem 是每一个汇总项（占用56字节大小）&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AggrItem {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key_a&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 32
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key_b&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 40
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 24
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;,       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;,       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 44
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 48
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 52
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;根据 city_name 计算 128位的 key 值，并使用上述的 hash 算法，计算 hash 值(0 - 2^20-1), 然后使用该 hash 值直接访问数组
&lt;ul&gt;
&lt;li&gt;由于可能存在重复的 hash 值，因此，需要比较 key 值是否一致，一致则命中。&lt;&#x2F;li&gt;
&lt;li&gt;不命中则搜索数组中的下一项，直到 hash 值相同&lt;&#x2F;li&gt;
&lt;li&gt;最多搜索1024次，否则直接报错。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;设计这个算法的原因是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;1brc 挑战的数据集中，共有443个城市，city_name 长度为 3..33，选取前16个字符时，即可保证唯一性。&lt;&#x2F;li&gt;
&lt;li&gt;设计一个包含 1M 大小的 HashMap，并通过精心设计的 hash 算法，可以确保该 HashMap 的稀疏性，绝大部分的 city 应该唯一命中某个 slot 而无需
遍历。&lt;&#x2F;li&gt;
&lt;li&gt;使用 i128 作为 key 的唯一性，避免了进行字符串比较的开销。&lt;&#x2F;li&gt;
&lt;li&gt;上述的 hash 算法，是简单的数学运算，相比字符串计算 hash 要快捷很多（且不涉及内存访问）。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver12.rs&quot;&gt;ver12 完整源代码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时： 13.07s (vs ver9: -10.69s, +45.1%) (vs ver1: -93.83s, +87.1%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;414vPNO&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;非常可喜的突破，通过独特设计的 HashMap，我们获得了比使用 &lt;code&gt;std::collections::hash::map::HashMap&lt;&#x2F;code&gt; 快得多的性能，原来 HashMap 11.7s 的开销
降低到了 2 s，更让我们的程序相比 ver1 提高了 8+ 倍的性能提升。&lt;&#x2F;p&gt;
&lt;p&gt;现在，主要的耗时：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;处理分隔符：~3.15s&lt;&#x2F;li&gt;
&lt;li&gt;parse_value ～4.7s&lt;&#x2F;li&gt;
&lt;li&gt;hash aggregate: ~2.4s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;还可以进行哪些优化呢？&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver13-9-12s&quot;&gt;ver13, 9.12s&lt;&#x2F;h1&gt;
&lt;p&gt;在ver9 中，我们使用 SIMD 优化了 parse_value，但是并没有达到预期的效果，如果我们将多行的 value 放到一起来使用 SIMD 呢？另外，loop unroll
也是一种常见的优化手段，在我们前面的版本中，每次循环都是处理1行，而我们现在的版本已经每次读取 64 字节的 block，使用 SIMD 来进行分隔符检测，
那么我们也可以尝试把一个 block 中的多行数据放到一起来处理。根据上面的数据分析，每个block 包含 1-8 行数据，平均为 4.6 行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_values&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val1&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val2&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val3&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val4&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pad_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;- val1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pad_2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;- val2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pad_3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;- val3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pad_4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;- val4.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr1 = val1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;( -pad_1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr2 = val2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;(-pad_2);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr3 = val3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;(-pad_3);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr4 = val4.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;(-pad_4);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_be_bytes( *(ptr1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_be_bytes( *(ptr2 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_be_bytes( *(ptr3 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_be_bytes( *(ptr4 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clear top pad_1 * 8 bits of l1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l1 = l1 &amp;amp; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; (pad_1 * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l2 = l2 &amp;amp; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; (pad_2 * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l3 = l3 &amp;amp; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; (pad_3 * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l4 = l4 &amp;amp; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; (pad_4 * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sign_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; val1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; { -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sign_2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; val2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; { -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sign_3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; val3[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; { -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sign_4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; val4[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; { -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v: u32x4 = u32x4::from_array([l1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, l2 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, l3 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,  l4 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2: i8x16 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;transmute&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2  = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;extend_i8x16&lt;&#x2F;span&gt;&lt;span&gt;(v2) };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let v2: i16x32 = simd_swizzle!(v2, [7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 23, 22, 21, 20, 19, 18, 17, 16, 31, 30, 29, 28, 27, 26, 25, 24]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; scale: i16x16 = i16x16::from_array([ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;] );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask = v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ge&lt;&#x2F;span&gt;&lt;span&gt;(i16x16::splat(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2 = mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(v2, i16x16::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sub = v2 - i16x16::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;);      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (c - &amp;#39;0&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mul = sub * scale;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (c - &amp;#39;0&amp;#39;) * scale
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mul_2 = mul.rotate_elements_right::&amp;lt;2&amp;gt;();       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 100 + 0, 10 + 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum = mul + mul_2;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum_2 = sum.rotate_elements_right::&amp;lt;1&amp;gt;();       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 100 + 0 + 10 + 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum = sum + sum_2;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; array: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;] = &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;transmute&lt;&#x2F;span&gt;&lt;span&gt;(sum);
&lt;&#x2F;span&gt;&lt;span&gt;    (sign_1 * array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], sign_2 * array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;], sign_3 * array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;], sign_4 * array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FileReader {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_mmap&lt;&#x2F;span&gt;&lt;span&gt;: Mmap,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const u8&lt;&#x2F;span&gt;&lt;span&gt;,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eof&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; has more content
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read_more will update, 当前读取位置，已读取并分析结果保存在 mask 中
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mask&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read_more will set, next will clear
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line_begin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; next will update，下一行的开始位置
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;FileReader {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span&gt;: Mmap) -&amp;gt; FileReader {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; length = mmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf = mmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; u8x64 = u8x64::from_array( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *( buf as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]) } );
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask_v1: u8x64 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask_v2: u8x64 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask: Mask&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;, 64&amp;gt; = u8x64.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(mask_v1) | u8x64.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(mask_v2);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask = mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        FileReader {
&lt;&#x2F;span&gt;&lt;span&gt;            _mmap: mmap,
&lt;&#x2F;span&gt;&lt;span&gt;            length,
&lt;&#x2F;span&gt;&lt;span&gt;            buf,
&lt;&#x2F;span&gt;&lt;span&gt;            eof: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            cursor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            mask,
&lt;&#x2F;span&gt;&lt;span&gt;            line_begin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_block_at_cursor&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; change to unlikely fastup from 11.5s ~ 6.65s
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; need more
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.length) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask_v1: u8x64 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask_v2: u8x64 = u8x64::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; u8x64 = u8x64::from_array( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]) } );
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask: Mask&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;, 64&amp;gt; = u8x64.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(mask_v1) | u8x64.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_eq&lt;&#x2F;span&gt;&lt;span&gt;(mask_v2);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask = mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_last_block&lt;&#x2F;span&gt;&lt;span&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_last_block&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor) };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; maybe zero
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; slice = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::slice::from_raw_parts(ptr, count) };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; base = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; base &amp;gt;= count {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memchr2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;amp;slice[base..]) {
&lt;&#x2F;span&gt;&lt;span&gt;                Some(index) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; (base+index);
&lt;&#x2F;span&gt;&lt;span&gt;                    base += index+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tail block should always have a match&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.eof = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO wrongs for the last line
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;])&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.eof == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_block_at_cursor&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first = {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trailing_zeros&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask &amp;amp;= !(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor + index as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_block_at_cursor&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; second = {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trailing_zeros&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.mask &amp;amp;= !(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cursor + index as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::slice::from_raw_parts(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.line_begin), first - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.line_begin) };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::slice::from_raw_parts(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(first + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), second - first - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = (key, value);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.line_begin = second + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            Some(result)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            None
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; based on ver12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ver13&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;HashMap&amp;lt;String,(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8.96s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file = std::fs::File::open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MEASUREMENT_FILE&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mmap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Mmap::map(&amp;amp;file)? };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; reader = FileReader::new(mmap);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; aggr = AggrInfo::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r1 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r2 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r3 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r4 = reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;(r4.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some((r1_name, r1_value)) = r1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ unreachable!() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some((r2_name, r2_value)) = r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ unreachable!() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some((r3_name, r3_value)) = r3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ unreachable!() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some((r4_name, r4_value)) = r4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ unreachable!() };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr1 = r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr2 = r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr2 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr3 = r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr3 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr4 = r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_4: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr4 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_4: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;::from_le_bytes( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ *(ptr4.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_a_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_b_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ r1_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_a_2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_b_2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ r2_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_a_3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_b_3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ r3_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_a_4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()  };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len_b_4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{ r4_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_1 = key_a_1 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_a_1];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_1 = key_b_1 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_b_1];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_2 = key_a_2 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_a_2];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_2 = key_b_2 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_b_2];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_3 = key_a_3 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_a_3];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_3 = key_b_3 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_b_3];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_a_4 = key_a_4 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_a_4];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_b_4 = key_b_4 &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASKS&lt;&#x2F;span&gt;&lt;span&gt;[len_b_4];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(v1, v2, v3, v4) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_values&lt;&#x2F;span&gt;&lt;span&gt;(r1_value, r2_value, r3_value, r4_value) };
&lt;&#x2F;span&gt;&lt;span&gt;            aggr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save_item&lt;&#x2F;span&gt;&lt;span&gt;(r1_name, key_a_1, key_b_1, v1);
&lt;&#x2F;span&gt;&lt;span&gt;            aggr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save_item&lt;&#x2F;span&gt;&lt;span&gt;(r2_name, key_a_2, key_b_2, v2);
&lt;&#x2F;span&gt;&lt;span&gt;            aggr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save_item&lt;&#x2F;span&gt;&lt;span&gt;(r3_name, key_a_3, key_b_3, v3);
&lt;&#x2F;span&gt;&lt;span&gt;            aggr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save_item&lt;&#x2F;span&gt;&lt;span&gt;(r4_name, key_a_4, key_b_4, v4);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some((name, value)) = r1 {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;process_one&lt;&#x2F;span&gt;&lt;span&gt;(name, value, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; aggr);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some((name, value)) = r2 {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;process_one&lt;&#x2F;span&gt;&lt;span&gt;(name, value, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; aggr);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some((name, value)) = r3 {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;process_one&lt;&#x2F;span&gt;&lt;span&gt;(name, value, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; aggr);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check_result(&amp;amp;aggr);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok( HashMap::new() )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ver13 源代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver13.rs&quot;&gt;ver13&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：9.12s (vs ver12: -3.95s, +30.2%) (vs ver1: -97.58s, +91.4%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;3Q6KCBh&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;parse_values 的耗时从降到了 0.56s，从 4.7s 减少到了 0.56s，甚至超出了我们的预期。当然，1brc 首次进入10秒以内的成绩，相比 ver1 提升了 11.8 倍。&lt;&#x2F;p&gt;
&lt;p&gt;现在，主要的耗时：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;遍历读取 block：5.35s&lt;&#x2F;li&gt;
&lt;li&gt;hash aggregator: 1.97s&lt;&#x2F;li&gt;
&lt;li&gt;parse_values: 0.56s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;ver14-13-06s&quot;&gt;ver14, 13.06s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver13 中，我们尝试在一个循环中处理多行数据，获得了很好的效果，是否可以继续这一策略，在一个循环中处理更多的数据？&lt;&#x2F;p&gt;
&lt;p&gt;在 ver14 中，我们尝试一次读取 256 字节大小的 block, 尝试使用 u8x64 （512b) 的向量规模来扫描分隔符，很不幸，这个版本的性能退化到了 13s。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;the-1brc-program&#x2F;img_1.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;详细源代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver14.rs&quot;&gt;ver14&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原因分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;M1 只支持 128b 的向量，更大的向量其实是软件模拟，而非硬件支持。&lt;&#x2F;li&gt;
&lt;li&gt;相似的，在 M1 上并没有 native 的 u128 支持，使用 （u64, u64) 替代 u128 可能会性能更佳。（u128底层使用软件模拟）&lt;&#x2F;li&gt;
&lt;li&gt;在循环处理中引入数组等数据结构&lt;code&gt;mask: [u64;4]&lt;&#x2F;code&gt;，数组访问等并不利于 SSA 优化，在循环处理中会增加对内存的 load&#x2F;store 访问，而 SSA 优化后
能够更好的使用 register 来替代数据，减少内存访问操作。寄存器相比内存（即使是L1 hited）,也会有更低的成本。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：13.06s (vs ver13: +3.94s, -30.2%) (vs ver1: -93.64s, +87.5%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4gJ8ztC&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;优化失败，绕行...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver15-10-52s&quot;&gt;ver15, 10.52s&lt;&#x2F;h1&gt;
&lt;p&gt;尝试在 ver13 的基础上，每次读取 128B 的 Block，并将分隔符扫描的结果存储在 i128 中（不使用数据，从而可以更好的使用寄存器优化）。&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：10.52s (vs ver13: +1.4s, -13.4%) (vs ver1: -90.18s, +84.3%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4bbGCJP&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;减少内存访问，还是有一定的效果的，相比 v14 要好一些的，但仍然没有达到 ver13 的效果。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver16-8-55s&quot;&gt;ver16, 8.55s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver15 的技术上，使用 (u64, u64) 替代 u128，尝试进一步优化。&lt;&#x2F;p&gt;
&lt;p&gt;完整源代码：[ver16](https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver16.rs）&lt;&#x2F;p&gt;
&lt;p&gt;性能数据：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：8.55s (vs ver15: -1.97s, -18.8%) (vs ver13: -0.56s, + 6% )(vs ver1: -92.15s, +86.2%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4hTD3d4&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;减少到了9秒内。原因是在 ARM 中，通用寄存器是 64 位的，即使是对128位的向量寄存器，单个Lane 也最多仅支持 64b, 在 Rust 中的u128 实际上是通过
软件进行模拟的,对 u128 的操作远比 u64 要低效。在 v16 中，我们直接使用 (u64, u64) 来替代 u128，避免了软件模拟的开销,相比使用 u128 要更快一些。&lt;&#x2F;p&gt;
&lt;p&gt;在 ver16 中，每次只处理 64B 的block, 并将行中的&lt;code&gt;;&lt;&#x2F;code&gt; 分隔符 和 行末的 &lt;code&gt;\n&lt;&#x2F;code&gt;分隔符的位置分开存储 为 mask1, mask2，这样，在后续处理中，对两个 mask
的 获取操作可以并行进行，提高指令的并行度。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver17-16-2s&quot;&gt;ver17: 16.2s&lt;&#x2F;h1&gt;
&lt;p&gt;ver17 尝试对代码进行一些重构，使得代码的可读性更好一些，将主流程的循环处理从主函数中抽出来，转移到 scan_loop 中，同时，将循环的一些上下文变量
从 struct 字段转移到 scan_loop 的局部变量中，当时的考虑是编译器可以更好的进行 SSA 优化，减少内存访问。&lt;&#x2F;p&gt;
&lt;p&gt;rust 在很多情况下，可以直接将 struct 字段的变量也 SSA 优化，到来的优势就是这些字段会直接保存在 register 中，而不是在内存中，访问寄存器相比
访问内存，有更低的成本（虽然在很多情况下，由于L1 Cache的优化以及其他优化，这个差距可能并不明显，但使用寄存器总是更为性能有好的）。&lt;&#x2F;p&gt;
&lt;p&gt;这个版本的性能退化到了 16.2s，原因是在 scan_loop 中，因此，本文不对其进行展开说明，直接跳过。&lt;&#x2F;p&gt;
&lt;p&gt;完整源代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver17.rs&quot;&gt;ver17&lt;&#x2F;a&gt;
性能说明：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：16.2s (vs ver16: +7.65s, -89.4%) (vs ver1: -84.48s, +82.4%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;3QnKGgg&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ver18-6-76s&quot;&gt;ver18: 6.76s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver17 的基础上，我们进行了一些优化：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;每次读取 64B 的block，而不是 128B, 64B 的 block 可以更好的匹配 ARM 的 64b 架构。&lt;&#x2F;li&gt;
&lt;li&gt;使用 3 行一个批量的方式进行处理，减少分支预测失败的情况。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;完整源代码：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;onebrc_rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;ver18.rs&quot;&gt;ver18&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;性能说明：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;耗时：6.76s (vs ver17: -9.44s, -58.4%) (vs ver1: -94.32s, +93.3%)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;share.firefox.dev&#x2F;4gQ8hB3&quot;&gt;samply profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个版本的性能有了很大的提升，我们进入了 7s 以内的范围（原项目中Java第一名在我本地的单线程成绩为7.10s），ver18 首次超过了 Java Top 1的成绩。
可喜可贺，是否还有更进一步的优化空间呢？&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ver21-6-17s&quot;&gt;ver21: 6.17s&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;ver22-5-38s&quot;&gt;ver22: 5.38s&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;ver22-pgo-5-25s&quot;&gt;ver22 + pgo: 5.25s&lt;&#x2F;h1&gt;
&lt;p&gt;在 ver22 的基础上，使用 &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;profile-guided-optimization.html#:~:text=rustc%20supports%20doing%20profile-guided%20optimization%20%28PGO%29.%20This%20chapter,it%20can%20be%20used.%20What%20Is%20Profiled-Guided%20Optimization%3F&quot;&gt;profile guided optimization&lt;&#x2F;a&gt;
进行编译优化，相比 ~pgo 的版本，提升了约 %2 的性能。虽然比例不大，不过胜在成本低。&lt;&#x2F;p&gt;
&lt;p&gt;没有对比生成的代码，估计是基于 profile data, 对 register allocation 等做了策略性的优化。&lt;&#x2F;p&gt;
&lt;p&gt;未完，待续......&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>February 2025</title>
        <published>2025-02-06T00:00:00+00:00</published>
        <updated>2025-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-02/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-02/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-02/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;El-Naizin&#x2F;rust-kperf&quot;&gt;rust-kperf&lt;&#x2F;a&gt; MacOS 下的未公开的API 的逆向工程。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.arm.com&#x2F;documentation&#x2F;102340&#x2F;0100&#x2F;SVE2-architecture-fundamentals&quot;&gt;ARM SVE2 架构基础&lt;&#x2F;a&gt;
SVE 指令集的设计确实是一个创新，可以支持任意的向量长度而无需修改代码。相比 SSE&#x2F;AVX&#x2F;AVX2&#x2F;AVX512 等指令集，SVE 要优美得多。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;strongly-typed-thoughts.net&#x2F;blog&#x2F;zig-2025&quot;&gt;What I like and unlike for Zig&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Likes
&lt;ul&gt;
&lt;li&gt;arbitrary width integers and packed structs&lt;&#x2F;li&gt;
&lt;li&gt;generic types are functions at the type level&lt;&#x2F;li&gt;
&lt;li&gt;error union types&lt;&#x2F;li&gt;
&lt;li&gt;c interop&lt;&#x2F;li&gt;
&lt;li&gt;the build system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Unlikes
&lt;ul&gt;
&lt;li&gt;error handling, than Rust&#x27;s Result&lt;&#x2F;li&gt;
&lt;li&gt;shadowing is forbidden&lt;&#x2F;li&gt;
&lt;li&gt;compile time duck typing: anytype&lt;&#x2F;li&gt;
&lt;li&gt;no typeclasses&#x2F;traits&lt;&#x2F;li&gt;
&lt;li&gt;comptime is probably not interesting as it looks&lt;&#x2F;li&gt;
&lt;li&gt;non encapsulion&lt;&#x2F;li&gt;
&lt;li&gt;memory safety is highly underestimated and fallacious&lt;&#x2F;li&gt;
&lt;li&gt;lazy compilation&lt;&#x2F;li&gt;
&lt;li&gt;no destructors&lt;&#x2F;li&gt;
&lt;li&gt;no (unicode) strings.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;c9x.me&#x2F;compile&#x2F;&quot;&gt;QBE&lt;&#x2F;a&gt; QBE is a compiler backend that aims to provide 70% of the performance of industrial optimizing compilers in
10% of the code.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;like LLVM IR, but simpler.&lt;&#x2F;li&gt;
&lt;li&gt;~10k lines of c code. (vs 1M lines of LLVM), 代码量少，Pure C，是一个很好的学习编译期后端的参考。&lt;&#x2F;li&gt;
&lt;li&gt;support for amd64 (linux and osx), arm64, and riscv64.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;500409301&#x2F;answer&#x2F;3210484073&quot;&gt;LLVM指令选择&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;指令选择过程以 IR 为输入，输出一系列使用无限寄存器的指令，分为如下阶段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;构建初始 Selection DAG&lt;&#x2F;li&gt;
&lt;li&gt;优化&lt;&#x2F;li&gt;
&lt;li&gt;类型合法化&lt;&#x2F;li&gt;
&lt;li&gt;优化&lt;&#x2F;li&gt;
&lt;li&gt;操作合法化&lt;&#x2F;li&gt;
&lt;li&gt;优化&lt;&#x2F;li&gt;
&lt;li&gt;目标指令选择&lt;&#x2F;li&gt;
&lt;li&gt;调度核形成。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：您可以通过在调用llc时作为命令行参数传递-view-dag-combine1-dags、-view-legalize-dags、-view-dag-combine2-dags、
-view-isel-dags或-view-sched-dags来告诉LLVM在指令选择过程的各个阶段生成选择DAG的可视化表示。
-debug参数告诉llc生成选择DAG的文本表示。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karpathy&#x2F;makemore&quot;&gt;makemore&lt;&#x2F;a&gt; 语言生成模型，transformer 的简单版本。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2025&#x2F;02&#x2F;20&#x2F;Rust-1.85.0.html&quot;&gt;Rust Edition 2024&lt;&#x2F;a&gt; 又一个大版本来了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;platform.uno&#x2F;blog&#x2F;state-of-webassembly-2024-2025&#x2F;&quot;&gt;The State of WASM - 2024 and 2025&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;ESM integration, &lt;code&gt;import {add} from &#x27;.&#x2F;my-math.wasm&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LLVM学习系列二：从一段简单的C代码来学习LLVM-IR</title>
        <published>2025-01-05T00:00:00+00:00</published>
        <updated>2025-01-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/learning-llvm-2/"/>
        <id>https://wangzaixiang.github.io/blog/learning-llvm-2/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/learning-llvm-2/">&lt;p&gt;本文承接 &lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;learning-llvm&#x2F;&quot;&gt;LLVM 学习系列一：初读 LLVM-IR 示例代码&lt;&#x2F;a&gt; 中，本文将通过一个简单的 C 代码来学习 LLVM IR 的生成过程，
以及如何通过命令行工具来查看各个 pass 的输出。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;shi-li-dai-ma&quot;&gt;示例代码&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;demo1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;shi-li-xue-xi-o3-de-you-hua-guo-cheng&quot;&gt;实例学习 -O3 的优化过程:&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编译：&lt;code&gt;clang -S -emit-llvm -O3 -mllvm -print-after-all demo1.c -o demo1-O3.ll 2&amp;gt;&#x2F;tmp&#x2F;passes.txt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;查看 -O3 选项编译的全过程，可以看到每个 pass 执行后的 IR 代码。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;grep &quot;Dump After&quot; &#x2F;tmp&#x2F;passes.txt | wc -l&lt;&#x2F;code&gt; ： 共 106 个 pass&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clang -mllvm -debug-pass=Arguments -c demo1.c&lt;&#x2F;code&gt; 查看 opt 的参数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt; Pass Arguments:  -tti -targetlibinfo -assumption-cache-tracker -targetpassconfig -machinemoduleinfo -profile-summary-info -tbaa -scoped-noalias-aa \
&lt;&#x2F;span&gt;&lt;span&gt;     -collector-metadata -machine-branch-prob -regalloc-evict -regalloc-priority -domtree -basic-aa -aa -objc-arc-contract -pre-isel-intrinsic-lowering \
&lt;&#x2F;span&gt;&lt;span&gt;     -expand-large-div-rem -expand-large-fp-convert -atomic-expand -aarch64-sve-intrinsic-opts -simplifycfg -domtree -loops -loop-simplify \
&lt;&#x2F;span&gt;&lt;span&gt;     -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -scalar-evolution -loop-data-prefetch -aarch64-falkor-hwpf-fix -basic-aa \
&lt;&#x2F;span&gt;&lt;span&gt;     -loop-simplify -canon-freeze -iv-users -loop-reduce -basic-aa -aa -mergeicmps -loops -lazy-branch-prob -lazy-block-freq -expand-memcmp \
&lt;&#x2F;span&gt;&lt;span&gt;     -gc-lowering -shadow-stack-gc-lowering -lower-constant-intrinsics -lower-global-dtors -unreachableblockelim -domtree -loops -postdomtree \
&lt;&#x2F;span&gt;&lt;span&gt;     -branch-prob -block-freq -consthoist -replace-with-veclib -partially-inline-libcalls -expandvp -post-inline-ee-instrument \
&lt;&#x2F;span&gt;&lt;span&gt;     -scalarize-masked-mem-intrin -expand-reductions -loops -tlshoist -postdomtree -branch-prob -block-freq -lazy-branch-prob \
&lt;&#x2F;span&gt;&lt;span&gt;     -lazy-block-freq -opt-remark-emitter -select-optimize -aarch64-globals-tagging -stack-safety -domtree -basic-aa -aa -aarch64-stack-tagging \
&lt;&#x2F;span&gt;&lt;span&gt;     -complex-deinterleaving -aa -memoryssa -interleaved-load-combine -domtree -interleaved-access -aarch64-sme-abi -domtree -loops -type-promotion \
&lt;&#x2F;span&gt;&lt;span&gt;     -codegenprepare -domtree -dwarf-eh-prepare -aarch64-promote-const -global-merge -callbrprepare -safe-stack -stack-protector -domtree -basic-aa \
&lt;&#x2F;span&gt;&lt;span&gt;     -aa -loops -postdomtree -branch-prob -debug-ata -lazy-branch-prob -lazy-block-freq -aarch64-isel -finalize-isel -lazy-machine-block-freq \
&lt;&#x2F;span&gt;&lt;span&gt;     -early-tailduplication -opt-phis -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -aarch64-condopt \
&lt;&#x2F;span&gt;&lt;span&gt;     -machine-loops -machine-trace-metrics -aarch64-ccmp -lazy-machine-block-freq -machine-combiner -aarch64-cond-br-tuning -machine-trace-metrics \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -early-ifcvt -aarch64-stp-suppress -aarch64-simdinstr-opt -aarch64-stack-tagging-pre-ra -machinedomtree -machine-loops -machine-block-freq  \
&lt;&#x2F;span&gt;&lt;span&gt;     -early-machinelicm -machinedomtree -machine-block-freq -machine-cse -machinepostdomtree -machine-cycles -machine-sink -peephole-opt \
&lt;&#x2F;span&gt;&lt;span&gt;     -dead-mi-elimination -aarch64-mi-peephole-opt -aarch64-dead-defs -detect-dead-lanes -init-undef -processimpdefs -unreachable-mbb-elimination \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -livevars -phi-node-elimination -twoaddressinstruction -machinedomtree -slotindexes -liveintervals -register-coalescer -rename-independent-subregs \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -machine-scheduler -aarch64-post-coalescer-pass -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles \
&lt;&#x2F;span&gt;&lt;span&gt;     -spill-code-placement -lazy-machine-block-freq -machine-opt-remark-emitter -greedy -virtregrewriter -regallocscoringpass -stack-slot-coloring \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -machine-cp -machinelicm -aarch64-copyelim -aarch64-a57-fp-load-balancing -removeredundantdebugvalues -fixup-statepoint-caller-saved  \
&lt;&#x2F;span&gt;&lt;span&gt;     -postra-machine-sink -machinedomtree -machine-loops -machine-block-freq -machinepostdomtree -lazy-machine-block-freq -machine-opt-remark-emitter \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -shrink-wrap -prologepilog -machine-latecleanup -branch-folder -lazy-machine-block-freq -tailduplication -machine-cp -postrapseudos \
&lt;&#x2F;span&gt;&lt;span&gt;     -aarch64-expand-pseudo -aarch64-ldst-opt -kcfi -aarch64-speculation-hardening -machinedomtree -machine-loops -aarch64-falkor-hwpf-fix-late \ 
&lt;&#x2F;span&gt;&lt;span&gt;     -postmisched -gc-analysis -machine-block-freq -machinepostdomtree -block-placement -fentry-insert -xray-instrumentation -patchable-function \
&lt;&#x2F;span&gt;&lt;span&gt;     -aarch64-ldst-opt -machine-cp -aarch64-fix-cortex-a53-835769-pass -aarch64-collect-loh -funclet-layout -stackmap-liveness -livedebugvalues \
&lt;&#x2F;span&gt;&lt;span&gt;     -machine-sanmd -machine-outliner -aarch64-sls-hardening -aarch64-ptrauth -aarch64-branch-targets -branch-relaxation -aarch64-jump-tables \
&lt;&#x2F;span&gt;&lt;span&gt;     -cfi-fixup -lazy-machine-block-freq -machine-opt-remark-emitter -stack-frame-layout -unpack-mi-bundles -lazy-machine-block-freq \
&lt;&#x2F;span&gt;&lt;span&gt;     -machine-opt-remark-emitter
&lt;&#x2F;span&gt;&lt;span&gt; Pass Arguments:  -domtree
&lt;&#x2F;span&gt;&lt;span&gt; Pass Arguments:  -assumption-cache-tracker -targetlibinfo -domtree -loops -scalar-evolution -stack-safety-local
&lt;&#x2F;span&gt;&lt;span&gt; Pass Arguments:  -domtree
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;把这个参数直接丢给 opt 命令行是不行的，会报错误。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用如下的脚本来分析 -print-after-all&lt;&#x2F;p&gt;
&lt;p&gt;为了更好的观察每个 pass 的输出，可以使用如下的脚本来拆分每个 pass 后的IR，并输出到一个独立的文件中。方便使用 diff 等工具
来对比每个 pass 的演进过程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;bin&#x2F;passes.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, BufRead, BufReader, Write};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; args[1] is the input file like abc.ll
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_file = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no filename given&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!input_file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ends_with&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.ll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input file must end with .ll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path = std::path::Path::new(&amp;amp;input_file);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; basename = path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;file_stem&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no basename found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basename is not a valid UTF-8 string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file = File::open(input_file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; reader = BufReader::new(file);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; output_file = File::create(format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;output&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{basename}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{file_count}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.ll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; line in reader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line = line?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Dump After &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;            file_count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            output_file = File::create(format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;output&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{basename}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{file_count}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.ll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))?;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        writeln!(output_file, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line)?;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;cargo run --bin passes -- path&#x2F;to&#x2F;file.ll&lt;&#x2F;code&gt; 会在 output 目录下生成多个文件，每个文件对应一个 pass 的输出。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;afnanenayet&#x2F;diffsitter&quot;&gt;&lt;code&gt;difft&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 逐步的对比每个 pass 的输出，观察 IR 的演变过程，理解各个 pass 的职责。&lt;&#x2F;p&gt;
&lt;p&gt;在这个小的demo中，主要是如下两个 pass 起到了关键作用：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;simplifycfg: 简化控制流图，包括合并基本快，使用 switch 替代多个 if else 等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SROA: An optimization pass providing Scalar Replacement of Aggregates. This pass takes allocations which can be completely
analyzed (that is, they don&#x27;t escape) and tries to turn them into scalar SSA values.
刚开始的时候，IR 并不是严格意义上的 SSA，对每个变量的读写都是通过 alloca 和 load&#x2F;store 来实现的，这个 pass 将这些变量转换为 SSA 形式。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;pass 7: After SimplifyCFGPass
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
      flowchart TD
      %% function demo1
      %1[&amp;quot;  %2 = alloca i32, align 4
        %3 = alloca i32, align 4
        store i32 %0, ptr %2, align 4, !tbaa !5
        call void @llvm.lifetime.start.p0(i64 4, ptr %3) #2
        store i32 0, ptr %3, align 4, !tbaa !5
        %4 = load i32, ptr %2, align 4, !tbaa !5
        %5 = icmp eq i32 %4, 1
        br i1 %5, label %6, label %7&amp;quot;]
          %1 --&amp;gt;|%6| %6
      %6[&amp;quot;  store i32 10, ptr %3, align 4, !tbaa !5
        br label %16&amp;quot;]
          %1 --&amp;gt;|%7| %7
      %7[&amp;quot;  %8 = load i32, ptr %2, align 4, !tbaa !5
        %9 = icmp eq i32 %8, 100
        br i1 %9, label %10, label %11&amp;quot;]
          %7 --&amp;gt;|%10| %10
      %10[&amp;quot;  store i32 20, ptr %3, align 4, !tbaa !5
        br label %16&amp;quot;]
          %7 --&amp;gt;|%11| %11
      %11[&amp;quot;  %12 = load i32, ptr %2, align 4, !tbaa !5
        %13 = icmp eq i32 %12, 200
        br i1 %13, label %14, label %15&amp;quot;]
          %11 --&amp;gt;|%14| %14
      %14[&amp;quot;  store i32 30, ptr %3, align 4, !tbaa !5
        br label %16&amp;quot;]
          %11 --&amp;gt;|%15| %15
      %15[&amp;quot;  store i32 40, ptr %3, align 4, !tbaa !5
        br label %16&amp;quot;]
          %10 --&amp;gt;|%16| %16
          %15 --&amp;gt;|%16| %16
          %14 --&amp;gt;|%16| %16
          %6 --&amp;gt;|%16| %16
      %16[&amp;quot;  %17 = load i32, ptr %3, align 4, !tbaa !5
        call void @llvm.lifetime.end.p0(i64 4, ptr %3) #2
        ret i32 %17&amp;quot;]
      style %16 stroke:#0f0
      ```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;2: pass 8:  After SROAPass
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
      flowchart TD
      %% function demo1
      %1[&amp;quot;  %2 = icmp eq i32 %0, 1
        br i1 %2, label %3, label %4&amp;quot;]
          %1 --&amp;gt;|%3| %3
      %3[&amp;quot;  br label %11&amp;quot;]
          %1 --&amp;gt;|%4| %4
      %4[&amp;quot;  %5 = icmp eq i32 %0, 100
        br i1 %5, label %6, label %7&amp;quot;]
          %4 --&amp;gt;|%6| %6
      %6[&amp;quot;  br label %11&amp;quot;]
          %4 --&amp;gt;|%7| %7
      %7[&amp;quot;  %8 = icmp eq i32 %0, 200
        br i1 %8, label %9, label %10&amp;quot;]
          %7 --&amp;gt;|%9| %9
      %9[&amp;quot;  br label %11&amp;quot;]
          %7 --&amp;gt;|%10| %10
      %10[&amp;quot;  br label %11&amp;quot;]
          %6 --&amp;gt;|%11| %11
          %10 --&amp;gt;|%11| %11
          %9 --&amp;gt;|%11| %11
          %3 --&amp;gt;|%11| %11
      %11[&amp;quot;  %12 = phi i32 [ 10, %3 ], [ 20, %6 ], [ 30, %9 ], [ 40, %10 ]
        ret i32 %12&amp;quot;]
      style %11 stroke:#0f0
      ```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;3: pass 17:  After SimplifyCFGPass
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
      flowchart TD
      %% function demo1
      %1[&amp;quot;  switch i32 %0, label %4 [
          i32 1, label %5
          i32 100, label %2
          i32 200, label %3
        ]&amp;quot;]
              %1 --&amp;gt;|%2| %2
      %2[&amp;quot;  br label %5&amp;quot;]
              %1 --&amp;gt;|%3| %3
      %3[&amp;quot;  br label %5&amp;quot;]
              %1 --&amp;gt;|%4| %4
      %4[&amp;quot;  br label %5&amp;quot;]
              %1 --&amp;gt;|%5| %5
              %2 --&amp;gt;|%5| %5
              %4 --&amp;gt;|%5| %5
              %3 --&amp;gt;|%5| %5
      %5[&amp;quot;  %6 = phi i32 [ 20, %2 ], [ 30, %3 ], [ 40, %4 ], [ 10, %1 ]
        ret i32 %6&amp;quot;]
      style %5 stroke:#0f0
      ```
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过 opt 命令来重现某个 pass 的优化过程：（部份 pass 输出的 IL 需要简单的手工调整方能正确执行）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;opt -S output&#x2F;demo1_6.ll -passes=simplifycfg -o -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的 pass name 可以从 文件中的 &lt;code&gt;Dump After&lt;&#x2F;code&gt; 中找到。
&lt;code&gt;opt -S output&#x2F;demo1_6.ll -passes=simplifycfg,sroa,simplifycfg -o -&lt;&#x2F;code&gt; 使用这个命令，可以从 -O0 的 IR 优化到 -O3 的 IR。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;ming-ling-xing-gong-ju-can-kao&quot;&gt;命令行工具参考&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编译为 LLVM IR: &lt;code&gt;clang -S -emit-llvm demo1.c -o demo1.ll&lt;&#x2F;code&gt; 可结合 &lt;code&gt;-O1&lt;&#x2F;code&gt;, &lt;code&gt;-O3&lt;&#x2F;code&gt; 等优化选项。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;clang -c -mllvm -print-after-all demo1.c&lt;&#x2F;code&gt; 查看各个阶段的输出，查看各个pass后的 IR&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clang -mllvm --help&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clang -mllvm --help-hidden&lt;&#x2F;code&gt; 查看隐藏的选项&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clang -mllvm -debug-pass=Arguments&lt;&#x2F;code&gt; print pass arguments to pass to opt.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;opt -S src.ll -passes=.. -o -&lt;&#x2F;code&gt; 使用 opt 来执行选择的 pass 并观察 IR 的演进。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;--debug-pass=Details: print pass details when it is executed&lt;&#x2F;li&gt;
&lt;li&gt;--debug-pass-manager=quiet|verbose&lt;&#x2F;li&gt;
&lt;li&gt;--debugify-each    Start each pass with debugify and end it with check-debugify&lt;&#x2F;li&gt;
&lt;li&gt;--print-passes     print available passes&lt;&#x2F;li&gt;
&lt;li&gt;--print-pipeline-passes 显示当前的 pass pipeline 可以使用 clang -mllvm --print-pipeline-passes 查看 clang 的 pass pipeline
然后在 opt 中重放这个 pipeline。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;llc&lt;&#x2F;code&gt; from LLVM IR to assembly&lt;&#x2F;p&gt;
&lt;p&gt;如果出现如下错误：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;LLVM ERROR: Unsupported stack probing method
&lt;&#x2F;span&gt;&lt;span&gt;PLEASE submit a bug report to https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core&#x2F;issues and include the crash backtrace.
&lt;&#x2F;span&gt;&lt;span&gt;Stack dump:
&lt;&#x2F;span&gt;&lt;span&gt;0.	Program arguments: &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;llvm&#x2F;bin&#x2F;llc demo.ll
&lt;&#x2F;span&gt;&lt;span&gt;1.	Running pass &amp;#39;Function Pass Manager&amp;#39; on module &amp;#39;demo.ll&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;......
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;请确保clang 与 llc 的版本是一致的。apple 自带的 clang 与 homebrew 安装的 llvm 不一定是同一个版本。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;as&lt;&#x2F;code&gt; from assembly to object file&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;本文给出了一个学习 LLVM IR 的有效方法：即跟着 clang 的编译过程，逐步了解 IR 以及各个 pass 的作用。并给出了参考的命令行工具。&lt;&#x2F;li&gt;
&lt;li&gt;本文中的 passes 生成工具，脚本是通过 github copilot 辅助生成的 rust 脚本，稍微调整一下后，就可以使用，来辅助分析 IR。&lt;&#x2F;li&gt;
&lt;li&gt;后续：
&lt;ul&gt;
&lt;li&gt;对于复杂的 IR 代码，需要有一个从 IR 生成 CFG 的工具，这样可以更好的理解 IR 的控制流程。我会在后面的学习中，使用 rust 来编写这个工具。
&lt;blockquote&gt;
&lt;p&gt;初稿已经完成，可以参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;my-llvm-tools&#x2F;blob&#x2F;main&#x2F;src&#x2F;bin&#x2F;ll2cfg.rs&quot;&gt;ll2cfg&lt;&#x2F;a&gt;
本文中的 CFG 流程图均使用该工具生成。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;可以使用本文中介绍的方法，逐步阅读更为复杂的 LLVM IR 代码，学习 LR 的基本知识。&lt;&#x2F;li&gt;
&lt;li&gt;下一步重点关注的是向量化代码的编译过程，评估直接基于 LLVM 生成向量化的关系计算代码的可行性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;系列链接
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;learning-llvm&#x2F;&quot;&gt;LLVM 学习系列一：初读 LLVM-IR 示例代码&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;learning-llvm-2&#x2F;&quot;&gt;LLVM 学习系列二：从一段简单的C代码来学习LLVM-IR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>January 2025</title>
        <published>2025-01-01T00:00:00+00:00</published>
        <updated>2025-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2025-01/"/>
        <id>https://wangzaixiang.github.io/monthly/2025-01/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2025-01/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@techhara&#x2F;performance-optimization-technique-branchless-programming-a40c0a35511e&quot;&gt;Performance optimization — branchless programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;branchful&lt;&#x2F;span&gt;&lt;span&gt;(std::optional&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, std::optional&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; NULL_VALUE = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has_value&lt;&#x2F;span&gt;&lt;span&gt;() &amp;amp;&amp;amp; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has_value&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*x * *y;
&lt;&#x2F;span&gt;&lt;span&gt; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NULL_VALUE;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;消除分支：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;boolean hasX = x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has_value&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;boolean hasY = y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has_value&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;boolean all = hasX &amp;amp;&amp;amp; hasY;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; all ? *x * *y : NULL_VALUE;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;6-7倍性能提升。 在 CPU 层，cmov 指令可以实现分支消除，&lt;&#x2F;p&gt;
&lt;p&gt;工具： perf stat -e instructions,branches,branch-misses  command args
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2025-01&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@techhara&#x2F;performance-optimization-efficient-cache-programming-f107dce3bef0&quot;&gt;Performance optimization—efficient cache programming 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;减少 struct 的大小，对大数组类的数据结构，可以减少内存的占用，从而提高 cache 的命中率。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.devgenius.io&#x2F;cpu-cache-how-to-write-code-to-make-the-cpu-execute-faster-cc0cf4969c4b&quot;&gt;How to write code to make the cpu execute faster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cache&#x2F;index[0123]&#x2F;size&lt;&#x2F;code&gt; for Level L1(IC) L1(DC), 2, 3 cache size.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cache&#x2F;index[0123]&#x2F;coherency_line_size&lt;&#x2F;code&gt; for cache line size.&lt;&#x2F;li&gt;
&lt;li&gt;sched_setaffinity: set the CPU affinity of a process.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;array[i][j]&lt;&#x2F;code&gt; 访问顺序对 cache 的影响。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.scottredig.com&#x2F;blog&#x2F;bonkers_comptime&#x2F;&quot;&gt;Zig Comptime is Bonkers Good 疯狂的好&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;view 0: 语法噪音少，你几乎可以忽略它。&lt;&#x2F;li&gt;
&lt;li&gt;view 1: 没有泛型，但有更好的泛型。&lt;&#x2F;li&gt;
&lt;li&gt;view 2: 编译期执行的标准 zig 代码。&lt;&#x2F;li&gt;
&lt;li&gt;view 3&#x2F;4&#x2F;5: 混合 comptime + runtime，展开成新的代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;plasma-umass&#x2F;Mesh&#x2F;raw&#x2F;master&#x2F;mesh-pldi19-powers.pdf&quot;&gt;Mesh: compacting memory management for C&#x2F;C++ applications&lt;&#x2F;a&gt;
概览了这篇论文，很有创意的内存管理方式，减少物理内存碎片（而非虚拟内存），提高物理内存的使用效率。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个 virtual page 中的活跃分配没有重叠，则可以合并映射到同一个 physical page.&lt;&#x2F;li&gt;
&lt;li&gt;在 Linux 上，可以通过 &#x2F;dev&#x2F;mem 来访问物理内存。可以通过 &#x2F;proc&#x2F;pid&#x2F;pagemap, 参考：&lt;a href=&quot;https:&#x2F;&#x2F;codentium.com&#x2F;accessing-physical-memory-from-userspace-on-linux&#x2F;#&quot;&gt;Accessing physical memory from userspace on Linux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Linux 系统调用 &lt;code&gt;memfd_create(name, flags)&lt;&#x2F;code&gt; 创建一个虚拟文件，其内容在 virtual memory 中，这个文件接下来又可以 mmap 到虚拟内存中。&lt;&#x2F;li&gt;
&lt;li&gt;在 Mac 上是通过 mkstemp 创建一个文件，保留 fd 然后 unlink 改文件。这样的话，理论上会多一个 IO 的开销。&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;39779517&#x2F;does-mac-os-have-a-way-to-create-an-anonymous-file-mapping&quot;&gt;Stackoverflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;参考实现：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;plasma-umass&#x2F;Mesh&quot;&gt;LibMesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;ibireme&#x2F;173517c208c7dc333ba962c1f0d67d12&quot;&gt;M1: A demo shows how to read Intel or Apple M1 CPU performance counter in macOS.&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
终于找到了一个在 M1 下度量 IPC 的方法了。接下来我会改进一下这个工具，后续可以用来辅助度量自己编写的代码的性能。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我把这个工具简单的改进了一下，可以对某个进行进行度量，代码提交到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;m1_ipc_measure&quot;&gt;github&lt;&#x2F;a&gt; 上，目前还很原始，
使用方式：
&lt;ol&gt;
&lt;li&gt;clang -o kpc main.c&lt;&#x2F;li&gt;
&lt;li&gt;.&#x2F;kpc 2 command args  # 启动 command, 并度量 2s 的 IPC(目前需确保 命令执行时长大于2s * 2)
就可以度量出 IPC, branch misses 等信息了。使用这个工具度量了一下最近的 1brc 代码，IPC达到了 4.70, branch misses 为 2.6%。有这些数据，可以
更好的指导如何进行代码优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lemire&#x2F;Code-used-on-Daniel-Lemire-s-blog&#x2F;tree&#x2F;master&#x2F;2021&#x2F;03&#x2F;24&quot;&gt;Counting cycles and instructions on the Apple M1 processor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C++&#x2F;Rust 面向CPU进行优化</title>
        <published>2024-12-27T00:00:00+00:00</published>
        <updated>2024-12-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/c-optimize/"/>
        <id>https://wangzaixiang.github.io/blog/c-optimize/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/c-optimize/">&lt;p&gt;本文是阅读 《从现代CPU 特性和编译的角度分析C++ 代码优化-李成栋》的笔记以及我做的一些实验。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dan-wen-jian-bian-yi-vs-duo-wen-jian-bian-yi-lto&quot;&gt;单文件编译 vs 多文件编译 &amp;amp; LTO&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shi-yan&quot;&gt;实验&lt;&#x2F;h2&gt;
&lt;p&gt;示例代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) *output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) *output *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; o = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;800000000&lt;&#x2F;span&gt;&lt;span&gt;; j++){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;i, &amp;amp;o);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, o);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;单文件版本。
&lt;ul&gt;
&lt;li&gt;clang&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;  clang -O3 -o compute compute.cpp
&lt;&#x2F;span&gt;&lt;span&gt;  time .&#x2F;compute
&lt;&#x2F;span&gt;&lt;span&gt;  耗时 0.00s
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  clang --target=x86_64-macos -O3 -o compute compute.c -- 可以交叉编译为 x86_64 的代码。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;gcc 与上类似。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;多文件版本。
将上述文件拆分为 compute.h, compute.cpp, main.cpp 三个文件。
&lt;ul&gt;
&lt;li&gt;clang 不启动 LTO&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;  clang -O3 -o compute compute.cpp main.cpp
&lt;&#x2F;span&gt;&lt;span&gt;  time .&#x2F;compute
&lt;&#x2F;span&gt;&lt;span&gt;  耗时 0.76s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;clang 启动 LTO&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;  clang -O3 -flto -o compute compute.cpp main.cpp
&lt;&#x2F;span&gt;&lt;span&gt;  time .&#x2F;compute
&lt;&#x2F;span&gt;&lt;span&gt;  耗时 0.00s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;gcc 与上类似。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;代码结构&lt;&#x2F;th&gt;&lt;th&gt;LTO&lt;&#x2F;th&gt;&lt;th&gt;耗时&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;单文件&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;0.00s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;多文件&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;0.00s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;多文件&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;0.76s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ol&gt;
&lt;li&gt;单文件时，clang&#x2F;gcc 会尽可能的 inline 优化，其产生的代码如下：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;c-optimize&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;compute 函数的代码在内联后，其值直接被计算出来，而不是通过循环计算。所以耗时为0.00s。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;多文件时，除非启动 LTO，否则无法进行内联优化。所以耗时为0.76s。而启动 LTO 后，其代码结构与单文件时类似，所以耗时为0.00s。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;c-optimize&#x2F;img_1.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;what-about-rust&quot;&gt;What about Rust?&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Rust 与 C++ 在 inline 方面更为激进：
&lt;ul&gt;
&lt;li&gt;在 同一个 crate 内，即使是不同的 module，编译器会尽可能的 inline 函数。&lt;&#x2F;li&gt;
&lt;li&gt;在不同的 crate 简，除非使用 &lt;code&gt;#[inline]&lt;&#x2F;code&gt; 或者 &lt;code&gt;#[inline(always)]&lt;&#x2F;code&gt;，否则无法进行内联优化。这个并不需要开启 LTO。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;aliasing&quot;&gt;Aliasing&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;c&quot;&gt;C++&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__restrict__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__restrict__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) *output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) *output *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;__restrict__&lt;&#x2F;code&gt; 限定了 input 与 output 不会指向同一个地址，(不会是同一个数据的两个别名)，这样编译器可以更好的优化代码，例如，两次 &lt;code&gt;*input&lt;&#x2F;code&gt;
操作就无需从内存中读取两次，而是读取一次后，第二次访问时，可以重复使用该值。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;代码结构&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;restrict&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;耗时&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;多文件&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;0.76s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;多文件&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;0.76s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;优化结果并不明显：主要是因为 L1 cache 的存在，即使是两次读取，也不会有太大的性能损失。
对应的汇编代码如下：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;c-optimize&#x2F;img_2.png&quot; alt=&quot;img_2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Aliasing 消除在很多场景下会带来更为明显的优化（这个例子不够明显），可以参考：&lt;a href=&quot;&#x2F;blog&#x2F;rust-cpp-comparison&#x2F;&quot;&gt;Rust vs C++: A Performance Comparison&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;fen-zhi-you-hua&quot;&gt;分支优化&lt;&#x2F;h1&gt;
&lt;p&gt;理论上，分支预测失败会导致流水线的空转，从而导致性能下降。但到底分支预测失败会导致多少性能下降，是否需要引起重视呢？&lt;&#x2F;p&gt;
&lt;p&gt;我之前有在 Rust 的 std 库中看到 &lt;code&gt;std::intrinsics::likely&lt;&#x2F;code&gt; 的用法，例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; from core::slice::sort::stable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, F: FnMut(&amp;amp;T, &amp;amp;T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, BufT: BufGuard&amp;lt;T&amp;gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [T], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_less&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; F) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Arrays of zero-sized types are always all-equal, and thus sorted.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;T::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;IS_ZST &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Instrumenting the standard library showed that 90+% of the calls to sort
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; by rustc are either of size 0 or 1.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;intrinsics::likely(len &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个例子提供了对分支预测失败的性能损失的一个评估。我把作者的代码使用 Rust 重写了一遍，然后进行了一些实验。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(core_intrinsics)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut i32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))]
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; compiler as likely
&lt;&#x2F;span&gt;&lt;span&gt;            *output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;{  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; compiler as likely
&lt;&#x2F;span&gt;&lt;span&gt;            *output *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;std::intrinsics::likely(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            *output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;std::intrinsics::likely(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            *output *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;std::intrinsics::unlikely(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            *output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;std::intrinsics::unlikely(*input &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            *output *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; o = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; o);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tm0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;i, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; o); }
&lt;&#x2F;span&gt;&lt;span&gt;        j += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tm1 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{msg}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; time = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, o, tm1-tm0 );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;feature&lt;&#x2F;th&gt;&lt;th&gt;耗时&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;normal&lt;&#x2F;td&gt;&lt;td&gt;1.253s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;unlikely&lt;&#x2F;td&gt;&lt;td&gt;1.267s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;likely&lt;&#x2F;td&gt;&lt;td&gt;0.955s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;对应的代码的差异如下：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;c-optimize&#x2F;img_3.png&quot; alt=&quot;img_3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从这个生成的代码来看：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;normal 模式下，编译期的预测与实际数据是一致的，但生成的代码效率与 likely 下的效率像差很大，主要原因应该是 无条件branch 导致的流水线的空转。&lt;&#x2F;li&gt;
&lt;li&gt;unlikely 模式下，两个 if 分支的预测都是错误的，其性能相比 likely 下降了 25%， 应该说还是很明显的。&lt;&#x2F;li&gt;
&lt;li&gt;即使是 likely 完全预测准确，也有可能生成不够高效的代码。这里的 normal 模式就是一个例子。在这种情况下，或许最终的方案还是要手写的汇编才能达到最优。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;links&quot;&gt;links&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@techhara&#x2F;performance-optimization-technique-branchless-programming-a40c0a35511e&quot;&gt;Performance optimization — branchless programming&lt;&#x2F;a&gt;
这篇文章中的示例，通过消除分支，实现了 6-7倍的性能提升。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@techhara&#x2F;performance-optimization-efficient-cache-programming-f107dce3bef0&quot;&gt;Performance optimization—efficient cache programming 1&lt;&#x2F;a&gt;
通过减少 struct 的大小，提高 cache 命中率，性能提升 31%， cache miss rate 从 39% 降低到 13%。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.devgenius.io&#x2F;cpu-cache-how-to-write-code-to-make-the-cpu-execute-faster-cc0cf4969c4b&quot;&gt;How to write code to make the cpu execute faster&lt;&#x2F;a&gt;
cache 友好的代码编写。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>一个 Zig 编译器的 Bug</title>
        <published>2024-12-05T00:00:00+00:00</published>
        <updated>2024-12-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/a-zig-bug/"/>
        <id>https://wangzaixiang.github.io/blog/a-zig-bug/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/a-zig-bug/">&lt;h1 id=&quot;yi-ge-zig-bian-yi-qi-de-bug&quot;&gt;一个 Zig 编译器的 Bug&lt;&#x2F;h1&gt;
&lt;p&gt;在动手学习 Zig 的过程中，在探索stack中变量的memory layout时，发现了了一个 Bug，已提交到 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ziglang&#x2F;zig&#x2F;issues&#x2F;22140&quot;&gt;github&lt;&#x2F;a&gt;。
在这里记录一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; SIZE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;: [SIZE]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(arr, 0..) |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, i| {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;@intCast&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;main &amp;amp;arr = {*}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{&amp;amp;arr});
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;main &amp;amp;arr = {*} same as above &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{&amp;amp;arr}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; same as above
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;passArray for mutable array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passArray&lt;&#x2F;span&gt;&lt;span&gt;(arr);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;passArray&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;: *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; [SIZE]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &amp;amp;arr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; p2 = &amp;amp;arr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p3&lt;&#x2F;span&gt;&lt;span&gt;: [*]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const u32 &lt;&#x2F;span&gt;&lt;span&gt;= &amp;amp;arr;
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;inside passArray &amp;amp;arr = {*} p2 = {*} p3 = {*}  p1 != p2 != p3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{ p1, p2, p3 });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; LOOP = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; when LOOP = 14, the program will crash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;LOOP = {} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{LOOP});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inline for &lt;&#x2F;span&gt;&lt;span&gt;(0..LOOP) |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;inside passArray, &amp;amp;arr = {*} not same as above.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{&amp;amp;arr}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;amp;arr increase SIZE * 4 every time
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;a_zig_bug.643ff30a512ae452.png&quot; &#x2F;&gt;
&lt;p&gt;因为每次 &lt;code&gt;&amp;amp;arr&lt;&#x2F;code&gt; 操作都导致在栈上复制了一个数组，因此，如果数组长度较大，&lt;code&gt;&amp;amp;arr&lt;&#x2F;code&gt; 操作次数较多时，例如，在上述的代码中，1M * 14 = 14M， 在我
的 Mac 上，就会出现 SIGSEV 错误 ( 应该是 StackOverflow 了 )。&lt;&#x2F;p&gt;
&lt;p&gt;在国内的 Zig 群问了一下，众说纷纭，有大神坚持认为这个不是 bug，而是 constcast 的必然结果，不过我并不能理解：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;arr&lt;&#x2F;code&gt; 只是一个取地址操作，并不会改变数据类型。如果原来是 const 的，结果就是 &lt;code&gt;*const [N]&lt;&#x2F;code&gt; 否则就是 &lt;code&gt;*[N]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;不同于 rust, zig 并没有 &lt;code&gt;&amp;amp;x&lt;&#x2F;code&gt; 和 &lt;code&gt;&amp;amp;mut x&lt;&#x2F;code&gt; 的区别。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;arr&lt;&#x2F;code&gt; 导致数组复制，不仅会导致栈内存的浪费，而且也增加了不必要的代码成本。更严重的会导致 StackOverflow，其实还是一个比较严重的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;提交到 github 上，很快获得了 core team 的确认，已接受作为一个Bug，并添加到了 0.14 的 milestone 中。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zig Comptime</title>
        <published>2024-12-05T00:00:00+00:00</published>
        <updated>2024-12-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/zig-comptime/"/>
        <id>https://wangzaixiang.github.io/blog/zig-comptime/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/zig-comptime/">&lt;h1 id=&quot;1-what-is-zig-other-than-others&quot;&gt;1. what is zig other than others?&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;zen: Only one obvious way to do things. 显示，直接。
&lt;ul&gt;
&lt;li&gt;No Hidden control flow. 没有隐藏的函数调用。（当然也没有析构函数、隐式转换、自动解引用等等）。缺点是抽象可能不够，优点是代码更直接。&lt;&#x2F;li&gt;
&lt;li&gt;No hidden allocations. 看一个函数是否有内存分配，只需要看它是否有 allocator 参数了&lt;&#x2F;li&gt;
&lt;li&gt;No variable shadowing. 虽然写代码时，可能会有一些不便，但对阅读代码来说，更直接一些。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;comptime
&lt;ul&gt;
&lt;li&gt;zig comptime vs rust macro&lt;&#x2F;li&gt;
&lt;li&gt;zig comptime vs Scala meta programming.&lt;&#x2F;li&gt;
&lt;li&gt;If a container level variable is const then its value is comptime-known, otherwise it is runtime-known&lt;&#x2F;li&gt;
&lt;li&gt;type&#x2F; std.built.Type 等类型，只存在于 comptime 中，很多代码需要可 inline.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;2-comptime-expression-shi-ru-he-zhi-xing-de&quot;&gt;2. comptime expression 是如何执行的？&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.zig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 这个方法没有太大的业务逻辑，目的仅仅是防止优化，让 longLoop(n) 方法的耗时更明显
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;longLoop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(i &amp;lt; n) : (i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; skip = i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(j &amp;lt; n) : (j += skip) {
&lt;&#x2F;span&gt;&lt;span&gt;            sum2 += j;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        sum += sum2;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sum;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; show times of longLoop(n)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; start = std.time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;milliTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;longLoop&lt;&#x2F;span&gt;&lt;span&gt;(n);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; end = std.time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;milliTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;runtime  eval: n = {}, result = {}, time = {}ms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{ n,  result, end - start});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; start2 = std.time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;milliTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;@setEvalBranchQuota&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000_000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; result2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;comptime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;longLoop&lt;&#x2F;span&gt;&lt;span&gt;(n);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; end2 = std.time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;milliTimestamp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;comptime eval: n = {}, result = {}, time = {}ms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{ n,  result2, end2 - start2});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编译 main.zig, &lt;code&gt;zig build-exe -O ReleaseFast src&#x2F;main.zig&lt;&#x2F;code&gt;, 耗时 21s. 调整 comptime longLoop(n) 的参数， 分别耗时如下：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;n&lt;&#x2F;th&gt;&lt;th&gt;compile time&lt;&#x2F;th&gt;&lt;th&gt;runtime eval&lt;&#x2F;th&gt;&lt;th&gt;comptime eval&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;4.5s&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;4.5s&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;4.5s&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1000&lt;&#x2F;td&gt;&lt;td&gt;5.0s&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2000&lt;&#x2F;td&gt;&lt;td&gt;6.6s&lt;&#x2F;td&gt;&lt;td&gt;1ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3000&lt;&#x2F;td&gt;&lt;td&gt;8.6s&lt;&#x2F;td&gt;&lt;td&gt;3ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4000&lt;&#x2F;td&gt;&lt;td&gt;11.9s&lt;&#x2F;td&gt;&lt;td&gt;3ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5000&lt;&#x2F;td&gt;&lt;td&gt;15.9s&lt;&#x2F;td&gt;&lt;td&gt;4ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6000&lt;&#x2F;td&gt;&lt;td&gt;21.0s&lt;&#x2F;td&gt;&lt;td&gt;9ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7000&lt;&#x2F;td&gt;&lt;td&gt;27.0s&lt;&#x2F;td&gt;&lt;td&gt;12ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8000&lt;&#x2F;td&gt;&lt;td&gt;33.9s&lt;&#x2F;td&gt;&lt;td&gt;14ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9000&lt;&#x2F;td&gt;&lt;td&gt;41.9s&lt;&#x2F;td&gt;&lt;td&gt;18ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10000&lt;&#x2F;td&gt;&lt;td&gt;50.7s&lt;&#x2F;td&gt;&lt;td&gt;19ms&lt;&#x2F;td&gt;&lt;td&gt;0ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;从上述数据可以看出，&lt;code&gt;comptime longLoop(n)&lt;&#x2F;code&gt; 随着 n 的增长， compile time 会显著增长，n == 1000 时，编译时长为5s，而 n = 10000 时
编译时长为50s。而 runtime eval 的耗时仅仅是从 0ms 增长到 19ms, 这可以说明，compile 阶段，comptime eval 并非 native 方式执行 longLoop
代码，而是采用了一种 AST interpreter 的方式执行代码，在这个场景中，效率有上千倍的差距。（这个案例仅为测试目的，实际 comptime 的耗时差距一般
会显著低于这个差距，甚至在大部份情况下，对使用者无明显感知）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;之前，我是使用 fib(n) 来测试 comptime 的，参考：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(index &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; index;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span&gt;(index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt;)+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span&gt;(index - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; const result = fibonacci(n);&#x2F;&#x2F; run: 37.8s,compile:4.34s
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;comptime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span&gt;(n); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; compile 4.3s run: 0s
&lt;&#x2F;span&gt;&lt;span&gt;     std.debug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;fib(f})= {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{n, result }); 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个案例看起来很反常：fib(50) 在运行期执行耗时 37.8s, 而 comptime 耗时则近乎为0（4.34s 是zig compile -O ReleaseFast 的基准时间），为什么
comptime 的耗时这么低呢？猜测是对 fib 计算进行了 cache 优化，这一点也从 zig 的文档中得到了证实：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Functions called at compile-time are memoized. This means you can
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do this:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;(i32) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;(i32));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 zig 对 AST 的解释执行，并且进行了 memoize 优化，所以才有了在这里，解释执行比编译执行版本更快的情况。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;comptime evaluation 是在 Sema 阶段完成的。参考文档：&lt;a href=&quot;https:&#x2F;&#x2F;mitchellh.com&#x2F;zig&#x2F;sema&quot;&gt;Zig Sema&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我还没有看懂这篇文章。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;3-dynamic-construct-a-type-in-comptime&quot;&gt;3. dynamic construct a type in comptime&lt;&#x2F;h1&gt;
&lt;p&gt;Zig 可以通过 comptime 来实现 generic，但官网给的例子还是比较简单的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;comptime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The generic List data structure can be instantiated by passing in a type:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; list = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(i32){
&lt;&#x2F;span&gt;&lt;span&gt;    .items = &amp;amp;buffer,
&lt;&#x2F;span&gt;&lt;span&gt;    .len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个例子中，构造的 &lt;code&gt;List(i32)&lt;&#x2F;code&gt; 还是感觉不够动态，譬如，是否可以：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构体的成员数量、类型是动态的？&lt;&#x2F;li&gt;
&lt;li&gt;结构体内的 fn 是动态的？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这一切的奥秘，隐藏在 &lt;code&gt;@typeInfo&lt;&#x2F;code&gt;, &lt;code&gt;@Type&lt;&#x2F;code&gt; 这几个内置函数中。如下是一个简单的示例： User2 是一个 comptime 动态计算出来的类型，其一部份
字段是从 User 这个模版类型中复制来的，email 字段则是动态添加上去的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; used as a type Template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;User = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: [:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; print = std.debug.print;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;std.builtin.Type &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;@typeInfo&lt;&#x2F;span&gt;&lt;span&gt;(User);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dynamic construct a Type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t_info2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;std.builtin.Type &lt;&#x2F;span&gt;&lt;span&gt;= .{
&lt;&#x2F;span&gt;&lt;span&gt;       .Struct = .{
&lt;&#x2F;span&gt;&lt;span&gt;          .layout = t_info.Struct.layout,
&lt;&#x2F;span&gt;&lt;span&gt;           .backing_integer =  t_info.Struct.backing_integer,
&lt;&#x2F;span&gt;&lt;span&gt;           .fields = &amp;amp; .{
&lt;&#x2F;span&gt;&lt;span&gt;               .{
&lt;&#x2F;span&gt;&lt;span&gt;                   .name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;NAME&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   .type = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].type,
&lt;&#x2F;span&gt;&lt;span&gt;                   .default_value = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].default_value,
&lt;&#x2F;span&gt;&lt;span&gt;                   .is_comptime = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].is_comptime,
&lt;&#x2F;span&gt;&lt;span&gt;                   .alignment = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].alignment
&lt;&#x2F;span&gt;&lt;span&gt;               },
&lt;&#x2F;span&gt;&lt;span&gt;               .{
&lt;&#x2F;span&gt;&lt;span&gt;                   .name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;AGE&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   .type = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].type,
&lt;&#x2F;span&gt;&lt;span&gt;                   .default_value = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].default_value,
&lt;&#x2F;span&gt;&lt;span&gt;                   .is_comptime = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].is_comptime,
&lt;&#x2F;span&gt;&lt;span&gt;                   .alignment = t_info.Struct.fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].alignment
&lt;&#x2F;span&gt;&lt;span&gt;               },
&lt;&#x2F;span&gt;&lt;span&gt;               .{
&lt;&#x2F;span&gt;&lt;span&gt;                   .name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;email&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   .type = [:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; u8,
&lt;&#x2F;span&gt;&lt;span&gt;                   .default_value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   .is_comptime = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   .alignment = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;               }
&lt;&#x2F;span&gt;&lt;span&gt;           },
&lt;&#x2F;span&gt;&lt;span&gt;           .decls = t_info.Struct.decls,
&lt;&#x2F;span&gt;&lt;span&gt;           .is_tuple = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; build type User2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; User2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;@Type&lt;&#x2F;span&gt;&lt;span&gt;(t_info2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now, User2 can be used in source code.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;User2 &lt;&#x2F;span&gt;&lt;span&gt;= .{
&lt;&#x2F;span&gt;&lt;span&gt;        .NAME = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;WANGZX&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .AGE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .email = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;wangzx@qq.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Users = {any}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{User2});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;u.NAME = {s}, u.AGE = {d} u.email = {s}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .{ u.NAME, u.AGE, u.email });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;4-dui-bi-scala3-macro&quot;&gt;4. 对比 Scala3 Macro&lt;&#x2F;h1&gt;
&lt;p&gt;我对 Scala3 Macro 了解较多，wsql, wjson等项目都深度依赖 macro 提供的强大能力，rust macro 则只是泛泛了解。因此，很多时候，会对照
Scala3 macro 来理解 zig comptime.&lt;&#x2F;p&gt;
&lt;p&gt;由于目前 zig comptime 执行的一些限制，例如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;不能有 runtime side effects, 加上目前的 interpret 执行方式的可能性能损失，zig comptime 会有一些限制，而 scala3 macro 则不会受上述限制。
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All code with runtime side effects or depending on runtime values emits a compile error.&lt;&#x2F;li&gt;
&lt;li&gt;All function calls cause the compiler to interpret the function at compile-time,
emitting a compile error if the function tries to do something that has global runtime side effects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scala3 quotes API 有更强的反射能力，可以直接操作 AST，在一些动态生成代码的场景会更灵活（这个API本身是 Scala Compiler 的API）。
zig 目前来看，是不提供对代码的 AST 反射、操纵的能力的。&lt;&#x2F;li&gt;
&lt;li&gt;限制：Scala3 目前的 macro 提供的都是 blackbox macro, 也就是说，macro 自身并不影响外部的类型系统，例如，不能添加新的
类型、方法、变量等，即使添加了，也无法为其他代码所感知。zig comptime 则可以直接创新新的类型。（这也是 zig generic 的实现方式）&lt;&#x2F;li&gt;
&lt;li&gt;std.builtin.Type 类似于 scala.quotes.TypeRepr，但具有更强的 whitebox 能力，是 comptime 时用于描述 Type 的元数据结构。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Zig Cli: 处理 CLI 是 comptime 的一个很实用的场景。 rust&#x2F;scala 都玩这个。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zigcli.liujiacai.net&#x2F;modules&#x2F;simargs&#x2F;&quot;&gt;Zig CLI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hejsil&#x2F;zig-clap&quot;&gt;Zig Clap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>December 2024</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2024-12/"/>
        <id>https://wangzaixiang.github.io/monthly/2024-12/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2024-12/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;zig-ben-yue-zhong-dian-hua-yi-xie-shi-jian-xue-xi-li-jie-zig&quot;&gt;Zig: 本月重点花一些时间学习理解 zig。&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Zig Compiler Internals
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitchellh.com&#x2F;zig&#x2F;tokenizer&quot;&gt;Tokenizer&lt;&#x2F;a&gt;: bytes -&amp;gt; token
tokenizer 过程不使用 heap.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitchellh.com&#x2F;zig&#x2F;parser&quot;&gt;Parser&lt;&#x2F;a&gt;: token -&amp;gt; AST&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用 MultiArrayList 作为存储数据结构（structure of array）:减少内存占用，缓存友好。（使用 macro 可以简化 SOA 的 api）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitchellh.com&#x2F;zig&#x2F;astgen&quot;&gt;AstGen: AST =&amp;gt; ZIR&lt;&#x2F;a&gt; AST =&amp;gt; ZIR( Zig IR)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;zig ast-check -t &amp;lt;file&amp;gt;&lt;&#x2F;code&gt; 可以查看 ZIR&lt;&#x2F;li&gt;
&lt;li&gt;zir is untyped&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mitchellh.com&#x2F;zig&#x2F;sema&quot;&gt;Zig Sema&lt;&#x2F;a&gt;: ZIR -&amp;gt; AIR (Analyzed IR) The heart of zig compiler.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;zig build-obj --verbose-air &amp;lt;file&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;comptime evaluation&lt;&#x2F;li&gt;
&lt;li&gt;AIR is fully typed&lt;&#x2F;li&gt;
&lt;li&gt;AIR is only generated for exported or referenced functions.&lt;&#x2F;li&gt;
&lt;li&gt;Value: comptime-known value.&lt;&#x2F;li&gt;
&lt;li&gt;Type: comptime-known type(all types are comptime-known). a type can be a value of type &lt;code&gt;type&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;TypedValue: value with type.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;理解 comptime, 我准备了一个实验，参考：&lt;a href=&quot;&#x2F;learning&#x2F;zig&#x2F;how_comptime_works.html&quot;&gt;comptime 是如何工作的&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;a-zig-bug&#x2F;&quot;&gt;发现了 Zig 编译器的一个 BUG&lt;&#x2F;a&gt;，还比较严重的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5_oqWE9otaE&amp;amp;t=3910s&quot;&gt;What is Zig got than C. Rust, and Go don&#x27;t have&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;others&quot;&gt;others&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Scala Macro: 两篇关于 Scala 3 Macro 的文章，较为深入，值得收藏学习。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inoio.de&#x2F;blog&#x2F;2024&#x2F;07&#x2F;14&#x2F;scala3-macros-part1&#x2F;&quot;&gt;Crafting types with Scala 3 macros - Part 1: Introduction to macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inoio.de&#x2F;blog&#x2F;2024&#x2F;07&#x2F;15&#x2F;scala3-macros-part2&#x2F;&quot;&gt;Crafting types with Scala 3 macros - Part 2: A Whitebox Macro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scala 3.6.2 Released
&lt;ul&gt;
&lt;li&gt;Clause Interleave. 支持: &lt;code&gt;def getOrElse(k: Key)[V &amp;gt;: k.Value](default: V): V&lt;&#x2F;code&gt;, 更强的 path-dependent type.&lt;&#x2F;li&gt;
&lt;li&gt;Improve Syntax for Context Bounds and Givens&lt;&#x2F;li&gt;
&lt;li&gt;NamedTuple 很期待的一个语法糖，可以让使用 Tuple 的代码更加可读。 对 参数较多的 case class 进行 pattern match 也可以享受 NamedTuple 的便利了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;denoland.medium.com&#x2F;how-we-made-the-deno-language-server-ten-times-faster-62358af87d11&quot;&gt;How We Made the Deno Language Server Ten Times Faster, +8s -&amp;gt; &amp;lt;1s&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;封装（样式、行为通过 Shadow DOM）、互操作性(框架无关)、标准化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubuszok.com&#x2F;2024&#x2F;modeling-in-scala-part-1&#x2F;&quot;&gt;Modeling in scala, part 1: modeling you domain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.devgenius.io&#x2F;widget-wonders-web-components-the-unsung-heroes-of-modern-ui-052131d692be&quot;&gt;WC 在现代UI中的无名贡献&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;dev-jam&#x2F;functional-web-components-with-lit-part-2-3521a82bf339&quot;&gt;Scoped Components&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;可以为某个组件的 html`` 中使用的 webcomponent 提供一个 scope，重新定义 tag -&amp;gt; element 的映射关系。&lt;&#x2F;li&gt;
&lt;li&gt;为组件提供示例级的 css&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@muthuishere&#x2F;setting-up-bun-as-your-javascript-runtime-in-webstorm-and-other-jetbrains-ides-ae98f9368557&quot;&gt;Setting up bun in webstorm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;No Build 后续
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rolldown.rs&#x2F;guide&#x2F;in-depth&#x2F;why-bundlers&quot;&gt;Why do we still need bundlers&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;HTTP&#x2F;2 并不意味可以停止关心 HTTP 请求的数量（大部份浏览器的限制是100个，每个请求的额外开销），对包含数千个模块的应用仍然需要 bundling。&lt;&#x2F;li&gt;
&lt;li&gt;深层次的 import 会导致 waterfalls.&lt;&#x2F;li&gt;
&lt;li&gt;Cache:&lt;&#x2F;li&gt;
&lt;li&gt;减少网络字节数&lt;&#x2F;li&gt;
&lt;li&gt;编译优化&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bjornlu.com&#x2F;blog&#x2F;hot-module-replacement-is-easy#importmetahotaccept&quot;&gt;Hot Module Replacement: How it works?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>bison(yacc) 源代码分析</title>
        <published>2024-11-22T00:00:00+00:00</published>
        <updated>2024-11-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/bison/"/>
        <id>https://wangzaixiang.github.io/blog/bison/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/bison/">&lt;h1 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h1&gt;
&lt;p&gt;&quot;每个程序员都应该写一个 parser&quot;。在大学时，编译原理是我学得最糟糕的一门课程，尤其是 LR 文法构造的那一章，当时是完全没有理解，毕业后有机会
了解了 yacc，动手编写了一个小的 parser， 是一个 TUI 下的 UI界面描述语言。（当时，我们主要使用 curses library 来构建 TUI 程序，这个过程
是一个相当枯燥无趣的编码过程），相比使用 curses 库进行编码，使用我自创的 UI 描述语言，原本需要1周的的开发工作的任务，大部份我都可以在1天内完成，
这在当时是很有成就感的。后面再结合 Yacc 学习编译原理，并自己动手完成了 LR 文法的规则表构建过程之后，对 LR 文法的理解有了很大的提升，也对 Yacc
&#x2F;Bison这类的工具有更好的驾驭度，所以后面陆续使用 Yacc 编写了几个小的 语言parser。&lt;&#x2F;p&gt;
&lt;p&gt;在最近公司的一个数据分析项目中，我们引入了一个 SQL Parser 的构建工作。因为我们在做数据分析的过程中，主要的工作就是在与 SQL 打交道：包括将
我们的前端查询语言，转译成SQL执行，这里涉及到很多的挑战：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;查询语义的表述，尤其是计算指标的表述能力。参考我之前的系列文章：&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;dax&#x2F;&quot;&gt;DAX&lt;&#x2F;a&gt;、&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;tabular&#x2F;&quot;&gt;Tabulau&lt;&#x2F;a&gt;、
&lt;a href=&quot;..&#x2F;2024-08-24-MDX-optimize.md&quot;&gt;MDX&lt;&#x2F;a&gt;。将这些表达能力转译成 SQL 执行是数据分析引擎中最有挑战和价值的工作之一。&lt;&#x2F;li&gt;
&lt;li&gt;数据库的兼容性。不同的数据库在 SQL 支持能力、支持语法、或者实现细节上有很大的差异。如果你的产品需要兼容数十个数据库产品时，构建 SQL 的
工程挑战性变得巨大。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;传统的基于字符串处理的SQL构建、加工过程，在稍微复杂一些的场景中，会变得力不从心，因此，有必要引入 SQL Parser，将对 SQL 语句的操作转变为对
AST 得操作，这会带来：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;精确性。使用正则表达式或者其他简单的方式对 SQL 代码进行加工，都会失去精确性。基本上只胜任最简单的场景。&lt;&#x2F;li&gt;
&lt;li&gt;语义化优化。对 AST 进一步的 Type Resolver 后，我们可以对 SQL 中的符号关系进行更为精确的描述，为 SQL 的优化提供丰富的支撑（我们产品中
内置了类似于 apache calcite 的 Relation Algebra Optimize 的自研模块）&lt;&#x2F;li&gt;
&lt;li&gt;数据库方言适配。类似于关系代数优化，不过，这里更多的是对一些数据库系统的兼容性适配，
&lt;ul&gt;
&lt;li&gt;语法差异：比如有的数据库(SQL Server) 不支持 limit 子句， 有的数据库 in 子句有元素数量限制（Oracle）、有的数据库不支持 with CTE 子句，有的数据库不支持 order by&#x2F;group expression 或者
order by&#x2F;group by field-no等。&lt;&#x2F;li&gt;
&lt;li&gt;词法差异。qualified identity 不同，字符串常量中的转义规则不同等。&lt;&#x2F;li&gt;
&lt;li&gt;函数差异。这方面的差异是相当大的，每款数据库都有自己的函数定义，即使对完全相同的功能，大家都有不同的函数签名。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;处理这些差异，AST 都会带来明显的价值。&lt;&#x2F;p&gt;
&lt;p&gt;我们刚开始的时候，使用 antlr 构建了一个 Parser，不过后面发现性能不佳，而且由于我对 LR 文法（以及Yacc、Bison等工具）更为熟悉，
而对 LL文法 及 antlr 并不够熟悉，于是指导工程师基于Bison 重新构建了一个 SQL Parser。当然，效果也是很不错的：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;团队人员对 SQL 语法有了更深的了解。尤其是结合 数据库的查询计划，了解 SQL 的执行过程、优化过程、物理计划。&lt;&#x2F;li&gt;
&lt;li&gt;对 windows 函数等高级概念有了更为深入的理解，并应用到复杂指标计算的过程中，提高了计算指标的支持能力和速度。&lt;&#x2F;li&gt;
&lt;li&gt;相比 antlr LL 文法的解析器， LR 版本的性能提升显著，可以在 ms 量级处理 1M 的 SQL 语句。（LR自身性能优秀，我们的文法完全无需回溯，
我们也能驾驭。而 antlr 我们 驾驭能力较差，或者并非 antlr 就不能达到这么快的速度）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在这个过程中，我协助工程师解决了多个问题，本文记录在这个过程中，我对 Bison 的源代码的分析，以及 Bison 的使用技巧，以供后续参考。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lr-gui-ze-biao-xiang-guan-shu-ju-jie-gou&quot;&gt;LR 规则表相关数据结构&lt;&#x2F;h1&gt;
&lt;p&gt;在 LR 文法中，核心的数据结构包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Shift 表：(state, terminal) -&amp;gt; state&lt;&#x2F;li&gt;
&lt;li&gt;goto 表: (state, non_terminal) -&amp;gt; state&lt;&#x2F;li&gt;
&lt;li&gt;default reduce 表: state -&amp;gt; ruleNo&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;一般来说，1，2 数据结构均可以表述为二维矩阵，对我们的 SQL Parser 来说，这个矩阵大小为 337 * 155 = 52,235 个元素，如果使用 short 类型，
则大概占用 100K 的内存。而实际上，二维矩阵中大部份的元素都是无效的值，因此是一个非常稀疏的矩阵，通过采用压缩技术，则可大幅度减少内存的占用。
（例如，在bison版本中，实际占用内存为 337(yypact) + 61(yypgoto) + 61(yydefgoto) + 702(yytable) + 702(yycheck) = 1863*2 = 3.7K )
大幅压缩后，可以保证这些数据结构可以放入 CPU 的 L1 Cache 中，从而提高解析的性能。&lt;&#x2F;p&gt;
&lt;p&gt;Bison 的这个数据结构设计很有意思，之前我也阅读过代码，但对这个压缩的数据结构没有细化的分析，这对调试 Bison 生成的 Parser 代码还是会构成
一些障碍，乘着这次在调试一个 SQL 编译期的过程，花了一些时间来彻底理解它的数据结构设计，感觉有必要进行记录，一来是理解 Bison  的数据结构，方便后续
调试 Parser 代码时，能够更加的得心应手。二来也觉得这个数据结构的设计，非常精巧，值得学习。 LR 文法也是有限自动机的一个最佳实践，其设计之精巧，
令人赞叹。&lt;&#x2F;p&gt;
&lt;p&gt;在我们测试的案例中，&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;terminal 共94个，编号为 0..93 (不同与 Lexer 中的编码，在 Lexer 中，为 1-255 的字符保留了 Lexer 编码，如果某个编码没有对应的 terminal,
则会映射为 YYUNDEF)&lt;&#x2F;li&gt;
&lt;li&gt;non termial 共 61 个，编号为 94..154。 (由此可见， terminal 和 non terminal 使用了相同的编码空间)&lt;&#x2F;li&gt;
&lt;li&gt;states: 共337个状态， 编号为 0..336。&lt;&#x2F;li&gt;
&lt;li&gt;rules: 共192 条产生式，编号为 1..192。 (规则编号从1开始)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;yytable-yycheck&quot;&gt;yytable, yycheck&lt;&#x2F;h2&gt;
&lt;p&gt;yytable 中存储了两部份的信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shift(and go to): 其逻辑为对 (state1, terminal) -&amp;gt; state2 稀疏矩阵的压缩
&lt;ul&gt;
&lt;li&gt;state -&amp;gt; &lt;code&gt;yycheck[ terminal1 .. terminalN ]&lt;&#x2F;code&gt;  这个在 yypact 中描述，如果 yycheck( yypact(state) + terminal ) == terminal，则表示有效的 shift&lt;&#x2F;li&gt;
&lt;li&gt;state -&amp;gt; &lt;code&gt;yytable[ terminal1 .. terminalN]&lt;&#x2F;code&gt;, 如果是有效的 shift,则 yytable( yypact(state) + terminal ) 是shift 后的新状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;goto: 其逻辑为对 (non_terminal, state) -&amp;gt; state 稀疏矩阵的压缩。
&lt;ul&gt;
&lt;li&gt;non_terminal -&amp;gt; &lt;code&gt;yycheck[ state1 .. stateN ]&lt;&#x2F;code&gt; 这个在 yypgoto 中描述，如果 yycheck( yypgoto(non_terminal) + state ) == state，则表示有效的 goto&lt;&#x2F;li&gt;
&lt;li&gt;non_terminal -&amp;gt; &lt;code&gt;yytable[ state1 .. stateN]&lt;&#x2F;code&gt;, 如果是有效的 goto,则 yytable( yypgoto(non_terminal) + state ) 是goto 后的新状态。
yytable 实际上是上述两个压缩表的合并。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;short-yypact-yytable-yycheck&quot;&gt;&lt;code&gt;short[] yypact, yytable, yycheck&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这三个表结合起来，构成了 (state, terminal) -&amp;gt; state 的映射关系。&lt;&#x2F;p&gt;
&lt;p&gt;在我们示例的 SQL Parser 中，如果使用完全矩阵，完整描述 (state, terminal) -&amp;gt; state 的映射关系，则需要 337 * 94 = 31678 个元素。而
通过这3个数组来模拟的一个稀疏矩阵，则可以大大减少内存使用。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果某个状态下，没有 shift 操作， 只有 reduce 操作。 则 &lt;code&gt;yypact(STATE)&lt;&#x2F;code&gt; 分配一个最小的负数值,  &lt;code&gt;yytable(yyn + terminal.code)&lt;&#x2F;code&gt;
对所有的 terminal code 都是无效的 yytable 索引值，不占用 yytable 中的任何空间。&lt;&#x2F;li&gt;
&lt;li&gt;对有 shift 操作的状态，需要在 yytable 中分配 n 个空间： n = state.max_terminal - state.min_terminal + 1 个空间。
即使这个空间中的某个 terminal 没有对应的 shift 操作，则 yytable(yyn) 设置为-1， yycheck(yyn) 设置为&lt;&#x2F;li&gt;
&lt;li&gt;如果某两个状态的 shift 完全相同（包括目标状态），可以共享空间。&lt;&#x2F;li&gt;
&lt;li&gt;理论上可以如果 state1 与 state2 对应的 shift 操作如果没有交集，则可以共享空间。这样可以通过算法，进一步对 yytable 压缩。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;short-yydefact&quot;&gt;&lt;code&gt;short[] yydefact&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yydefact[stateNo]&lt;&#x2F;code&gt; 的长度与状态数量一致，每个状态对应一个值，表示该状态的 default reduce 操作(从1开始）。
为 0 则表示该状态没有 reduce 操作（accept reduce 的编号为 1）.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;yyr2[ruleNo]&lt;&#x2F;code&gt; 记录每个 产生式的右侧符号的数量。 为了节省空间，当最大长度 &amp;lt; 127 时，使用 byte 类型。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;yypgoto-yytable-yycheck-short-yydefgoto&quot;&gt;&lt;code&gt;yypgoto, yytable, yycheck, short yydefgoto&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;goto table 用于描述 (state, non_terminal) -&amp;gt; state 的映射关系。
goto_table 由两部份组成：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;yypgoto、yytable、yycheck：通过 yypgoto 建立 non_terminal -&amp;gt; yyn_index 的映射，然后通过 state -&amp;gt; yyn_index + state 检查
yycheck 和 yytable 来获取 goto 的状态。&lt;&#x2F;li&gt;
&lt;li&gt;如果上述检查失败，则通过 yydefgoto(non_terminal) 获取默认的 goto 状态。(当 non_terminal 在多个状态下的 goto 状态相同时，可以共享空间。)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;short-yystos&quot;&gt;&lt;code&gt;short[] yystos_&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在我们的 SQL parser 中，这个表没有使用到。暂时不分析。 其对应每个状态下 前导终结符，如果没有确定的终结符，则对应的前导非终结符。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sort-yyr1-yyr2&quot;&gt;&lt;code&gt;sort[] yyr1, yyr2&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;yyr1: 对应于每一个产生式的左侧符号编码。&lt;&#x2F;li&gt;
&lt;li&gt;yyr2: 对应于每一个产生式的右侧符号的数量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;bison-de-yi-chang-chu-li&quot;&gt;Bison 的异常处理&lt;&#x2F;h1&gt;
&lt;p&gt;Bison 提供了 error recovery 的机制，有一个特殊的内置终结符：error，可以使用如下的方式来处理错误：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yacc&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yacc &quot;&gt;&lt;code class=&quot;language-yacc&quot; data-lang=&quot;yacc&quot;&gt;&lt;span&gt;prog: expr &amp;#39;\n&amp;#39; { printf(&amp;quot;result: %d\n&amp;quot;, $1);    # 1
&lt;&#x2F;span&gt;&lt;span&gt;    | error &amp;#39;\n&amp;#39; { yyerrok; }                    # 2
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;expr: expr &amp;#39;+&amp;#39; expr { $$ = $1 + $3; }            # 3
&lt;&#x2F;span&gt;&lt;span&gt;  | expr &amp;#39;-&amp;#39; expr { $$ = $1 - $3; }              # 4
&lt;&#x2F;span&gt;&lt;span&gt;  | expr &amp;#39;*&amp;#39; expr  { $$ = $1 * $3; }             # 5
&lt;&#x2F;span&gt;&lt;span&gt;  | expr &amp;#39;&#x2F;&amp;#39; expr  { $$ = $1 &#x2F; $3; }             # 6
&lt;&#x2F;span&gt;&lt;span&gt;  | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39; { $$ = $2; }                    # 7
&lt;&#x2F;span&gt;&lt;span&gt;  ｜ expr &amp;#39;?&amp;#39; expr &amp;#39;:&amp;#39; expr                      # 8
&lt;&#x2F;span&gt;&lt;span&gt;  | NUMBER { $$ = $1; }                          # 9
&lt;&#x2F;span&gt;&lt;span&gt;  ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上述文法，需要结合 Bison 的终结符的优先级定义、左右结合定义来消除冲突。这也是 LR 文法的一大特点，诸如运算符表达式，可以简单
的通过运算符的优先级、结合性来解决，既简单也非常符合人类的思维习惯。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;YYNEWSTATE -&amp;gt; YYERRLAB( yyreportSyntaxError ) -&amp;gt; YYERRLAB1 (从 stack 中查找一个可以 shift error 的状态，将其后的输入输入作为 error 终结符)
-&amp;gt; YYNEWSTATE&lt;&#x2F;li&gt;
&lt;li&gt;需要注意，如果在 parse 过程中，已经完成了规约，但最后被 error 所覆盖，则之前规约的结果会被丢弃，因此，规约过程中应避免副作用的产生。
例如：对 &lt;code&gt;1 * 2 + hello\n&lt;&#x2F;code&gt; 这个输入， 在遇到 + 号时，会完成 expr(1) * expr(2) 的规约的，而后在 处理 expr &#x27;*&#x27; 之后，遇到 error，此时将&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对上述文法，以 &lt;code&gt;1 * 2 + hello\n&lt;&#x2F;code&gt; 为例：在 词法分析器不认识 hello 时，会产生一个 error token, 此时 解析器会从 stack(记录了从初始状态，每次经历一个
terminal&#x2F;nonterminal 到达当前的状态的全过程) 中查找到最近的一个支持 shift error 操作的状态，在这里，(#2:0 即 . error &#x27;\n&#x27; ) 状态是支持
shift error的，此时会把这个状态后的所有输入作为 error 重新压栈（原有的该状态后的栈被对应清楚）。直到下一个终结符为 &#x27;\n&#x27;， 此时会使用 #2 产生式进行规约，
实现错误的恢复。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;location&quot;&gt;Location&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;comments-chu-li&quot;&gt;Comments 处理&lt;&#x2F;h1&gt;
&lt;p&gt;AST 对语法结构来说，是一种很好的表示结构，但对源代码中的注释来说，则并不适合：注释可以出现在源代码中的任意位置，其不具有 AST 的语义结构，因此，如何在 AST 中表示
注释是一个挑战。&lt;&#x2F;p&gt;
&lt;p&gt;在 Parser 的过程中保留 Comments 在有些场景中是有必要的，在我们的 parser 中，有两个已知的应用场景：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对不符合标准的 SQL 语法，但需要在目标数据库中支持的 SQL语法，可以使用 &lt;code&gt;&#x2F;*@ @*&#x2F;&lt;&#x2F;code&gt; 的方式嵌入到 SQL 中。&lt;&#x2F;li&gt;
&lt;li&gt;可以在 SQL 中嵌入一些 hint，用于辅助目标数据库的性能优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们的处理方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器处理 comments，并作为 下一个 token 的 comments 属性，返回给 parser.（相当于每一个 token 都有一个 comments 属性）&lt;&#x2F;li&gt;
&lt;li&gt;在 产生式规约时：
&lt;ul&gt;
&lt;li&gt;如果第一个符号($1)是 terminal，则将 $1.comments 作为 Y 的 preComments&lt;&#x2F;li&gt;
&lt;li&gt;在产生式中的其他终结符，其注释可以挂载到其前 nonTerminal 的 postComments 或者其后 nonTerminal 的 preComments 上。&lt;&#x2F;li&gt;
&lt;li&gt;如果出现连续的 non terminal， 中间的注释将无法精确定位。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>simd 排序</title>
        <published>2024-11-18T00:00:00+00:00</published>
        <updated>2024-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/simd-sort/"/>
        <id>https://wangzaixiang.github.io/blog/simd-sort/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/simd-sort/">&lt;p&gt;最近，阅读了 &lt;a href=&quot;https:&#x2F;&#x2F;vldb.org&#x2F;pvldb&#x2F;vol8&#x2F;p1274-inoue.pdf&quot;&gt;SIMD- and Cache-Friendly Algorithm for Sorting an Array of Structures&lt;&#x2F;a&gt;
一文后，动手编写了一个 基于 SIMD 的排序算法，具体代码参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;vectorize_engine&#x2F;blob&#x2F;main&#x2F;poc&#x2F;vector_example1&#x2F;src&#x2F;bin&#x2F;test.rs&quot;&gt;SIMD Sort Test&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; file poc&#x2F;vector_example1&#x2F;src&#x2F;sort2.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; simd based sort u32x8 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sort_u32x8&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; u32x8) {
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; simd based sort u32x16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sort_u32x16&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; u32x16){
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; simd based sort u32x32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sort_u32x32&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; u32x32)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; simd based meger sort of 2 u32x16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;merge_sort_u32x16x2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; u32x16, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; u32x16) {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 基于 merge sort(sort_u32x32 + merge_sort_u32x16x2) 的排序实现，
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;作为对比，测试了 该算法与 Rust 标准库中的 &lt;code&gt;Slice::sort&lt;&#x2F;code&gt; 和 &lt;code&gt;Slice::sort_unstable&lt;&#x2F;code&gt; 的性能差异：（测试环境： M1-Max 64G）&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;数据量&lt;&#x2F;th&gt;&lt;th&gt;Slice::sort&lt;&#x2F;th&gt;&lt;th&gt;Slice::sort_unstable&lt;&#x2F;th&gt;&lt;th&gt;My SIMD sort&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;237 ns&lt;&#x2F;td&gt;&lt;td&gt;156 ns&lt;&#x2F;td&gt;&lt;td&gt;56 ns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;642 ms&lt;&#x2F;td&gt;&lt;td&gt;348 ns&lt;&#x2F;td&gt;&lt;td&gt;176 ns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;128&lt;&#x2F;td&gt;&lt;td&gt;1.156 us&lt;&#x2F;td&gt;&lt;td&gt;785 ns&lt;&#x2F;td&gt;&lt;td&gt;511 ns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;256&lt;&#x2F;td&gt;&lt;td&gt;2.454	us&lt;&#x2F;td&gt;&lt;td&gt;1.635 us&lt;&#x2F;td&gt;&lt;td&gt;1.255 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;512&lt;&#x2F;td&gt;&lt;td&gt;5.192	us&lt;&#x2F;td&gt;&lt;td&gt;3.488 us&lt;&#x2F;td&gt;&lt;td&gt;3.054 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1K&lt;&#x2F;td&gt;&lt;td&gt;10.857 us&lt;&#x2F;td&gt;&lt;td&gt;7.381 us&lt;&#x2F;td&gt;&lt;td&gt;7.382 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2K&lt;&#x2F;td&gt;&lt;td&gt;22.746 us&lt;&#x2F;td&gt;&lt;td&gt;15.638 us&lt;&#x2F;td&gt;&lt;td&gt;17.443 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4K&lt;&#x2F;td&gt;&lt;td&gt;47.517 us&lt;&#x2F;td&gt;&lt;td&gt;32.933 us&lt;&#x2F;td&gt;&lt;td&gt;40.407 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8K&lt;&#x2F;td&gt;&lt;td&gt;98.424 us&lt;&#x2F;td&gt;&lt;td&gt;69.258 us&lt;&#x2F;td&gt;&lt;td&gt;91.900 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16K&lt;&#x2F;td&gt;&lt;td&gt;203.153 us&lt;&#x2F;td&gt;&lt;td&gt;145.538 us&lt;&#x2F;td&gt;&lt;td&gt;205.371 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;32K&lt;&#x2F;td&gt;&lt;td&gt;420.905 us&lt;&#x2F;td&gt;&lt;td&gt;305.407 us&lt;&#x2F;td&gt;&lt;td&gt;455.912 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;64K&lt;&#x2F;td&gt;&lt;td&gt;870.353 us&lt;&#x2F;td&gt;&lt;td&gt;641.122 us&lt;&#x2F;td&gt;&lt;td&gt;999.676 us&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;128K&lt;&#x2F;td&gt;&lt;td&gt;1.809017	ms&lt;&#x2F;td&gt;&lt;td&gt;1.346237 ms&lt;&#x2F;td&gt;&lt;td&gt;2.180088 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;256K&lt;&#x2F;td&gt;&lt;td&gt;3.821495	ms&lt;&#x2F;td&gt;&lt;td&gt;2.797711 ms&lt;&#x2F;td&gt;&lt;td&gt;4.712874 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;512K&lt;&#x2F;td&gt;&lt;td&gt;8.038367	ms&lt;&#x2F;td&gt;&lt;td&gt;6.007526 ms&lt;&#x2F;td&gt;&lt;td&gt;10.383386 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1M&lt;&#x2F;td&gt;&lt;td&gt;16.589313	ms&lt;&#x2F;td&gt;&lt;td&gt;12.527798 ms&lt;&#x2F;td&gt;&lt;td&gt;22.416753 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2M&lt;&#x2F;td&gt;&lt;td&gt;38.806603	ms&lt;&#x2F;td&gt;&lt;td&gt;25.994612 ms&lt;&#x2F;td&gt;&lt;td&gt;47.795221 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4M&lt;&#x2F;td&gt;&lt;td&gt;78.304628	ms&lt;&#x2F;td&gt;&lt;td&gt;52.795861 ms&lt;&#x2F;td&gt;&lt;td&gt;100.198899 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8M&lt;&#x2F;td&gt;&lt;td&gt;169.534526 ms&lt;&#x2F;td&gt;&lt;td&gt;109.631584 ms&lt;&#x2F;td&gt;&lt;td&gt;211.116117 ms&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;由于3个算法都是基于 n*log(2, n) 的，因此，我对 t &#x2F; (n * log(2,n) 进行了归一化，对比如图：
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;simd-sort&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结论：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在 1K 以下时， SIMD sort 性能比 unstable sort 要更好。（数据量越小的场景，SIMD 版本提升越明显）。&lt;&#x2F;li&gt;
&lt;li&gt;在 16K 以下时， SIMD sort 性能比 stable sort 要更好，（同样，越小的场景，SIMD 版本提升越明显）&lt;&#x2F;li&gt;
&lt;li&gt;unstable sort 性能比 stable sort 要好20-30%。（而且不需要额外的空间）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;说老实话，得出这个结果有一点沮丧，也因此而翻阅了 rust sort 的文档和源码，了解了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Voultapher&#x2F;driftsort&quot;&gt;driftsort&lt;&#x2F;a&gt;
的设计思路，大概得出如下的结论：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;driftsoft 内部有大量基于实际经验的优化（比如对少于20个元素的场景进行插入排序），部份函数也支持 auto vectorization。作为 rust 核心库精心
挑选的算法，要想打败它，还是有相当挑战的。&lt;&#x2F;li&gt;
&lt;li&gt;二分排序法也是 stable 的，因此，和 Slice::sort 对比更合适一些。在16K 以下场景时，SIMD 版本还是有领先优势的。所以输的不算太难看。&lt;&#x2F;li&gt;
&lt;li&gt;仔细分析了为什么 SIMD 版本没有预期的好，主要的原因是在 merge sort 部分，SIMD 对新增的每轮 merge 的开销基本上在 1.3-1.4ns&#x2F;元素，而
quick sort(driftsoft的核心算法)在 0.5-0.8ns。 我推测的原因是， quick sort 在 进行 pivot partition 时，可以利用到当前数据的局部有序性，
而仅 move 更少的元素，而 merge sort 则每次都需要 move 全部的元素，未能利用到数据的局部有序性。&lt;&#x2F;li&gt;
&lt;li&gt;这也颠覆了我之前的认知：我一直以为二分排序法 与 快速排序法，具有相同的时间复杂度，因此，他们的性能应该是一致的。但实际上，quick sort 还是更快一些。
（当然，在不追求 stable 的情况下，也可以减少额外的内存需求。stable sort 和 二分排序法，都需要 N&#x2F;2 的辅助内存用于交换。）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;其它：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在进行 ns 级的性能优化时，很容易陷入到过早优化的细节中，在进行这个实验过程中，我刚开始也陷入到过早优化的困惑中，后面果断放弃，先完成代码，再利用
samply 等 profile 工具进行性能对比，最后分析出性能瓶颈，最后发现，你可以充分的信赖 rust 的编译器优化，而最后的性能问题，只会时数据结构上的问题，
譬如，在这里，就是 merge sort 阶段的数据局部性的问题。&lt;&#x2F;li&gt;
&lt;li&gt;后续可以对比 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;intel&#x2F;x86-simd-sort&#x2F;blob&#x2F;main&#x2F;src&#x2F;README.md&quot;&gt;intel x86-simd-sort&lt;&#x2F;a&gt; 这个项目， 对比一下 intel 的解决方案（quick sort版本），
在这个基础上，可以评估编写一版 simd 的 quick sort。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>November 2024</title>
        <published>2024-11-01T00:00:00+00:00</published>
        <updated>2024-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2024-11/"/>
        <id>https://wangzaixiang.github.io/monthly/2024-11/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2024-11/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mapotofu.org&#x2F;blogs&#x2F;rabitq-bench&#x2F;&quot;&gt;Improve an algorithm performance step by step&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 samply 工具收集性能数据&lt;&#x2F;li&gt;
&lt;li&gt;使用 criterion 库进行性能测试&lt;&#x2F;li&gt;
&lt;li&gt;metrics 采集&lt;&#x2F;li&gt;
&lt;li&gt;编译选项：例如 &lt;code&gt;RUSTFLAGS=&quot;-C target-feature=+popcnt&quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SIMD 加速，如果算法可以调整为 SIMD 优化的算法，加速效果会很明显。&lt;&#x2F;li&gt;
&lt;li&gt;选择更好的库： faer&lt;&#x2F;li&gt;
&lt;li&gt;IO 优化&lt;&#x2F;li&gt;
&lt;li&gt;const generics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;simd-stable-rust&#x2F;&quot;&gt;Using portable SIMD in stable Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;延续：&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2024-10&#x2F;#Languages&quot;&gt;October 2024&lt;&#x2F;a&gt; 中 faster Mandelbrot with SIMD  一文&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;本文介绍了：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 wide 这个库，在 stable rust 中使用 SIMD 的方法。 （可以了解一下 wide 是如何通过 safe_arch 这个库来处理多平台架构的
支持的）。&lt;&#x2F;p&gt;
&lt;p&gt;按照本文的测试，wide的性能相比 portable-simd 要慢一些，但比 scalar 的版本还是有成倍的提升。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 pulp 库，这个库是一个 high level SIMD abstraction. 也是 stable rust 的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=M8dpH3rO-2M&quot;&gt;Runtime Scripting for Rust Applications&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;dl.korz.dev&#x2F;eurorust2024.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python.  PyO3(Rust bindings for Python) &#x2F; RustPython(a interpreter written in Rust)&lt;&#x2F;li&gt;
&lt;li&gt;Lua:  lightweight.(355k lua vs 25M cpython vs 37m V8) &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mlua-rs&#x2F;mlua&quot;&gt;mlua bindings to rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;JavaScript
&lt;ul&gt;
&lt;li&gt;V8: &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;v8&quot;&gt;rusty_v8r&lt;&#x2F;a&gt; , deno_core, deno_ast, deno_runtime&lt;&#x2F;li&gt;
&lt;li&gt;JavaScriptCore: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wasmerio&#x2F;rusty_jsc&quot;&gt;rusty_jsc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;endoli&#x2F;javascriptcore.rs&quot;&gt;jsc.rs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SpiderMonkey: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;mozjs&quot;&gt;mozjs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;WASM&lt;&#x2F;li&gt;
&lt;li&gt;rhai: AST-interpreter, dynamic typed&lt;&#x2F;li&gt;
&lt;li&gt;mun:  AOT, static typed, hot reloading. LLVM based&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;a deep dive into the bun architecture&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;makwritinghouse.com&#x2F;bun&#x2F;a-deep-dive-into-the-bun-architecture-part-1&#x2F;&quot;&gt;part 1&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;core layer(using C&#x2F;Zig): managing JS runtime, the native HTTP server, and the file system.&lt;&#x2F;li&gt;
&lt;li&gt;API layer(using js).
目前没有后续的文章。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;bun 1.1.34 支持 Wasm GC，dart&#x2F;kotlin&#x2F;scalajs 等可以编译为 wasm 的语言都可以使用 bun 了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brisa.build&quot;&gt;brisa&lt;&#x2F;a&gt;
简单的浏览了一下这个项目，有一下特色：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;核心: 两个组件模型：Server Component, Client Component。
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Server Component: 运行在 Server 端的 JS 组件，概念和 JSF(Java Server Faces)、&lt;a href=&quot;https:&#x2F;&#x2F;tapestry.apache.org&quot;&gt;Tapestry&lt;&#x2F;a&gt; 很相似。
若干年前，tapestry 曾是我的最爱。不过，brisa 是基于 JavaScript 的服务端组件，使用 JSX 的语法，似乎比 tapestry 更简单。当然，使用 JSX
来描述服务端的组件，在服务端处理事件，从server端更新状态到 client 端，整个的编程模型还是有些别扭的。&lt;&#x2F;p&gt;
&lt;p&gt;JSF、Tapestry等服务端 UI 组件模型，随着 前端组件技术的兴起，已经逐步退出历史舞台。brisa 把这个概念重新拾起，我个人感觉意义不大。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Client Component: 基于 Web Component 的前端组件，brisa 的前端组件，整体与 SolidJS、Svelte 等相似。一个比较好的点是，brisa 支持
Web Component 的 SSR， 也就是在一个 Server Component 中，可以嵌入 Client Component，这个 Client Component 会先SSR. 相当于初始化
过程可以在服务端完成。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个挑战：SSR 和 CSR 混合使用时，CSR 是如何将动态数据与 Declarative Shadow DOM 结合的？brisa 在这方面似乎比 Lit SSR 做的更优雅一些。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;约定而非配置。这使得应用变得非常简单。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Web Components UI Library&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shoelace.style&quot;&gt;Shoelace&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sap.github.io&#x2F;ui5-webcomponents&#x2F;blog&#x2F;releases&#x2F;announcing-v2&#x2F;&quot;&gt;SAP UI5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;momentum-design&#x2F;momentum-ui&#x2F;tree&#x2F;master&#x2F;web-components#:~:text=lit-element&quot;&gt;Cisco Momentum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opensource.adobe.com&#x2F;spectrum-web-components&#x2F;components&#x2F;underlay&quot;&gt;Adobe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crayons.freshworks.com&quot;&gt;Stencil Components&lt;&#x2F;a&gt; Build with Stencil.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vaadin.com&#x2F;docs&#x2F;latest&#x2F;components&quot;&gt;Vaadin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.salesforce.com&#x2F;docs&#x2F;component-library&#x2F;overview&#x2F;components&quot;&gt;Sale Force&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下库目前处在未维护、更新状态&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;elix&#x2F;elix&quot;&gt;Elix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hope-ui.netlify.app&quot;&gt;Hope UI&lt;&#x2F;a&gt; 被 pigment 替代，但目前尚未发布&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;material-components&#x2F;material-components-web&quot;&gt;MWC&lt;&#x2F;a&gt; mwc is in maintenance mode.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>关于软件复杂性</title>
        <published>2024-10-07T00:00:00+00:00</published>
        <updated>2024-10-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/complexity/"/>
        <id>https://wangzaixiang.github.io/blog/complexity/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/complexity/">&lt;p&gt;复杂性是软件开发中最为核心的问题，绝大多数的创新，包括方法论、工具、框架、编程语言等，都可以说是为了应对复杂性的挑战而产生的。众多软件产品、
项目往往消耗巨大的人力、财力，在解决项目中因复杂性带来的维护、BUG、安全问题上。本文收集了一些关于软件复杂性的观点，并叠加了一些个人的思考。&lt;&#x2F;p&gt;
&lt;p&gt;本文主要参考：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;milkov.tech&#x2F;assets&#x2F;psd.pdf&quot;&gt;A Philosophy of Software Design&lt;&#x2F;a&gt; 中文版：&lt;a href=&quot;https:&#x2F;&#x2F;yingang.github.io&#x2F;aposd2e-zh&#x2F;&quot;&gt;软件设计的哲学&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Chapter 2: The Nature of Complexity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1467587&#x2F;&quot;&gt;The Art of UNIX Programming&lt;&#x2F;a&gt; 中文版：Unix编程艺术 (微信读书上有电子书)
&lt;ul&gt;
&lt;li&gt;Chapter 13: Complexity, As Simple As Possible, but No Simpler.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rust for Rustaceans
&lt;ul&gt;
&lt;li&gt;Chapter 3: Design Interfaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;1-fu-za-xing&quot;&gt;1. 复杂性&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;fu-za-xing-de-ding-yi&quot;&gt;复杂性的定义&lt;&#x2F;h2&gt;
&lt;p&gt;在&lt;code&gt;软件设计的哲学&lt;&#x2F;code&gt;一书中，对复杂性进行了如下定义：&lt;code&gt;软件的复杂性是指那些让系统难以理解的部份&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;难以理解：当出现问题时，难以找到问题的原因，对系统的行为难以预测。&lt;&#x2F;li&gt;
&lt;li&gt;难以修改：无论是添加新功能、修复BUG、优化性能，无从下手，改不动，或者修改完后引入更多的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这两个问题是相互关联的，因为难以理解（无法理解其结构、流程、算法），会导致难以修改。而因为难以修改，会导致在维护的过程中，引入更多的补丁，导致
系统更为复杂，可理解能力持续下降。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fu-za-xing-de-zhu-yao-zheng-zhuang&quot;&gt;复杂性的主要症状&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;变更放大：对系统的一个小变更，会导致系统中的多个地方进行修改，例如，在一个网站中，修改 banner 的内容、颜色，可能会导致多个页面的修改。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根源之一：重复。多个模块存在相同、相似的逻辑。当存在重复的代码、逻辑时，修改就会蔓延。&lt;&#x2F;li&gt;
&lt;li&gt;根源之二：耦合：当一个模块发生变更时，会辐射到其他模块，然后继续辐射，最后形成一个巨大的变更范围。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Macro 是应对重复代码的一种方式。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;认知负荷：开发人员需要掌握多少知识，才能完成一个任务（例如调用接口、完成某个功能）。理论上，每个功能的实现，深究下去，就会涉及到计算机科学的
各个领域，例如：操作系统、网络、数据库、编译原理、算法等，可以制造出无穷的复杂性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根源之一：缺少封装，暴露了太多的细节，加深了外部的认知负担。&lt;&#x2F;li&gt;
&lt;li&gt;根源之二：缺少抽象。把众多功能特性混合在一起，构成一个 macro 模块。&lt;&#x2F;li&gt;
&lt;li&gt;根源之三：不一致性。 对软件产品而言，UI、文档的不一致性会带给用户认知负担。对软件代码而言，命名、接口、行为的不一致性性，会带给维护人员
理解代码的认知负担。不一致性与重复是密切相关的，重复会带来不一致性。&lt;&#x2F;li&gt;
&lt;li&gt;根源之四：不符合直觉、惯例的设计。每个语言、框架，都有其自己形成的惯用法，最佳实践。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;未知的未知（不确定性）。在庞大的认知负荷之下，是不确定性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;缺乏契约定义（边界不明确）：对输入、输出的边界、约束、规范没有明确的定义。
&lt;ul&gt;
&lt;li&gt;语义不清晰。接口的行为，讲不清楚，自然实现就考虑不到，也无法进行测试覆盖。&lt;&#x2F;li&gt;
&lt;li&gt;不可证明性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;不完备性。系统的行为是否能覆盖契约（边界内）的全部场景，有哪些不能覆盖的场景是未知的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fu-za-xing-de-fen-lei&quot;&gt;复杂性的分类&lt;&#x2F;h2&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;img.a692be447cc4c1ba.png&quot; &#x2F;&gt;
&lt;p&gt;在&lt;code&gt;UNIX编程艺术&lt;&#x2F;code&gt;一书中，将复杂度分为3类、3个来源：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;复杂度种类：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;本质复杂度：问题领域自身的复杂性。&lt;&#x2F;li&gt;
&lt;li&gt;选择复杂度：与目标需求相关的复杂性，只能通过改变工程的目标来改变复杂度。&lt;&#x2F;li&gt;
&lt;li&gt;偶然复杂度：可以通过良好的设计、过程来改善的复杂度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;复杂度来源之一：代码复杂度：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UNIX编程艺术&lt;&#x2F;code&gt;一书中，认为：&quot;代码的缺陷密度，每百行代码出错率，往往是一个与实现语言种类无关的常量。更多行的代码意味着更多的 bug，
而调试常常是开发中最昂贵、最耗时的部分。&quot;，这种说法放到今天，我觉得是不正确的了：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码行数仅是复杂度的一个指标，但相同行数的代码，仍然会有不同的复杂度，甚至差异很大。例如圈复杂度，加入了对分支路径的
复杂度评估。在这方面，函数式编程语言（如Scala） 相比 过程式编程语言（Java）来说，有着显著的优势。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代码行数&lt;&#x2F;li&gt;
&lt;li&gt;圈复杂度（分支、路径）：FP 通过高阶函数减少了分支，降低了数据复杂度。&lt;&#x2F;li&gt;
&lt;li&gt;数据流复杂度。FP 的数据不变性，形成了 SSA(Static Single Assignment) 形式，降低了数据流复杂度。&lt;&#x2F;li&gt;
&lt;li&gt;功能密度：更高级的语言、更良好的抽象，也会带来更高的功能密度。一行代码就可以等效于低级语言、低级抽象的多行代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;复杂度来源之二、之三： 接口复杂度&#x2F;实现复杂度&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MIT &#x2F; New Jersey 风格&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UNIX编程艺术&lt;&#x2F;code&gt;一书中提到的 MIT 哲学，侧重于 接口的简单性，而 &quot;New Jersey&quot; 哲学，则侧重于实现的简单性。书中也提到 UNIX 的哲学是偏向于
接口的简单性，以及处理 signal 的风格，System V 则是偏向于实现的简单性，而 BSD 偏重于接口的简单性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Simple vs Easy
&lt;a href=&quot;http:&#x2F;&#x2F;www.lihaoyi.com&#x2F;post&#x2F;comlihaoyiScalaExecutablePseudocodethatsEasyBoringandFast.html&quot;&gt;Executable Pseudocode that&#x27;s Easy, Boring, and Fast&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可执行的伪代码。核心就是面向阅读的高可阅读性的代码。需要经常挑战的是：要完成这段功能，还可以更简单吗？&lt;&#x2F;li&gt;
&lt;li&gt;Easy not simple: 这里 Easy 是对使用者而言的。接口简单，才能让使用者更容易使用，simple 是对实现者而言的。&lt;&#x2F;li&gt;
&lt;li&gt;Boring not interesting: 作者的意思是不要搞大而全的框架，而是聚焦于一个领域，做好一个小而美的工具。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matthiasn&#x2F;talk-transcripts&#x2F;blob&#x2F;master&#x2F;Hickey_Rich&#x2F;SimpleMadeEasy.md&quot;&gt;Simple made easy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;早期教条的 UNIX 哲学：宁可放弃功能，也不能放弃简单性。 CLI 与 GUI 之战，就是这种哲学的体现。这也是典型的“因为脏水而丢掉孩子”的做法。
&lt;code&gt;软件设计的哲学&lt;&#x2F;code&gt;一书中列举了 ed、vi、sam、emacs、wily 等文本编辑器的演进历程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;软件设计的哲学&lt;&#x2F;code&gt;一书中，更是提出了 “Deep Module” 的设置哲学，即强调：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;接口设计应当 smaller and simpler，从而减少依赖复杂度，认知复杂度。&lt;&#x2F;li&gt;
&lt;li&gt;模块内部的实现，应该 deep，即包含更多的功能，隐藏更多的细节。而避免 proxy&#x2F;adapter 这种浅层模块。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;fu-za-xing-de-du-liang&quot;&gt;复杂性的度量&lt;&#x2F;h2&gt;
&lt;p&gt;待补充&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-ru-he-jiang-di-jie-kou-fu-za-xing&quot;&gt;2 如何降低接口复杂性&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2-1-design-by-contract-zeng-qiang-jie-kou-de-que-ding-xing&quot;&gt;2.1 Design By Contract: 增强接口的确定性&lt;&#x2F;h2&gt;
&lt;p&gt;设计契约（Design by Contract）是一种软件设计方法，由 Bertrand Meyer 在 1986 年提出。Meyer 甚至创建了一门语言：Eiffel。Eiffel 语言的最大特征
就是内置了对 Contract 的支持，将 DBC 从约定变为显式的编程构件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;eiffel&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-eiffel &quot;&gt;&lt;code class=&quot;language-eiffel&quot; data-lang=&quot;eiffel&quot;&gt;&lt;span&gt;note
&lt;&#x2F;span&gt;&lt;span&gt;    description: &amp;quot;Simple bank accounts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;class
&lt;&#x2F;span&gt;&lt;span&gt;    ACCOUNT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;feature -- Access
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    balance: INTEGER
&lt;&#x2F;span&gt;&lt;span&gt;            -- Current balance
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    deposit_count: INTEGER
&lt;&#x2F;span&gt;&lt;span&gt;            -- Number of deposits made since opening
&lt;&#x2F;span&gt;&lt;span&gt;        do
&lt;&#x2F;span&gt;&lt;span&gt;            ... As before ...
&lt;&#x2F;span&gt;&lt;span&gt;        end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;feature -- Element change
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    deposit (sum: INTEGER)
&lt;&#x2F;span&gt;&lt;span&gt;            -- Add `sum&amp;#39; to account.
&lt;&#x2F;span&gt;&lt;span&gt;        require
&lt;&#x2F;span&gt;&lt;span&gt;            non_negative: sum &amp;gt;= 0
&lt;&#x2F;span&gt;&lt;span&gt;        do
&lt;&#x2F;span&gt;&lt;span&gt;            ... As before ...
&lt;&#x2F;span&gt;&lt;span&gt;        ensure
&lt;&#x2F;span&gt;&lt;span&gt;            one_more_deposit: deposit_count = old deposit_count + 1
&lt;&#x2F;span&gt;&lt;span&gt;            updated: balance = old balance + sum
&lt;&#x2F;span&gt;&lt;span&gt;        end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;feature {NONE} -- Implementation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    all_deposits: DEPOSIT_LIST
&lt;&#x2F;span&gt;&lt;span&gt;            -- List of deposits since account&amp;#39;s opening.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;invariant
&lt;&#x2F;span&gt;&lt;span&gt;    consistent_balance: (all_deposits &#x2F;= Void) implies
&lt;&#x2F;span&gt;&lt;span&gt;            (balance = all_deposits . total)
&lt;&#x2F;span&gt;&lt;span&gt;    zero_if_no_deposits: (all_deposits = Void) implies
&lt;&#x2F;span&gt;&lt;span&gt;            (balance = 0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;end -- class ACCOUNT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;DBC 只要由三个部份组成：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;前置检查：一般是接口调用者需要保障的部份（调用者的职责）。当然，对于很多服务处理来说，前置检查也成为是服务提供者的责任。不过，一些基本的类型层面
的检查，更加建议直接通过强类型的方式来实现，在框架层进行检查，避免让服务提供者处理这类低层次的检查工作。&lt;&#x2F;li&gt;
&lt;li&gt;后置检查。后置检查是服务提供者在完成服务处理后，所需进行的必要检查，确保自身处理的正确性。&lt;&#x2F;li&gt;
&lt;li&gt;不变量。不变量是一类对象的基础契约，无论进行何种操作，都不应该破坏这种契约。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;现在，主流的编程语言，都没有对 DBC 的语言级显示支持，而改为使用 assert 机制来提供部份的 DBC 能力。作为接口设计的一部份，为接口（方法、对象）提供
明确的契约定义，这应该成为设计的一部份：具备清晰、良好的契约定义的接口、对象，会有更加确定的边界。而反之，缺乏契约定义的接口、对象，很可能会产出
不清晰的职责、不确定的边界，以及在 life time 中产生脏数据，从而使得后续的行为变得更为不可琢磨。&lt;&#x2F;p&gt;
&lt;p&gt;以 RDBMS 为例，其提供了 table&#x2F;column 级上的很多 constraint：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;unique index 保证了数据的唯一性，防止重复数据。&lt;&#x2F;li&gt;
&lt;li&gt;not null 防止 null 数据进入。&lt;&#x2F;li&gt;
&lt;li&gt;check 约束，保证数据的合法性。部份数据库可以定义一些列上的校验表达式。如 &lt;code&gt;CHECK (AGE &amp;gt;= 18)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;foreign key：引用完整性。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在能使用这些场景的地方，应该优先使用数据库的约束，而不是在应用层进行约束。不过，对很多互联网应用来说，由于分库分表等物理部署的约束，会限制使用
foreign key，那么也需要在应用层有相应的应对措施，避免脏数据进入系统。脏数据进入系统，本身就以为着系统存在严重的 bug，更会导致后续复杂的处理、
以及带来更多不确定的 BUG，从而使得复杂性恶化，是需要尽可能提前治理的。&lt;&#x2F;p&gt;
&lt;p&gt;Contract&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可以作为文档的一部份，为接口的使用者提供价值，&lt;&#x2F;li&gt;
&lt;li&gt;可以作为测试的一部份，在测试阶段、试运行阶段，作为接口的内部保护器。&lt;&#x2F;li&gt;
&lt;li&gt;如果不是性能关切的，应该在运行期间进行必要的契约检查。如果某些契约检查有较高的性能成本，则可以考虑异步、批量的方式进行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;2-2-wai-xiang-she-ji-mian-xiang-shi-yong-zhe-de-she-ji&quot;&gt;2.2 外向设计(面向使用者的设计)&lt;&#x2F;h2&gt;
&lt;p&gt;对接口设计 和 模块实现之间的平衡和取舍，有两种说法是很生动、有趣的：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个糟糕的实现，如果隐藏在一个良好的接口后面，这个糟糕的实现是可以接受的。（这也是敏捷、迭代、TDD、prototype 等方法论的基础）&lt;&#x2F;li&gt;
&lt;li&gt;软件设计应该是外向的（面对使用者进行设计），而不是内向的（面向实现细节进行设计）：把简单（Easy）留给用户，把复杂(Complex)留给自己。&lt;&#x2F;li&gt;
&lt;li&gt;UI(User Interface) 与 API(Application Programming Interface) 两者都是 interface，其设计哲学有诸多相似之处。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我在实际工作中，看到的大部份的开发者，总是习惯于内向的风格：我要如何实现这个功能。这样做会设计出糟糕的接口（缺乏抽象、使用不方便），进而又
导致内部模块的抽象度不够（做一个好的抽象是有难度的，内向的设计风格会使得我们先避开局部的复杂性，而简化接口），导致实现的整体复杂度增加。而
转为外向的风格时，我们会优先从使用者的角度来设计接口，让接口更为简单、自然、清晰。这需要更多的抽象，也需要考虑更多宏观的问题。TDD 就是一种外向
的设计风格。&lt;&#x2F;p&gt;
&lt;p&gt;对实现的复杂度，我们可以：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过迭代的方式来实现，在前期，先实现一个简单的版本，或者某个原型实现。&lt;&#x2F;li&gt;
&lt;li&gt;在后续迭代中，逐步深化抽象、分拆化、正交化，将复杂度逐步降低。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;随着技术的演进，今天需要转移到调用者的复杂性，未来可能会变得简单。例如，异步处理的方式，就从最早的 callback 模式，演进到 Future&#x2F;Promise，
再到 async&#x2F;await 模式，每一步都是将复杂性从调用者转移到实现者。&lt;&#x2F;p&gt;
&lt;p&gt;当然，在有的时候，平衡是必须的：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接口设计的简单性，并不是一件容易的事情，需要有很好的抽象能力。有时这种能力必须建立在目标领域的深入理解、丰富经验之上。在对目标领域不够理解
的情况下，很难做出简单、优雅的接口设计。 所以，有时，还是需要快速前进，等踩了坑之后，你才会知道正确的设计是什么。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在部份场景下，接口的简单性会带来过高成本的实现复杂度（可能是受当前的技术、资源限制，难以突破），或者追求接口的简单性，会带来严重的性能损失，
在这种情况下，做必要的妥协是有价值的。（&lt;code&gt;UNIX编程艺术&lt;&#x2F;code&gt;一书中列举了系统调用中对无法屏蔽的中断的处理方式，以及 www 中对 404-Not Found 的处理方式
就是将一定的复杂性从实现者转移到调用者去的很好案例。）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-3-yi-xie-jie-kou-she-ji-de-yuan-ze&quot;&gt;2.3 一些接口设计的原则&lt;&#x2F;h2&gt;
&lt;p&gt;本节内容参考 RustforRustaceans 一书第3章：Design Interfaces，是对本章内容的一个很好的注脚。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unsurprising: 降低认知负荷。已经形成的惯例(idiom)、习惯的命名、基础类型（common traits）设计模式、风格，自身的合理性得到了时间的检验，
也因为更多的人熟悉、更丰富的文档、 更多的使用案列而减少认知负荷。&lt;&#x2F;p&gt;
&lt;p&gt;已有的管理、模式并非不能打破，但打破时，需要有充分的理由，而不是为了追求新奇。如果你不了解、不理解已有的模式，那么所谓的创新，很可能是低水平的
重复，既没有提供新的价值，又增加了认知负荷。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Flexible: 设计一些通用的接口，提高代码的可复用性。基于接口，而非具体实现，使用 generic, 使用更具抽象的类型，而非具体化类型，从而增加接口的灵活性。
很多语言都为 Flexible 提供了支持，例如：Rust 的 trait, Java 的 interface, C++ 的 template, Scala的 Context Bound 等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Obvious: 通过注释、文档、类型体系、都可以提供更为明确的接口信息，从而降低认知负荷。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Constrainted：提高确定性。强类型体系、前置条件，后置条件，不变量、断言等，对接口进行约束，提高了接口的确定性。&lt;&#x2F;p&gt;
&lt;p&gt;DBC(Design by Contract) 就是特别针对 Constrainted 的一种设计方法。有良好 DBC 实践的设计一般都会有更好的质量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;3-chai-fen-jiang-di-shi-xian-fu-za-du&quot;&gt;3. 拆分：降低实现复杂度&lt;&#x2F;h1&gt;
&lt;p&gt;排序算法是很有意思的算法，从最简单的冒泡排序 O(n^2) 到快速排序 O(n log(n))，其中的核心思想就是分拆，将一个大的问题分拆成小的问题，然后再组合。
在这里，当问题分解到足够小时，它就变得简单了（衍生的问题是组合的成本）。软件的复杂性或许也是如此，其复杂度与内部规模的平方成正比，通过分拆后可以转化为
准线性的增长。&lt;&#x2F;p&gt;
&lt;p&gt;拆分的核心都是围绕：解耦、内聚来进行的：减少模块间的耦合，强化模块内的聚合。&lt;&#x2F;p&gt;
&lt;p&gt;三种层次的拆分：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;模块拆分（包、类、方法）：源代码层面&lt;&#x2F;li&gt;
&lt;li&gt;组件化：COM 是组件化的经典案例。&lt;&#x2F;li&gt;
&lt;li&gt;部署拆分：微服务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一些常见的拆分方法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;按照领域拆分（水平拆分）：微服务：遵照康威定律，将组织结构映射到系统架构上，将不同的业务功能拆分成不同的服务。&lt;&#x2F;li&gt;
&lt;li&gt;按照层次拆分（垂直拆分）：前端接口层、业务流程层、业务核心层（原子服务）、数据访问层、数据存储层。&lt;&#x2F;li&gt;
&lt;li&gt;业务与技术拆分（基础设施拆分）：基础服务、服务治理、数据目录等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;img_1.1e1a4c476bcf1eb4.png&quot; &#x2F;&gt;
附一张我之前对分层、分领域，易变形相关的思考图。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-1-yuan-ze-zheng-jiao-hua-chai-fen&quot;&gt;3.1 原则：正交化拆分&lt;&#x2F;h2&gt;
&lt;p&gt;正交化：将分拆后的模块，在职责上进行正交化，避免重复的职能。正交化的最佳案列之一就是 WEB 的三个模块：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HTML（DOM）：负责内容&lt;&#x2F;li&gt;
&lt;li&gt;CSS：负责样式&lt;&#x2F;li&gt;
&lt;li&gt;JavaScript：负责行为&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;WEB 之前的 WFC&#x2F;Motif 等应用中， DOM 与 CSS 是高度混合的，我写过那种代码，相比 WEB 的开发方式，代码量要大一个数量级，是非常痛苦的，
大大的限制了 GUI 应用的开发效率。&lt;&#x2F;p&gt;
&lt;p&gt;正交化设计是一种艺术，在&lt;code&gt;UNIX编程艺术&lt;&#x2F;code&gt;中，提到的一个词是 SPOT(Single Point of Truth)：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员修炼之道（The Pragmatic Programmer) 针对一类特别重要的正交性明确提出了一条原则：不要重复自身 Don&#x27;t Repeat Yourself，意思
是说：任何一个知识点在系统内部应当有一个唯一、明确、权威的表述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;正交化设计的另外一些场景： 将业务性代码 与 技术性代码（如任务调度、任务编排）等进行正交化。（在我们进行数据处理的 ETL 中，
就应用到这个拆分，从而大大的简化系统），一般的，业务性代码与业务需求之间有直接的映射关系，易变性强，但技术难度并不大，而技术性代码则具有
更好的通用性，可以应用于不同的业务场景，但其技术挑战性高。将这二者进行分拆，整个系统的复杂性就大为降低。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对复杂的系统，我们应该对业务进行抽象，将非业务性的功能从业务中分离出来。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;3-2-chai-fen-ye-wu-xing-gong-neng-yu-ji-shu-xing-gong-neng&quot;&gt;3.2 拆分：业务性功能与技术性功能&lt;&#x2F;h2&gt;
&lt;p&gt;在我们的某个开发项目中，涉及到一个 数据ETL 的任务，这里涉及到数据的加工处理，也涉及到多个任务之间的依赖关系处理，再牵涉到一些偏技术性的需求，
诸如并发（关注TPS、RTT指标）、监控、限流、任务取消（取消任务时释放资源）等，一开始整个任务实现得非常复杂，而且，在技术性需求的处理上很难达到预期。&lt;&#x2F;p&gt;
&lt;p&gt;对这个任务而言，本身有两方面的复杂性：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;业务复杂性：如何正确的处理 ETL 自身。这个是这个任务的重点，有其自有的复杂性（本质复杂度）。&lt;&#x2F;li&gt;
&lt;li&gt;技术复杂性：调度、编排、并发、分布式锁、监控、限流、任务取消。单单任务取消这一项，就有很大的技术挑战：因为我们的产品需要适配 30+ 的数据库，
在取消任务时，是否可以终止 SQL 的执行，从而避免这些重的 SQL 操作继续执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;将这两个复杂度揉在一起，最后会导致显著的复杂性提升，以至于第一版是一个糟糕的实现：既复杂，又难以达成需求目标，通过将业务、技术性需求分离后，两部份
功能都回归到各自的本质复杂度领域，选择合适的解决方案，最终得以简化。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-3-dsl-shi-yong-dsl-jiang-di-fu-za-xing&quot;&gt;3.3 DSL: 使用 DSL 降低复杂性&lt;&#x2F;h2&gt;
&lt;p&gt;对复杂的系统，要善于定义 DSL，建立 Domain Specific Language，使用描述式的语言，来定义 what 而非 how。实际上，DSL 语言本身
就意味着我们完成了对复杂系统的抽象，将复杂的行为转换成了更高阶抽象的描述，从而抓住了复杂之中的本质。大部份的 DSL 语言都是对某个特定复杂
领域的有效抽象：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SQL：对关系型数据库的操作抽象&lt;&#x2F;li&gt;
&lt;li&gt;工作流：对任务编排的抽象&lt;&#x2F;li&gt;
&lt;li&gt;React&#x2F;Vue: 通过类 JSX 或 template 的方式，对 UI 进行抽象（注意这里的描述性，而非操作性）。&lt;&#x2F;li&gt;
&lt;li&gt;Makefile&#x2F;Maven&#x2F;SBT&#x2F;Cargo: 对项目构建的抽象&lt;&#x2F;li&gt;
&lt;li&gt;IDL: 对接口定义的抽象&lt;&#x2F;li&gt;
&lt;li&gt;Regular Expression: 对字符串匹配的抽象&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果能够定义出 DSL，并用于描述系统的逻辑行为时，系统的复杂性会大为降低。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-4-yi-bian-xing-volatility-chai-fen&quot;&gt;3.4 易变性(Volatility)拆分&lt;&#x2F;h2&gt;
&lt;p&gt;每个复杂的系统，都有一些部件是易变的：会随着时间、空间的变化而演变，其自身具有不稳定性。一般来说，易变性的部件，是导致系统复杂性提升的重要原因。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对 SAAS 类应用，为不同的客户提供不同的功能。例如，零售系统针对不同的业态提供不同的服务模式。&lt;&#x2F;li&gt;
&lt;li&gt;对 电商类应用，随着业务模式的改变，会有不同的客户服务策略、营销策略、会员策略等。&lt;&#x2F;li&gt;
&lt;li&gt;对 OLAP 类应用，需要接入不同的数据源，面对不同数据源之间对 SQL 支持的差异。&lt;&#x2F;li&gt;
&lt;li&gt;对 Dashboard 类应用，需要面对不同的数据展示需求&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对这类系统，我们就需要重点关注如何抽象这一类易变性的部件，将其与稳定性的部件进行分拆，从而实现系统的简化，否则就会陷入“Copy + Modify” 的
模式，最终形成多个完全不同的系统，维护成本会大大增加。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;a href=&quot;https:&#x2F;&#x2F;rightingsoftware.org&quot;&gt;Right Software&lt;&#x2F;a&gt; 一书中，提到了避免功能性的分解，而是基于易变性的分解。
&lt;a href=&quot;https:&#x2F;&#x2F;seccl.tech&#x2F;guides&#x2F;designing-for-change&#x2F;&quot;&gt;Design for change&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;动静分离，以静为干，以动为支。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;动态流程：基于原子性的操作，将流程的动态部份提取出来，配合脚本引擎（Script）的方式来实现动态流程。script 可能是 effect 或者 pure的。&lt;&#x2F;li&gt;
&lt;li&gt;动态规则：引入类似于规则引擎的机制，来解决规则的动态行。一个规则可以简单抽象为一个 f:  input -&amp;gt; boolean (pure)&lt;&#x2F;li&gt;
&lt;li&gt;动态策略：类似于动态规则， f: input -&amp;gt; output (pure)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;引入动态以后，整个系统的复杂性会提升，质量的管控变得更为重要，因应的措施包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;动态治理：包括监控、熔断限流、报表等&lt;&#x2F;li&gt;
&lt;li&gt;加强契约化，尤其是 invariants 的管理，防止核心数据出现脏数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;从复杂性中识别出哪些是稳定的、静态的内容。老子曰：重为轻根，静为躁君。在复杂的系统中，我们需要将那些稳定的、静态的内容提取出来，形成一个稳定
的主干。这一条其实与上一条：易变性拆分是相辅相成的。易变性拆分是将易变的部件提取出来，而动静分离则是将稳定的部件提取出来。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-5-ying-yong-solid-yuan-ze-jin-xing-chai-fen&quot;&gt;3.5：应用 SOLID 原则进行拆分&lt;&#x2F;h2&gt;
&lt;p&gt;SOLID 原则是对软件设计的五个基本原则的总称：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;S: 单一职责原则（Single Responsibility Principle）&lt;&#x2F;li&gt;
&lt;li&gt;O: 开闭原则（Open-Closed Principle）&lt;&#x2F;li&gt;
&lt;li&gt;L: 里氏替换原则（Liskov Substitution Principle）&lt;&#x2F;li&gt;
&lt;li&gt;I: 接口隔离原则（Interface Segregation Principle）&lt;&#x2F;li&gt;
&lt;li&gt;D: 依赖反转原则（Dependency Inversion Principle）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;SOLID 可以作为模块拆分的一个参考。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对降低复杂度的措施，后续持续更新中 ...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;4-visibility-makes-software-simplicity&quot;&gt;4. visibility makes software simplicity&lt;&#x2F;h1&gt;
&lt;p&gt;这个话题，我会单独开一个 blog 来讲述。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;5-ying-yong-functional-programming-jiang-di-bian-cheng-fu-za-du&quot;&gt;5. 应用 Functional Programming 降低编程复杂度&lt;&#x2F;h1&gt;
&lt;p&gt;治理软件复杂性的一个误区就是高谈设计，而忽视编码。一个广泛的认知是：软件的复杂性主要是架构师、架构设计的问题，只要设计清晰、架构合理，就不会有大
的问题了。这也创造了诸多 PPT 文化：架构图上堆砌着高大上、时髦、新潮的技术名词，再加上丰富多彩的图标设计，但却可能是绣花枕头，败絮其中。在这方面，
传统的基建领域，应该会朴实很多：华丽的架构和艺术性的设计，在基建领域无疑就是一种价值（这一点甚于软件，软件领域第一价值还是功能需求），但好的基建，
材料、工艺、施工、质量控制等都是基础，都是有严格的标准的。相反，在软件领域，对编码的要求和标准就很相差太大了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-1-han-shu-shi-bian-cheng-ju-you-geng-gao-de-gong-neng-mi-du&quot;&gt;5.1 函数式编程具有更高的功能密度。&lt;&#x2F;h2&gt;
&lt;p&gt;使用代码的行数来评估代码复杂度，虽然是一个简单的纬度，但仍然具有一定的参考价值。函数式语言，具有更好的抽象能力、更强的函数组合能力（如高阶函数）&lt;&#x2F;p&gt;
&lt;h1 id=&quot;6-ying-yong-unit-test-ci-cd-jiang-di-xi-tong-bu-shu-fu-za-du&quot;&gt;6. 应用 Unit Test&#x2F; CI&#x2F;CD 降低系统部署复杂度&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LLVM 学习系列一：初读 LLVM-IR 示例代码</title>
        <published>2024-10-06T00:00:00+00:00</published>
        <updated>2024-10-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/learning-llvm/"/>
        <id>https://wangzaixiang.github.io/blog/learning-llvm/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/learning-llvm/">&lt;h1 id=&quot;why-learn-llvm&quot;&gt;Why learn LLVM?&lt;&#x2F;h1&gt;
&lt;p&gt;在阅读 duckdb 的源代码，对 duckdb 执行向量计算的方式有初步的了解之后，思考如何在 OLAP 引擎中高效的进行向量计算，感觉引入 JIT 会是一个更佳
的选择。&lt;&#x2F;p&gt;
&lt;p&gt;尝试阅读 x86 的 SIMD 汇编代码，感觉是非常困难的，SIMD 的汇编指令非常复杂，可读性很差，而对应编译生成的 LLVM-IR 则可读性、可理解性高了很多，
基本上，对照 LLVM-IR 文档，一遍下来就可以理解其含义。再考虑到跨 CPU 体系的兼容支持，LLVM-IR 无疑是一个更高level的，更容易理解的，同时也有
更好的可移植性的中间表示。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;steps-to-learn-llvm&quot;&gt;Steps to learn LLVM&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初读 LLVM-IR 示例代码&lt;&#x2F;p&gt;
&lt;p&gt;自己动手编写一段 Rust 代码，然后编译生成 LLVM-IR，再对照 LLVM-IR 文档，逐一阅读 IR 代码，相比直接阅读 IR 文档来说，是一个很好的场景化
学习方式，对 IR 有了一些初步的了解后，后续再系统的学习 LLVM-IR 的知识，就显得没那么枯燥了。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 源代码&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v2&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() == v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;amp;&amp;amp; v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() == result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; v1[i] &amp;gt; v2[i] {
&lt;&#x2F;span&gt;&lt;span&gt;            result[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            result[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;LLVM-IR 代码&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;; l_asm::demo1::select
&lt;&#x2F;span&gt;&lt;span&gt;; Function Attrs: noinline uwtable
&lt;&#x2F;span&gt;&lt;span&gt;define internal fastcc void @_ZN5l_asm5demo16select17h43db37ec056aed21E(
&lt;&#x2F;span&gt;&lt;span&gt;    ptr noalias nocapture noundef nonnull readonly align 4 %v1.0, i64 noundef %v1.1,
&lt;&#x2F;span&gt;&lt;span&gt;    ptr noalias nocapture noundef nonnull readonly align 4 %v2.0, i64 noundef %v2.1,
&lt;&#x2F;span&gt;&lt;span&gt;    ptr noalias nocapture noundef nonnull writeonly align 1 %result.0, i64 noundef %result.1) unnamed_addr #0 {
&lt;&#x2F;span&gt;&lt;span&gt;start:
&lt;&#x2F;span&gt;&lt;span&gt;  %_4 = icmp eq i64 %v1.1, %v2.1
&lt;&#x2F;span&gt;&lt;span&gt;  %_7 = icmp eq i64 %v1.1, %result.1
&lt;&#x2F;span&gt;&lt;span&gt;  %or.cond = and i1 %_4, %_7  -- i1: bit
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %or.cond, label %bb5.preheader.split, label %bb4  -- br type iftrue ifalse
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb5.preheader.split:                              ; preds = %start
&lt;&#x2F;span&gt;&lt;span&gt;  %_218.not = icmp eq i64 %v1.1, 0
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %_218.not, label %bb15, label %bb13.preheader
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb13.preheader:                                   ; preds = %bb5.preheader.split
&lt;&#x2F;span&gt;&lt;span&gt;  %min.iters.check = icmp ult i64 %v1.1, 32       -- unsigned less than
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %min.iters.check, label %bb13.preheader17, label %vector.ph
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vector.ph:                                        ; preds = %bb13.preheader
&lt;&#x2F;span&gt;&lt;span&gt;  %n.vec = and i64 %v1.1, -32
&lt;&#x2F;span&gt;&lt;span&gt;  br label %vector.body
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vector.body:                                      ; preds = %vector.body, %vector.ph
&lt;&#x2F;span&gt;&lt;span&gt;  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]  -- TODO? what is phi
&lt;&#x2F;span&gt;&lt;span&gt;  %0 = getelementptr inbounds [0 x i32], ptr %v1.0, i64 0, i64 %index  -- %0 = %v1.0
&lt;&#x2F;span&gt;&lt;span&gt;  %1 = getelementptr inbounds i32, ptr %0, i64 8                       -- %1 = %0 + 32byte
&lt;&#x2F;span&gt;&lt;span&gt;  %2 = getelementptr inbounds i32, ptr %0, i64 16
&lt;&#x2F;span&gt;&lt;span&gt;  %3 = getelementptr inbounds i32, ptr %0, i64 24
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load = load &amp;lt;8 x i32&amp;gt;, ptr %0, align 4                          -- 8x32 from v1
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load10 = load &amp;lt;8 x i32&amp;gt;, ptr %1, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load11 = load &amp;lt;8 x i32&amp;gt;, ptr %2, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load12 = load &amp;lt;8 x i32&amp;gt;, ptr %3, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  %4 = getelementptr inbounds [0 x i32], ptr %v2.0, i64 0, i64 %index
&lt;&#x2F;span&gt;&lt;span&gt;  %5 = getelementptr inbounds i32, ptr %4, i64 8
&lt;&#x2F;span&gt;&lt;span&gt;  %6 = getelementptr inbounds i32, ptr %4, i64 16
&lt;&#x2F;span&gt;&lt;span&gt;  %7 = getelementptr inbounds i32, ptr %4, i64 24
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load13 = load &amp;lt;8 x i32&amp;gt;, ptr %4, align 4                        -- 8x32 from v1
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load14 = load &amp;lt;8 x i32&amp;gt;, ptr %5, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load15 = load &amp;lt;8 x i32&amp;gt;, ptr %6, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  %wide.load16 = load &amp;lt;8 x i32&amp;gt;, ptr %7, align 4
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  %8 = icmp sgt &amp;lt;8 x i32&amp;gt; %wide.load, %wide.load13                   -- signed greater than
&lt;&#x2F;span&gt;&lt;span&gt;  %9 = icmp sgt &amp;lt;8 x i32&amp;gt; %wide.load10, %wide.load14
&lt;&#x2F;span&gt;&lt;span&gt;  %10 = icmp sgt &amp;lt;8 x i32&amp;gt; %wide.load11, %wide.load15
&lt;&#x2F;span&gt;&lt;span&gt;  %11 = icmp sgt &amp;lt;8 x i32&amp;gt; %wide.load12, %wide.load16
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  %12 = zext &amp;lt;8 x i1&amp;gt; %8 to &amp;lt;8 x i8&amp;gt;                                 -- zero extend 8x1 to 8x8
&lt;&#x2F;span&gt;&lt;span&gt;  %13 = zext &amp;lt;8 x i1&amp;gt; %9 to &amp;lt;8 x i8&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  %14 = zext &amp;lt;8 x i1&amp;gt; %10 to &amp;lt;8 x i8&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  %15 = zext &amp;lt;8 x i1&amp;gt; %11 to &amp;lt;8 x i8&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  %16 = getelementptr inbounds [0 x i8], ptr %result.0, i64 0, i64 %index
&lt;&#x2F;span&gt;&lt;span&gt;  %17 = getelementptr inbounds i8, ptr %16, i64 8
&lt;&#x2F;span&gt;&lt;span&gt;  %18 = getelementptr inbounds i8, ptr %16, i64 16
&lt;&#x2F;span&gt;&lt;span&gt;  %19 = getelementptr inbounds i8, ptr %16, i64 24
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  store &amp;lt;8 x i8&amp;gt; %12, ptr %16, align 1                               -- store 8x8 to result
&lt;&#x2F;span&gt;&lt;span&gt;  store &amp;lt;8 x i8&amp;gt; %13, ptr %17, align 1
&lt;&#x2F;span&gt;&lt;span&gt;  store &amp;lt;8 x i8&amp;gt; %14, ptr %18, align 1
&lt;&#x2F;span&gt;&lt;span&gt;  store &amp;lt;8 x i8&amp;gt; %15, ptr %19, align 1
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  %index.next = add nuw i64 %index, 32
&lt;&#x2F;span&gt;&lt;span&gt;  %20 = icmp eq i64 %index.next, %n.vec
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %20, label %middle.block, label %vector.body, !llvm.loop !17  -- TODO what&amp;#39;s !llvm.loop !17
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;middle.block:                                     ; preds = %vector.body
&lt;&#x2F;span&gt;&lt;span&gt;  %cmp.n = icmp eq i64 %n.vec, %v1.1
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %cmp.n, label %bb15, label %bb13.preheader17
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb13.preheader17:                                 ; preds = %bb13.preheader, %middle.block
&lt;&#x2F;span&gt;&lt;span&gt;  %iter.sroa.0.09.ph = phi i64 [ 0, %bb13.preheader ], [ %n.vec, %middle.block ]
&lt;&#x2F;span&gt;&lt;span&gt;  br label %bb13
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb4:                                              ; preds = %start
&lt;&#x2F;span&gt;&lt;span&gt;; call core::panicking::panic
&lt;&#x2F;span&gt;&lt;span&gt;  tail call void @_ZN4core9panicking5panic17h2a3e12572053020cE(ptr noalias noundef nonnull readonly align 1 @alloc_882a6b32f40210455571ae125dfbea95, i64 noundef 66, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_649ca88820fbe63b563e38f24e967ee7) #12
&lt;&#x2F;span&gt;&lt;span&gt;  unreachable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb15:                                             ; preds = %bb13, %middle.block, %bb5.preheader.split
&lt;&#x2F;span&gt;&lt;span&gt;  ret void
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bb13:                                             ; preds = %bb13.preheader17, %bb13
&lt;&#x2F;span&gt;&lt;span&gt;  %iter.sroa.0.09 = phi i64 [ %_0.i, %bb13 ], [ %iter.sroa.0.09.ph, %bb13.preheader17 ]
&lt;&#x2F;span&gt;&lt;span&gt;  %_0.i = add nuw i64 %iter.sroa.0.09, 1
&lt;&#x2F;span&gt;&lt;span&gt;  %21 = getelementptr inbounds [0 x i32], ptr %v1.0, i64 0, i64 %iter.sroa.0.09
&lt;&#x2F;span&gt;&lt;span&gt;  %_13 = load i32, ptr %21, align 4, !noundef !4
&lt;&#x2F;span&gt;&lt;span&gt;  %22 = getelementptr inbounds [0 x i32], ptr %v2.0, i64 0, i64 %iter.sroa.0.09
&lt;&#x2F;span&gt;&lt;span&gt;  %_15 = load i32, ptr %22, align 4, !noundef !4
&lt;&#x2F;span&gt;&lt;span&gt;  %_12 = icmp sgt i32 %_13, %_15
&lt;&#x2F;span&gt;&lt;span&gt;  %spec.select = zext i1 %_12 to i8
&lt;&#x2F;span&gt;&lt;span&gt;  %23 = getelementptr inbounds [0 x i8], ptr %result.0, i64 0, i64 %iter.sroa.0.09
&lt;&#x2F;span&gt;&lt;span&gt;  store i8 %spec.select, ptr %23, align 1
&lt;&#x2F;span&gt;&lt;span&gt;  %exitcond.not = icmp eq i64 %_0.i, %v1.1
&lt;&#x2F;span&gt;&lt;span&gt;  br i1 %exitcond.not, label %bb15, label %bb13, !llvm.loop !20
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;生成 LLVM-IR （这里的 ll 代码是从 LLVM 官方的 Kaleidoscope Chapter 3 生成的，是一个很简单版的 ll 源文件了）&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; ; file a1.ll
&lt;&#x2F;span&gt;&lt;span&gt; ; ModuleID = &amp;#39;my cool jit&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; source_filename = &amp;quot;my cool jit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; define double @foo(double %a, double %b) {
&lt;&#x2F;span&gt;&lt;span&gt;     entry:
&lt;&#x2F;span&gt;&lt;span&gt;     %multmp = fmul double %a, %a
&lt;&#x2F;span&gt;&lt;span&gt;     %multmp1 = fmul double 2.000000e+00, %a
&lt;&#x2F;span&gt;&lt;span&gt;     %multmp2 = fmul double %multmp1, %b
&lt;&#x2F;span&gt;&lt;span&gt;     %addtmp = fadd double %multmp, %multmp2
&lt;&#x2F;span&gt;&lt;span&gt;     %multmp3 = fmul double %b, %b
&lt;&#x2F;span&gt;&lt;span&gt;     %addtmp4 = fadd double %addtmp, %multmp3
&lt;&#x2F;span&gt;&lt;span&gt;     ret double %addtmp4
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; declare double @cos(double)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;将上述代码编译为可执行代码。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编写一个 main 函数，调用 foo 函数&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; file a0.c
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo(1.0,2.0) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%lf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, r);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;编译、执行&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;llc a1.ll -o a1.s
&lt;&#x2F;span&gt;&lt;span&gt;gcc -o a0 a0.c a1.s
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;a0   # foo(1.0,2.0) = 9.000000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;JIT 方式&lt;&#x2F;p&gt;
&lt;p&gt;本质上，JIT 执行方式与步骤3 的方式是一样的，只是 JIT 方式在运行时，编译生成的机器码，是在内存中，并 mmap 到可执行内存区域，然后直接执行。
当然，需要处理的是一些符号连接，包括获取 生成的函数地址，也包括调用宿主环境提供的函数等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;comments-on-kaleidoscope-chapter-4-jit&quot;&gt;Comments on Kaleidoscope Chapter 4: JIT&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;LLVMContext:  an important class for using LLVM in a threaded context. owns core &quot;global&quot; data.&lt;&#x2F;li&gt;
&lt;li&gt;Module: 对应于单个 ll 文件，可以包含全局变量、函数定义等。&lt;&#x2F;li&gt;
&lt;li&gt;KaleidoscopeJIT： 详细的 CRC 有待整理。
&lt;ul&gt;
&lt;li&gt;RTDyldObjectLinkingLayer&lt;&#x2F;li&gt;
&lt;li&gt;IRCompileLayer:&lt;&#x2F;li&gt;
&lt;li&gt;JITDylib&lt;&#x2F;li&gt;
&lt;li&gt;ResourceTracer?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;parser =&amp;gt; AST&lt;&#x2F;li&gt;
&lt;li&gt;AST =&amp;gt; IR&lt;&#x2F;li&gt;
&lt;li&gt;IR =&amp;gt; JIT
&lt;ul&gt;
&lt;li&gt;FunctionAST &lt;code&gt;def foo(x) x + 1&lt;&#x2F;code&gt; =&amp;gt; IR &lt;code&gt;Function&lt;&#x2F;code&gt; =&amp;gt; JIT.addModule&lt;&#x2F;li&gt;
&lt;li&gt;在 Ch4 中，每个函数定义都会生成一个新的 Module，然后通过 JIT.addModule 加载到 JIT 中。这是 REPL 模式的一个选择。&lt;&#x2F;li&gt;
&lt;li&gt;函数调用时，&lt;code&gt;foo(x)&lt;&#x2F;code&gt; 首先在当前 Module 中查找 foo (例如递归调用)，如果没有找到，则在全局的 FunctionProtos 中查找，
此时，会在当前模块中生成一个 &lt;code&gt;extern&lt;&#x2F;code&gt; 函数申明。JIT 模块会负责 link。&lt;&#x2F;li&gt;
&lt;li&gt;JIT 的核心接口是 addModule, 相当于 link 一个模块。&lt;&#x2F;li&gt;
&lt;li&gt;JIT 可以通过 ResourceTracker 来删除部份模块，对 REPL 来说，top-level expr 会作为一个匿名模块，调用后就可以被清除掉。&lt;&#x2F;li&gt;
&lt;li&gt;JIT 会处理 link: 首先从当前加载的所有模块中，自后向前搜索名字，如果没有找到，则，通过 dlsym(&quot;foo&quot;) 来查找。&lt;&#x2F;li&gt;
&lt;li&gt;JIT 提供 &lt;code&gt;lookup(name)&lt;&#x2F;code&gt; 方法返回函数地址，可以在外部直接调用（前提是你知道如何通过 ABI 调用）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;gong-ju-su-cha&quot;&gt;工具速查&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;LLVM 工具
&lt;ul&gt;
&lt;li&gt;llc : .ll to .s, .bc to .s&lt;&#x2F;li&gt;
&lt;li&gt;lli : run .ll, .bc&lt;&#x2F;li&gt;
&lt;li&gt;llvm-as: .ll to .bc&lt;&#x2F;li&gt;
&lt;li&gt;llvm-dis : .bc to .ll&lt;&#x2F;li&gt;
&lt;li&gt;as:  .s to .o&lt;&#x2F;li&gt;
&lt;li&gt;ld: link .o to .out&lt;&#x2F;li&gt;
&lt;li&gt;cc -v 可以查看完整的编译过程，每一个编译阶段的命令行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rust 编译相关
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;cargo rustc --target x86_64-apple-darwin --release -- --emit asm -C llvm-args=-x86-asm-syntax=intel&lt;&#x2F;code&gt; 来生成汇编代码。
生成的汇编代码，可以在 &lt;code&gt;target&#x2F;x86_64-apple-darwin&#x2F;release&#x2F;deps&#x2F;&lt;&#x2F;code&gt; 目录下找到。&lt;&#x2F;li&gt;
&lt;li&gt;使用选项 -C target-cpu=native 来生成针对当前 CPU 的优化代码。&lt;code&gt;cargo rustc --target x86_64-apple-darwin --release -- -C target-cpu=native --emit asm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;使用选项 -C target-feature=+avx2 来生成针对 AVX2 指令集的优化代码。&lt;&#x2F;li&gt;
&lt;li&gt;cargo -vv 可以查看详细的执行命令行参数。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;系列链接
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;learning-llvm&#x2F;&quot;&gt;LLVM 学习系列一：初读 LLVM-IR 示例代码&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;learning-llvm-2&#x2F;&quot;&gt;LLVM 学习系列二：从一段简单的C代码来学习LLVM-IR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Portable SIMD: How it works</title>
        <published>2024-10-02T00:00:00+00:00</published>
        <updated>2024-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/how-portable-simd-works/"/>
        <id>https://wangzaixiang.github.io/blog/how-portable-simd-works/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/how-portable-simd-works/">&lt;p&gt;一直很好奇，portable simd 库是如何实现的，难道是修改了 rustc 的编译期，从而生成支持 SIMD 的机器代码？但在 portable-simd 的源代码中，
并没有看到与 rustc 相关的修改。那么，portable-simd 是如何实现的呢？&lt;&#x2F;p&gt;
&lt;p&gt;要探究这个问题，可以编写一个简单的示例，然后跟踪一下编译过程，就可以知道 portable-simd 是如何工作的了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-li&quot;&gt;示例&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建一个新的 Rust 项目&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cargo new hellosimd&lt;&#x2F;li&gt;
&lt;li&gt;cd hellosimd&lt;&#x2F;li&gt;
&lt;li&gt;add cargo-toolchain.toml, 这样，后续就不需要每次添加 +nightly 选项了。&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[toolchain]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;channel &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nightly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;add src&#x2F;main.rs as&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt; #![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(portable_simd)]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::simd::f32x4;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::simd::num::SimdFloat;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;= std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(); 
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(v1);
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)] 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a = f32x4::splat(num);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b = f32x4::from_array([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c = a + b;
&lt;&#x2F;span&gt;&lt;span&gt;     c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reduce_sum&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 MIR 代码: &lt;code&gt;cargo rustc --release -- -Zunpretty=mir&lt;&#x2F;code&gt;
MIR 代码比较难以阅读，大概可以看到这里调用了 simd_shuffle, simd_add, simd_reduce_add_ordered 函数。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    bb0: {
&lt;&#x2F;span&gt;&lt;span&gt;     _5 = [copy _1];
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_6);
&lt;&#x2F;span&gt;&lt;span&gt;     _6 = copy _5;
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_7);
&lt;&#x2F;span&gt;&lt;span&gt;     _7 = &amp;amp;raw const _6;
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_11);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_8);
&lt;&#x2F;span&gt;&lt;span&gt;     _8 = MaybeUninit::&amp;lt;Simd&amp;lt;f32, 1&amp;gt;&amp;gt; { uninit: const () };
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_9);
&lt;&#x2F;span&gt;&lt;span&gt;     _11 = &amp;amp;raw mut _8;
&lt;&#x2F;span&gt;&lt;span&gt;     _9 = copy _11 as *mut [f32; 1] (PtrToPtr);
&lt;&#x2F;span&gt;&lt;span&gt;     copy_nonoverlapping(dst = copy _9, src = copy _7, count = const 1_usize);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_9);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_10);
&lt;&#x2F;span&gt;&lt;span&gt;     _10 = copy _8;
&lt;&#x2F;span&gt;&lt;span&gt;     _17 = move ((_10.1: std::mem::ManuallyDrop&amp;lt;std::simd::Simd&amp;lt;f32, 1&amp;gt;&amp;gt;).0: std::simd::Simd&amp;lt;f32, 1&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_10);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_8);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_11);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_7);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_6);
&lt;&#x2F;span&gt;&lt;span&gt;     _2 = simd_shuffle::&amp;lt;Simd&amp;lt;f32, 1&amp;gt;, swizzle::{constant#0}::SimdShuffleIdx&amp;lt;4&amp;gt;, Simd&amp;lt;f32, 4&amp;gt;&amp;gt;(copy _17, move _17, const &amp;lt;std::simd::Simd&amp;lt;T, N&amp;gt;::splat::Splat as std::simd::Swizzle&amp;lt;4&amp;gt;&amp;gt;::swizzle::&amp;lt;f32, 1&amp;gt;::{constant#0}) -&amp;gt; [return: bb1, unwind unreachable];
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; bb1: {
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_3);
&lt;&#x2F;span&gt;&lt;span&gt;     _3 = [const 1f32, const 2f32, const 3f32, const 4f32];
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_12);
&lt;&#x2F;span&gt;&lt;span&gt;     _12 = &amp;amp;raw const _3;
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_16);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_13);
&lt;&#x2F;span&gt;&lt;span&gt;     _13 = MaybeUninit::&amp;lt;Simd&amp;lt;f32, 4&amp;gt;&amp;gt; { uninit: const () };
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_14);
&lt;&#x2F;span&gt;&lt;span&gt;     _16 = &amp;amp;raw mut _13;
&lt;&#x2F;span&gt;&lt;span&gt;     _14 = copy _16 as *mut [f32; 4] (PtrToPtr);
&lt;&#x2F;span&gt;&lt;span&gt;     copy_nonoverlapping(dst = copy _14, src = copy _12, count = const 1_usize);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_14);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageLive(_15);
&lt;&#x2F;span&gt;&lt;span&gt;     _15 = copy _13;
&lt;&#x2F;span&gt;&lt;span&gt;     _18 = move ((_15.1: std::mem::ManuallyDrop&amp;lt;std::simd::Simd&amp;lt;f32, 4&amp;gt;&amp;gt;).0: std::simd::Simd&amp;lt;f32, 4&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_15);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_13);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_16);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_12);
&lt;&#x2F;span&gt;&lt;span&gt;     StorageDead(_3);
&lt;&#x2F;span&gt;&lt;span&gt;     _4 = simd_add::&amp;lt;Simd&amp;lt;f32, 4&amp;gt;&amp;gt;(move _2, move _18) -&amp;gt; [return: bb2, unwind unreachable];
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; bb2: {
&lt;&#x2F;span&gt;&lt;span&gt;     _0 = simd_reduce_add_ordered::&amp;lt;Simd&amp;lt;f32, 4&amp;gt;, f32&amp;gt;(move _4, const 0f32) -&amp;gt; [return: bb3, unwind unreachable];
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 MIR 这个层次，可以看到 splat 函数被 inline 成了一次 simd_shuffle 调用。这与 portable-simd 源代码是一致的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt; #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;splat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is preferred over `[value; N]`, since it&amp;#39;s explicitly a splat:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;97804
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Splat;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Swizzle&amp;lt;N&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Splat {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INDEX&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;; N] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; N];
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     Splat::swizzle::&amp;lt;T, 1&amp;gt;(Simd::&amp;lt;T, 1&amp;gt;::from([value]))
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而 simd_shuffle 函数定义如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;-- file stdlib&#x2F;core&#x2F;src&#x2F;intrinsics&#x2F;simd.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rust-intrinsic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt; #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc_nounwind&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;simd_shuffle&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, U, V&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;: U) -&amp;gt; V;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc_nounwind&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;simd_add&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc_nounwind&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;simd_reduce_add_ordered&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, U&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: U) -&amp;gt; U;
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些函数都是 rustc 的 intrinsics 函数，编译器会将这些函数调用转换为对应的 LLVM SIMD 指令。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;继续查看 LLVM-IR 代码：&lt;code&gt;cargo rustc --release -- --emit llvm-ir&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; ; hellosimd::test
&lt;&#x2F;span&gt;&lt;span&gt; ; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none) uwtable
&lt;&#x2F;span&gt;&lt;span&gt; define internal fastcc noundef float @_ZN9hellosimd4test17h3d900c9e1094a824E(float noundef %num) unnamed_addr #4 {
&lt;&#x2F;span&gt;&lt;span&gt; start:
&lt;&#x2F;span&gt;&lt;span&gt; %0 = insertelement &amp;lt;1 x float&amp;gt; poison, float %num, i64 0
&lt;&#x2F;span&gt;&lt;span&gt; %1 = shufflevector &amp;lt;1 x float&amp;gt; %0, &amp;lt;1 x float&amp;gt; poison, &amp;lt;4 x i32&amp;gt; zeroinitializer
&lt;&#x2F;span&gt;&lt;span&gt; %2 = fadd &amp;lt;4 x float&amp;gt; %1, &amp;lt;float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; %3 = tail call float @llvm.vector.reduce.fadd.v4f32(float 0.000000e+00, &amp;lt;4 x float&amp;gt; %2)
&lt;&#x2F;span&gt;&lt;span&gt; ret float %3
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，生成的 LLVM-IR 已经是 LLVM 的 SIMD 指令了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;portable-simd 本身仅仅是一个普通的 Rust 库，不过，其内部依赖了 rustc 的 intrinsics 函数，而这些函数在 LLVM 下会转换为 LLVM 的 指令。&lt;&#x2F;li&gt;
&lt;li&gt;rustc 内部有很多与 CPU 架构相关的 intrinsics 函数，这些函数在编译后（可能）会直接转换为目标 CPU 上的指令，而非函数调用。显然， intrinsics 函数
的可移植能力对编译期来说，会是一个挑战。rustc 目前是建立在 LLVM 的基础之上，把这个责任转嫁给了 LLVM。&lt;&#x2F;li&gt;
&lt;li&gt;我们也可以参考 portable-simd 的实现，来利用 rustc 的 intrinsics 函数，来实现自己的某些特定操作。&lt;&#x2F;li&gt;
&lt;li&gt;了解 rustc 的编译过程，可以帮助我们更好的理解 Rust 语言生态。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>October 2024</title>
        <published>2024-10-01T00:00:00+00:00</published>
        <updated>2024-10-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2024-10/"/>
        <id>https://wangzaixiang.github.io/monthly/2024-10/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2024-10/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;josephg.com&#x2F;blog&#x2F;rewriting-rust&#x2F;&quot;&gt;Rewriting Rust&lt;&#x2F;a&gt;
作者提出了自己心中理想的 rust 应该包括的几个特性：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;更多的 function trait. 初了 Fn, FnMut, FnOnce。这样相当于给 函数 提供更多的类型信息。&lt;&#x2F;li&gt;
&lt;li&gt;Move, Pin 的重新设计，消除 Pin 存在的必要性，统一 borrow 语义&lt;&#x2F;li&gt;
&lt;li&gt;comptime. 不同与 macro, comptime 使用相同的源语言语法，有更好的类型检查。（编译器内置一个小的解释器 ）
这3个特性对我来说，都感觉是非常合理的，且有吸引力。其中，Pin这一块的介绍也可以帮助我们理解 Pin 存在的原因。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;optimizing-with-simd&#x2F;&quot;&gt;faster Mandelbrot with SIMD&lt;&#x2F;a&gt;
Mandlebrot 这个算法如何利用 SIMD 进行优化(有循环和分支处理)。&lt;&#x2F;p&gt;
&lt;p&gt;不过，这里作者的写法似乎有一些 BUG， SIMD 版本并不严格对应于 scalar 版本，有些地方的处理不一致。参考我之前的文章
&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;mandelbrot-gpu&#x2F;&quot;&gt;Mandelbrot-set CPU vs GPU comparison&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;现代微处理器：90分钟速成指南！介绍了现代 CPU 的一些概念，如超标量、乱序执行、分支预测、缓存等、SIMD、SMT 等技术。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;645343994&quot;&gt;中文版&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lighterra.com&#x2F;papers&#x2F;modernmicroprocessors&#x2F;&quot;&gt;English Version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oxc.rs&#x2F;docs&#x2F;learn&#x2F;performance.html&quot;&gt;oxc: JavaScript Compiler 项目的性能优化记录&lt;&#x2F;a&gt;
oxc 项目是使用 Rust 编写的 JavaScript 编译器，最近 Vite 项目也在基于 oxc 开发新一代的 bundle: rolldown. OXC 以性能著称，这篇文章
介绍了作者在优化过程中采取的一系列措施，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;AST 相关
&lt;ul&gt;
&lt;li&gt;AST 内存分配。从每个小节点的分配、释放，Drop的成本较高，调整为为单个 AST 分配一个 arena，作为整体释放。提升 ～20%（也大为提升缓存友好性）
这个与 zig 的内存管理风格有些相似。&lt;&#x2F;li&gt;
&lt;li&gt;Enum Size。使用 box 包装字段，减少 enum 占用大小。提升 ～10%。&lt;&#x2F;li&gt;
&lt;li&gt;Span：将位置信息从 usize 调整到 u32. 提升 ～5%。&lt;&#x2F;li&gt;
&lt;li&gt;String interning。 string-cache 存在并发问题，移除后，性能提升 ～30%。&lt;&#x2F;li&gt;
&lt;li&gt;对 string-cache 进行并发优化&lt;&#x2F;li&gt;
&lt;li&gt;String inlining: 对 长度 &amp;lt;= 23 的字符串进行 inline, 避免使用 String。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Lexer
&lt;ul&gt;
&lt;li&gt;SIMD&lt;&#x2F;li&gt;
&lt;li&gt;keyword match&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Linter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Byron&#x2F;gitoxide&#x2F;tree&#x2F;main&quot;&gt;gitoxide&lt;&#x2F;a&gt; 用 rust 重新的 git 轮子。 git 生态已经是一个比较大的命令行生态了，这个
轮子的工作量并不小。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;db.in.tum.de&#x2F;~finis&#x2F;x86%20intrinsics%20cheat%20sheet%20v1.0.pdf&quot;&gt;x86 Intrinsics Cheat Sheet&lt;&#x2F;a&gt; 这个是学习 SIMD 的好资料。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;docs&#x2F;intrinsics-guide&#x2F;index.html#&quot;&gt;x86 Intrinsics Reference&lt;&#x2F;a&gt; Intel 官方参考。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;排序&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vldb.org&#x2F;pvldb&#x2F;vol8&#x2F;p1274-inoue.pdf&quot;&gt;排序算法 SIMD版本&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;intel&#x2F;x86-simd-sort&quot;&gt;x86-simd-sort&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kerkour.com&#x2F;rust-data-engineering&quot;&gt;Why Rust is taking the data engineering world by storm&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;100G - 9T 规模的数据规模覆盖了 98% 的需求，之前需要一个大型的 MPP 集群，而现在，可以在1个服务器上完成。&lt;&#x2F;li&gt;
&lt;li&gt;Rust + Cargo 改变了数据库应用的开发方式，不再需要一个 monlitic 的数据库，而是可以通过组合各种 crate 来完成。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datafusion.apache.org&#x2F;user-guide&#x2F;introduction.html#known-users&quot;&gt;很多数据库&lt;&#x2F;a&gt;都采用 datafusion 作为计算引擎。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;motherduck.com&#x2F;blog&#x2F;big-data-is-dead&#x2F;&quot;&gt;Big Data is dead&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oschina.net&#x2F;news&#x2F;316422&#x2F;apache-doris-3-0-released&quot;&gt;Apache Doris 3.0 里程碑版本｜存算分离架构升级、湖仓一体再进化&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Bundlers&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bun.sh&#x2F;docs&#x2F;bundler&quot;&gt;bun.build&lt;&#x2F;a&gt; 比 esbuild 更快。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oxc-project.github.io&quot;&gt;oxc-project&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rolldown.rs&quot;&gt;rolldown&lt;&#x2F;a&gt; based on oxc, vite 子项目，意在替换 esbuild 和 rollup，作为 dev&#x2F;release 模式下统一的打包工具&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brisa.build&quot;&gt;brisa&lt;&#x2F;a&gt; 一个号称继承了组多前端框架特性的新轮子，对 webcomponent 和 SSR 都有支持，等发布了再看看。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lit.dev&#x2F;blog&#x2F;2024-10-08-signals&#x2F;&quot;&gt;Lit 支持 signals&lt;&#x2F;a&gt;
现在的组件有两种响应模式了：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对 组件 自己的 props&#x2F;states 的变化的响应。&lt;&#x2F;li&gt;
&lt;li&gt;对 外部的 signal 的响应。
增加后者，带来了灵活性的同时，是否会带来更多的复杂性呢？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;口水战： Web Components, Future or Not?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;ryansolid&#x2F;web-components-are-not-the-future-48bh&quot;&gt;Web Components Are Not the Future&lt;&#x2F;a&gt;
很遗憾，我都没有 get 到作者的点。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@treeder&#x2F;web-components-are-the-future-f0f9f0022686&quot;&gt;Web Components Are the Future&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.abeautifulsite.net&#x2F;posts&#x2F;web-components-are-not-the-future-they-re-the-present&#x2F;&quot;&gt;Web Components Are Not the Future — They’re the Present&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;组件的互操作性。 ABI 兼容性。在框架A中编写一个组件，在框架B、C、D中使用。&lt;&#x2F;li&gt;
&lt;li&gt;我们不需要就如何编写组件达成一致，我们只需要在底层实现达成一致，这样就可以实现组件的互操作性。&lt;&#x2F;li&gt;
&lt;li&gt;Element? Component? 谁是谁的子集？组件不一定是 Element，不是 Element 的组件，不一定要作为 WebComponent, JS Module 足以。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;2024-11 &lt;a href=&quot;https:&#x2F;&#x2F;c5r.medium.com&#x2F;webcomponents-are-a-part-of-the-future-94a2b0940314&quot;&gt;WebComponents Are (a Part of) the Future&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;richharris&#x2F;why-i-don-t-use-web-components-2cia&quot;&gt;Why I don&#x27;t use web components&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;渐进式组件对 JS 的依赖？ tiny case&lt;&#x2F;li&gt;
&lt;li&gt;css in js. little case.&lt;&#x2F;li&gt;
&lt;li&gt;标准、稳定性。 little case&lt;&#x2F;li&gt;
&lt;li&gt;polyfills.&lt;&#x2F;li&gt;
&lt;li&gt;slot composition. WEB 组件对 lighting DOM 缺少延迟处理。&lt;&#x2F;li&gt;
&lt;li&gt;props or attrs.&lt;&#x2F;li&gt;
&lt;li&gt;The DOM is bad, write less code. 又一个双向绑定的争论。 svelte 有对双向绑定的支持。
这篇文章有比较具体的技术点，不过，从我的角度上看，是一些偏好行的选择。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;wasm&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zed.dev&#x2F;blog&#x2F;zed-decoded-extensions&quot;&gt;Life of a Zed Extension: Rust, WIT, Wasm&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;how an extension is built&lt;&#x2F;li&gt;
&lt;li&gt;using components model(IDL)&lt;&#x2F;li&gt;
&lt;li&gt;the wasm runtime: wasmtime&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;svelte-5-is-alive&quot;&gt;Svelte 5 发布&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Svelte 是编译期优化的响应式框架，这个版本的特色是引入了 rune 的语法特征。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;let count = $state(0);   &#x2F;&#x2F; 申明 count 为一个响应式变量，这里仅仅是一个语法标识，而非函数调用。
&lt;blockquote&gt;
&lt;p&gt;从源代码的角度来看 count 仍然是未封装的 number，但编译期为其创建了一个分装的响应式变量，只是源代码中获取的是 wrapper 的值
当然，对 value 的赋值操作也被改写成为对 wrapper 的操作。
通过 $state 这个 rune 标识的变量读写，都被编译器进行了改写，而非通过运行期反射方式。&lt;&#x2F;p&gt;
&lt;p&gt;Svelte 5 为什么要做这一个从隐式（Svelte 4）到显式的调整，这样做会有什么优点？这个在官网有一个 &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;runes&quot;&gt;说明&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;显示说明，似乎是一种回退？&lt;&#x2F;li&gt;
&lt;li&gt;对复杂项目，可以更好的理解哪个变量是响应式的（在变量的定义时明确），对 .svelte&#x2F;.js 代码保持一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Svelte 与 solidjs 是类似的原理。后续可以做一个特性上的对比。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;tools-libraries&quot;&gt;Tools &amp;amp; Libraries&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DOM 更新技术对比：Virtual DOM or Incremental DOM</title>
        <published>2024-09-12T00:00:00+00:00</published>
        <updated>2024-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/virtual-dom/"/>
        <id>https://wangzaixiang.github.io/blog/virtual-dom/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/virtual-dom/">&lt;p&gt;DOM 更新技术本身是一步技术演进历史，本文收集了从远古时间 到 最新的技术，并整理了我对其的理解。目前还只是一个提纲，后续有时间会慢慢细化。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接、命令式操作 DOM 时代&lt;&#x2F;p&gt;
&lt;p&gt;命令式编程的时代，也是 UI 的传统时代，无比黑暗、无趣的时代。从 Motif 到 Win32，都是这种风格的编程模式。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;innerHTML 操作：简单、粗暴&lt;&#x2F;li&gt;
&lt;li&gt;诞生了 jquery 这一王者&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;React 时代: ui = f(state)&lt;&#x2F;p&gt;
&lt;p&gt;进入到了函数式编程的时代，不仅WEB，桌面 GUI 也开始以 React 风格为主，如 Flutter, Slint 等。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;React Virtual DOM&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vdom &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;diff&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vdom&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop: event -&amp;gt; change state -&amp;gt; render 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;incremental DOM&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; compute virtual dom side by side dom
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop: event -&amp;gt; change state -&amp;gt; render 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
通过在计算 virtual dom 时，即与 DOM 进行比较，由于在大部份情况下，变更紧紧是一小部份，因此，可以减少内存的占用。这种模式感觉应该
是对 virtual dom 的一种有效优化，但在实际生态中，好像并没有太多的实现。&lt;&#x2F;li&gt;
&lt;li&gt;Lit-Style&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;static_parts&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;]] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 得益于 lit template
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;old_state &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;];  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dynamic 部份会有多个
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;old_state &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
Lit 基于 template，由于可以识别 template 的静态部份（不会变化）和动态部份（会响应数据的变化），
Lit 在 render 后，会追踪动态部份，检查动态部份依赖的数据是否发生变化，做出响应的更新。（参见很早期我编写的一篇文章：
&lt;a href=&quot;&#x2F;blog&#x2F;litelement&quot;&gt;LitElement &amp;amp; LitHtml 探秘&lt;&#x2F;a&gt; )
缺点：每次 render 函数调用都会执行，逐一检查动态部份是否发生变化，这个过程还是略显多余。
优点：算是一种相对简单的平衡，即没有大量的 virtual dom 的内存占用(static部份是共享的，不会重复占用内存)，
也简化了 DOM 的 diff过程。&lt;&#x2F;li&gt;
&lt;li&gt;Solid-Style&#x2F;Svelte-Style&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createEffect&lt;&#x2F;span&gt;&lt;span&gt;( () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对每一个动态部份，追踪其依赖的数据
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dom1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state1&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 当子状态发生后变化时，更新 dom1
&lt;&#x2F;span&gt;&lt;span&gt;  } );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
这一类的框架，在 Lit 的基础上更进一步：在后续响应式变化时，render 函数不再执行，而是每个动态部份独立响应。当然，做到这一点是
依赖于对模版的编译的。即将模版中的动态部份、静态部份在编译期即进行了分离，并生成对应的响应式代码。
当然，对一些复杂的结构，需要进一步展开其响应式机制。&lt;&#x2F;li&gt;
&lt;li&gt;未来发展预测
在编译期进行更多的优化，从而避免在运行期做不必要的计算，这个方向应该还有不少空间，例如：诸如 Solid 目前设计（我的猜测），还是采用
动态的 track 方式来跟踪变化的依赖，在依赖发生变化时，重新计算，从重新刷新依赖关系。这个对于一些静态的依赖关系，可以在编译期直接确定，
进而减少 track 的开销。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;最新的发展，这种 React 风格也逐步的占领了桌面 GUI 的领域，如 Flutter, Slint 等。在最近留意的一个框架 dioxuslabs 中，更是把
这个带入到 Rust + WASM + (Web&#x2F;TUI&#x2F;GUI)的风格中，令 Rustacean 们也有了一种新的选择。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;React
&lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;slideshow&#x2F;react-preso-v2&#x2F;26589373&quot;&gt;Rethinking Best Practices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Svelte 系列&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;virtual-dom-is-pure-overhead&quot;&gt;Virtual DOM is pure overhead&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;svelte-3-rethinking-reactivity&quot;&gt;Rethinking reactivity&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;blog&#x2F;runes&quot;&gt;Rethinking &#x27;Rethinking reactivity&#x27;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SolidJS&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;ryansolid&#x2F;a-hands-on-introduction-to-fine-grained-reactivity-3ndf&quot;&gt;A Hands-on Introduction to Fine-Grained Reactivity&lt;&#x2F;a&gt;
我设计的 Variable Manager 设计方案，在很多特性上，与这篇文章的设计思路是一致的。包括：
&lt;ul&gt;
&lt;li&gt;dynamic dependency tracking。memoization 和 effect 都类似于VM 中的 binding。&lt;&#x2F;li&gt;
&lt;li&gt;batched updates. 类似于 VM 中的 transaction。
只是，本文更为微观，面向 synchronous，而 vm 更为宏观，面向 asynchronous。
只是，Solid的处理中应该使用了 weak reference，当 effect 回收时，这个计算也自动销毁了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;ryansolid&#x2F;building-a-reactive-library-from-scratch-1i0p&quot;&gt;Building a Reactive Library from Scratch&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;1289&#x2F;solidjs-reactivity-to-rendering&quot;&gt;SolidJS: Reactivity to Rendering&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;example1&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Greeting &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hi &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{props.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;(() =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   const [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visible&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setVisible&lt;&#x2F;span&gt;&lt;span&gt;] = createSignal(false),
&lt;&#x2F;span&gt;&lt;span&gt;   [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;] = createSignal(&amp;quot;Josephine&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   return (
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;div onClick={() =&amp;gt; setName(&amp;quot;Geraldine&amp;quot;)}&amp;gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      visible() &amp;amp;&amp;amp; &amp;lt;Greeting name={ name } &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      }&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   );
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
等效于代码:&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Greeting &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; signal from props.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hi &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Span&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;) ];
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;els &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeEffect&lt;&#x2F;span&gt;&lt;span&gt;( ()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;visble&lt;&#x2F;span&gt;&lt;span&gt;() ){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;el &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Greeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;el&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;propSet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;el &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;   })
&lt;&#x2F;span&gt;&lt;span&gt;   { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;els 
&lt;&#x2F;span&gt;&lt;span&gt;     } 
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Angular&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;300&#x2F;big-picture-overview&quot;&gt;Change Detection Big Picture - overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;301&#x2F;big-picture-operations&quot;&gt;Change Detection Big Picture - Operations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;302&#x2F;big-picture-unidirectional-data-flow&quot;&gt;Change Detection Big Picture - Unidirectional data flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;303&#x2F;big-picture-rendering-cycle&quot;&gt;Change Detection Big Picture - Rendering cycle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angularindepth.com&#x2F;posts&#x2F;304&#x2F;running-change-detection-components-tree&quot;&gt;Change Detection Big Picture - Components tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Lit 的做法&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;zhazhanitian&#x2F;p&#x2F;14421993.html&quot;&gt;增量DOM与虚拟DOM&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Incremental-DOM https:&#x2F;&#x2F;google.github.io&#x2F;incremental-dom&#x2F;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raphlinus.github.io&#x2F;rust&#x2F;gui&#x2F;2022&#x2F;05&#x2F;07&#x2F;ui-architecture.html&quot;&gt;Xilem: an architecture for UI in Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Xilem 是一个很类似于 Flutter&#x2F;SwiftUI 的 Rust GUI 框架，其核心也是一个增量更新的架构，在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;xilem&#x2F;blob&#x2F;main&#x2F;ARCHITECTURE.md&quot;&gt;Xilem架构&lt;&#x2F;a&gt;
中有很多这方面的思考，可以作为对 UI 的增量更新的参考。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DuckDB 源码阅读之相关链接</title>
        <published>2024-09-10T00:00:00+00:00</published>
        <updated>2024-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/duckdb-links/"/>
        <id>https://wangzaixiang.github.io/blog/duckdb-links/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/duckdb-links/">&lt;p&gt;最近，在评估引入一个 SQL 执行引擎，以取代分析产品对上游数据库的特性的依赖，这些差异给产品带来了显著的困难：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;MySQL 不支持 FullJoin&lt;&#x2F;li&gt;
&lt;li&gt;MySQL 的窗口函数中不支持 &lt;code&gt;range expr preceding and ...&lt;&#x2F;code&gt;， 无法执行如下的SQL：(同期累积值)&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; order_date, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount) as x0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(amount)) over (
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;order by&lt;&#x2F;span&gt;&lt;span&gt; order_date 
&lt;&#x2F;span&gt;&lt;span&gt; range between 
&lt;&#x2F;span&gt;&lt;span&gt;   date_diff(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, makeDate( year(order_date)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), order_date) preceding 
&lt;&#x2F;span&gt;&lt;span&gt; and 
&lt;&#x2F;span&gt;&lt;span&gt;   date_diff(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, makeDate( year(order_date)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, month(order_date), day(order_date) ), order_date) preceding
&lt;&#x2F;span&gt;&lt;span&gt; ) as X1
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; orders
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; order_date;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ClickHouse 对窗口函数的支持极为不标准。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;考虑引入 polars 或者 duckdb, 之前会偏向于 polars（主要是个人对C++已经生疏，对Rust的感觉要良好很多），但在对比窗口函数的能力方面
还是要欠缺很多，而 duckdb 在这方面的体验要好很多，所以目前更倾向于选择 duckdb。这样，就很有必要熟悉 duckdb 的源代码。这里收集网上与
duckdb 相关的源代码阅读文档，也给自己立一个flag，在接下里的时间里，重点阅读一下 duckdb 的源代码，顺便补一补 C++ 的功课。&lt;&#x2F;p&gt;
&lt;p&gt;引入一个 SQL 执行引擎的目的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;屏蔽上游数据源的特性限制。提供更多、且更一致的SQL分析能力。&lt;&#x2F;li&gt;
&lt;li&gt;基于向量计算、优化的执行机制，提供相比传统 OLTP 更快速的查询能力。&lt;&#x2F;li&gt;
&lt;li&gt;必要时，可以根据自己的分析需要，进行针对性的优化。例如，常见的小计、合计等功能，使用 SQL 实现时，需要执行多条SQL，
可以开发扩展进行针对性的优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;duckdb-yuan-dai-ma-pou-xi-wen-dang-shou-ji&quot;&gt;DuckDB 源代码剖析 文档收集&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;张建:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;402355976&quot;&gt;DuckDB Push-Based Execution Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;696147374&quot;&gt;DuckDB Query Optimizer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Focus&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;374627729&quot;&gt;DuckDB：开篇&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;382131436&quot;&gt;DuckDB: Row-Group Based Storage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;376178277&quot;&gt;DuckDB：接口与示例&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;franzcheng&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;644095258&quot;&gt;DuckDB源码阅读02——公共子表达式消除&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;652394118&quot;&gt;DuckDB源码阅读——Filter pullup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;644039061&quot;&gt;DuckDB源码阅读01——重复聚合函数去除&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;红星闪闪&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;628391818&quot;&gt;DuckDB Sort代码阅读和分析&lt;&#x2F;a&gt; 重点围绕 Sort，偏重于 Pipeline + Executor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;664312966&quot;&gt;怎样把数据库排序做到全球第一&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;628507841&quot;&gt;DuckDB的变长Sort实现&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;628393152&quot;&gt;DuckDB的Merge实现&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Others&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;679569277&quot;&gt;DuckDB内存格式代码详解（一）&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;官方&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DuckDB internals &lt;a href=&quot;https:&#x2F;&#x2F;15721.courses.cs.cmu.edu&#x2F;spring2023&#x2F;slides&#x2F;22-duckdb.pdf&quot;&gt;Slides&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bZOvAKGkzpQ&quot;&gt;Video&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Push-Based Execution In DuckDB &lt;a href=&quot;https:&#x2F;&#x2F;dsdsd.da.cwi.nl&#x2F;slides&#x2F;dsdsd-duckdb-push-based-execution.pdf&quot;&gt;Slides&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1kDrPgRUuEI&quot;&gt;Video&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>数据分析之表达式语言：DAX</title>
        <published>2024-09-04T00:00:00+00:00</published>
        <updated>2024-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/dax/"/>
        <id>https://wangzaixiang.github.io/blog/dax/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/dax/">&lt;h1 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h1&gt;
&lt;p&gt;计划整理有关“数据分析表达式语言”的系列文档，计划包括以下内容：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MDX(Multi-Dimensional Data Expression) 表达式语言&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;DAX(Data Analysis Expressions) 表达式语言&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Tabula 表达式语言&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tableau.com&#x2F;zh-cn&#x2F;blog&#x2F;LOD-expressions#:~:text=Tableau&quot;&gt;15 大详细级别表达式&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在每一个数据分析产品的背后，必然有一个表达式语言，用于对一些复杂的业务分析，尤其是指标（Measure）进行表达，并提供一套优化的计算引擎，
达成对数据的快速分析。例如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;计算原始指标在查询结果中的排名、占比&lt;&#x2F;li&gt;
&lt;li&gt;计算原始指标的时间快速计算如：
&lt;ul&gt;
&lt;li&gt;同期值、同比增长、同比增长率&lt;&#x2F;li&gt;
&lt;li&gt;上期值、上期增长、上期增长率&lt;&#x2F;li&gt;
&lt;li&gt;年累积、月累积&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;TopN 计算。&lt;&#x2F;li&gt;
&lt;li&gt;15大详细级别表达式中的各种计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在实际业务分析中，上述的这些分析需求其实是非常常见的，虽然这些都可以在 SQL 中进行计算，但即使是简单的排名、占比也会需要编写复杂的
SQL 语句，而且，复杂的 SQL 语句的可读性也是相当糟糕的。对复杂的 SQL 语句，其执行性能也未必是最佳的。&lt;&#x2F;p&gt;
&lt;p&gt;因此，一个表达式语言，主要就是承载如下目标：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;计算的表达能力。尽可能具备有完备的计算能力，能够表达各种复杂的计算逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;表达式语言的可读性、简单性。越高抽象的表达式语言，可以将复杂的计算逻辑简单化。便于用户理解、编写。&lt;&#x2F;li&gt;
&lt;li&gt;计算的高效性。毕竟，数据分析往往面对的是一个巨大的数据集，如果计算非常耗时，那么就不实用了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;dax-data-analysis-expressions-biao-da-shi-yu-yan&quot;&gt;DAX(Data Analysis Expressions) 表达式语言&lt;&#x2F;h1&gt;
&lt;p&gt;DAX 是 Microsoft PowerBI 产品的表达式语言，也是 PowerBI 的产品灵魂。了解它的权威书籍是《The Definitive Guide to DAX》。&lt;&#x2F;p&gt;
&lt;p&gt;我对 PowerBi 并没有太多的实战经验，对其的理解主要是在设计数据分析产品时，经常需要对一些分析逻辑，参考 PowerBI 的概念时，
对 DAX 进行针对性的分析、揣测。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;power-bi-zhong-de-shai-xuan-fang-xiang&quot;&gt;Power BI 中的筛选方向&lt;&#x2F;h2&gt;
&lt;p&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;表关系模型.fab5ed83851c9058.png&quot; &#x2F;&gt;
筛选方向是 PowerBI 中的一个重要概念：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;选定给定 &lt;code&gt;日期&lt;&#x2F;code&gt; 时，按照上图，会自动的筛选：&lt;code&gt;销售&lt;&#x2F;code&gt;、&lt;code&gt;产品&lt;&#x2F;code&gt;，而不影响 &lt;code&gt;客户&lt;&#x2F;code&gt;、&lt;code&gt;产品分类&lt;&#x2F;code&gt; 的数据的可见性。
（上图中销售 和 产品）设置了双向筛选。&lt;&#x2F;li&gt;
&lt;li&gt;在多维查询时，维度就是筛选条件，作为结果，筛选出来的数据（多行）是一个结果集，在这个结果集上通过某个函数运算，得出的一个值
称之为度量（Measure）。所以，度量是一个集合上的函数，而维度则是这个集合的筛选条件。&lt;&#x2F;li&gt;
&lt;li&gt;一般的，维表 与 是事实表之间的关系是一对多的关系，即一个维表的一行对应多个事实表的行。
一个维度表的一行对应多个事实表的行，这个是默认的筛选方向。&lt;&#x2F;li&gt;
&lt;li&gt;Power BI 支持双向筛选，即从多方向一方的筛选。与一方对多方的筛选不同（一个事实总是有唯一的维度值），多方对一方的筛选，意味着
一个事实的维度有多个值，例如：一个用户有多个标签，一个 SPU 可以有多个颜色。当你使用标签、颜色筛选用户、SPU时，就是多方对一方的筛选。&lt;&#x2F;li&gt;
&lt;li&gt;按照图示的方式，是比较好理解一个维表的影响范围（即其筛选的范围）、或者一个事实表的边界（即哪些维度会影响这个事实表的范围）
&lt;ul&gt;
&lt;li&gt;在模型中，并不存在那个表是维表、那个表是事实表的概念，维表和事实表是根据场景来确定的&lt;&#x2F;li&gt;
&lt;li&gt;销售与产品的双向筛选，意味着以销售为事实表是，产品是维度表，反之，以产品为事实表时，销售是维度表。&lt;&#x2F;li&gt;
&lt;li&gt;在PowerBI的模型图中，顺着箭头的方向（筛选方向），就是维表的影响范围，反之所有可以顺着箭头触达事实表的都是这个表的维表。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;filter-context-vs-row-context&quot;&gt;Filter Context vs Row Context&lt;&#x2F;h2&gt;
&lt;p&gt;DAX 中有两种上下文：Filter Context 和 Row Context。 这个是很容易混淆的，或者错误使用的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;column reference and measure reference.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;column reference: &lt;code&gt;Sales[Quantity]&lt;&#x2F;code&gt; or &lt;code&gt;[Quantity]&lt;&#x2F;code&gt; in Sales Context(比如在 Sales 表的计算列定义中)&lt;&#x2F;li&gt;
&lt;li&gt;measure reference: &lt;code&gt;[Sales Amount]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;table reference: &lt;code&gt;Sales&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
column reference 与 measure reference 如果有歧义，怎么处理？DAX 会优先解析为 column reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Filter Context: 用于对当前的数据范围进行筛选。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Filter Context 是对整个模型有效的，如果有一个筛选条件 &lt;code&gt;[table1].[col1] = value1&lt;&#x2F;code&gt;, 那么，这个条件会筛选 table1 中满足条件的行，
并根据模型中的筛选方向，传递到其他表中。可以简单的理解，通过 Filter Context, 一个模型的数据可见范围被动态的调整了，这时，任何一个表中
的数据并不是原始表中的数据，而是经过筛选的数据。&lt;&#x2F;li&gt;
&lt;li&gt;evaluation
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table reference&lt;&#x2F;code&gt; 在 filter context 中求值&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;measure reference&lt;&#x2F;code&gt; 在 filter context 中求值&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;创建&#x2F;修改 Filter Context
&lt;ul&gt;
&lt;li&gt;在一个分析表格中，每个单元格都有自己的 Filter Context，一般由行，列，过滤器等决定。即使不同的单元格使用的是同一个计算公式，但由于
Filter Context 的不同，计算结果也会不同。&lt;&#x2F;li&gt;
&lt;li&gt;诸如 ALL, ALLEXCEPT, ALLSELECTED 等表函数，可以用于修改 Filter Context。
&lt;ul&gt;
&lt;li&gt;ALL(table) 函数，清除 table 上的所有筛选器&lt;&#x2F;li&gt;
&lt;li&gt;ALL(table, column) 函数，清除 table 上的除了 column 列的所有筛选器&lt;&#x2F;li&gt;
&lt;li&gt;ALLEXCEPT(table, column1, column2, ...) 函数，清除 table 上的除了 column1, column2, ... 列的所有筛选器&lt;&#x2F;li&gt;
&lt;li&gt;ALLSELECTED(table) 函数，清除 table 上的所有筛选器(动态的筛选器)，但保留用户手动选择的筛选器（原始的筛选器）&lt;&#x2F;li&gt;
&lt;li&gt;RelatedTable( table ) 将 当前 row context 添加到 table 的 filter 中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CALCULATE(expr, filter1, filter2, filter3) 函数，可以用于修改 Filter Context，并在新的上下文中计算 expr 表达式的值。
&lt;ul&gt;
&lt;li&gt;boolean filter: &lt;code&gt;[column] = value&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;table filter: &lt;code&gt;filter(table, expr)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;filter modifier:
&lt;ul&gt;
&lt;li&gt;ALL、ALLEXCEPT&lt;&#x2F;li&gt;
&lt;li&gt;REMOVEFILTERS(table, column*)&lt;&#x2F;li&gt;
&lt;li&gt;KEEPFILTERS(expr) 保留当前的筛选器，但可以合并值，不同于 boolean filter,那个是替换筛选器。&lt;&#x2F;li&gt;
&lt;li&gt;USERELATIONSHIP&#x2F;CROSSFILTER -- 修改表筛选关系&lt;&#x2F;li&gt;
&lt;li&gt;Calculate 会将当前的 RowContext 转换为 FilterContext。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;FILTER 函数自身并不修改 Filter Context, 而是生成一个计算表。作为 Calculate 的参数时，其会修改原始表的数据范围。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
表函数是否有2种语义：其一代表一个表的数据，其二代表修改在这个表上的 filter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Every measure reference always has an implicit CALCULATE surrounding it.
&lt;ul&gt;
&lt;li&gt;完成了将当前 Row Context 转化为 Filter Context，从而影响 Measure 的求值&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;两种 filter
&lt;ul&gt;
&lt;li&gt;column filter: 更高效&lt;&#x2F;li&gt;
&lt;li&gt;table filter: a calculated table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Row Context&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;创建 RowContext
&lt;ul&gt;
&lt;li&gt;计算列在 RowContext 中求值&lt;&#x2F;li&gt;
&lt;li&gt;SUMX 等 iterate 函数会创建一个新的 RowContext&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;column reference &lt;code&gt;tab[col]&lt;&#x2F;code&gt; 可以在 RowContext 中求值
&lt;ul&gt;
&lt;li&gt;如果存在 1个 &lt;code&gt;tab&lt;&#x2F;code&gt; 的 row context，则在其中求值&lt;&#x2F;li&gt;
&lt;li&gt;如果存在 多个 &lt;code&gt;tab&lt;&#x2F;code&gt; 的 row context，则在 latest 的 row context 中求值&lt;&#x2F;li&gt;
&lt;li&gt;否则无法求值&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在某个求值点，可能存在 0..N 个 RowContext 和 1 个 FilterContext。
&lt;ul&gt;
&lt;li&gt;EARLIER(column, number) 函数，可以在 RowContext(-number) 中的 column 列的值&lt;&#x2F;li&gt;
&lt;li&gt;EALIST(column)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;每个 row context 的范围是模型中的单个表，不会扩展到其他表去
&lt;ul&gt;
&lt;li&gt;Related(column) 与 row context 相关的 column，适合于 N:1 的关联字段&lt;&#x2F;li&gt;
&lt;li&gt;RelatedTable(table) 与 row context 相关的 table，适合于 1: N 的关联。
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
RelatedTable(table) 这里的 table 是否会受当前的 filter context 影响? Y&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
RelatedTable(table) 这里是创建了一个新的计算表，还是更新了 filter context?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Calculate 会将当前的 RowContext 转换为 FilterContext，并消除掉所有的 RowContext.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;其实，一个比较好的方式，是注明 DAX 函数的每个参数的求值上下文，是 Filter Context 还是 Row Context，这样就可以让这个概念
更为清晰了。毕竟，只有少数的函数会创建新的上下文，大部分的函数都是在已有的上下文中进行计算。&lt;&#x2F;p&gt;
&lt;p&gt;TODO: 举例说明(补充一个例子，可以看到 哪些是在 Filter Context 中计算，哪些是在 Row Context 中计算,
以及如何通过 CALCULATE 函数，创建新的 Filter Context。）
示例1:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 在 SUMX 的 caller 中，有一个 Filter Context，这里假设为 fc0, 也可能有其他的 Row Context，这里假设为 rc0
&lt;&#x2F;span&gt;&lt;span&gt;SUMX (
&lt;&#x2F;span&gt;&lt;span&gt;    Sales, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 在 fc0 中计算表
&lt;&#x2F;span&gt;&lt;span&gt;    Sales[Net Price] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- SUMX 函数会生成一个RowContext，这里假设为 rc1, 这个表达式的求值上下文为： fc0 + rc0 + rc1
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- Sales[Net Price] 会在 rc1 中求值。
&lt;&#x2F;span&gt;&lt;span&gt;)   
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;示例2:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- fc0 , rc0
&lt;&#x2F;span&gt;&lt;span&gt;SUMX (
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product Category&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in fc0, and will create new Row Context rc1 for each row in &amp;#39;Product Category&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 对 &amp;#39;Product Category&amp;#39; 中的每一行创建一个 Row Context: rc1
&lt;&#x2F;span&gt;&lt;span&gt;    SUMX ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in fc0 + rc0 + rc1(Product Category)
&lt;&#x2F;span&gt;&lt;span&gt;        RELATEDTABLE ( &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; ), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in rc1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;--  对每一行 Product, 创建: rc2(Product)
&lt;&#x2F;span&gt;&lt;span&gt;        SUMX ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in fc0 + rc0 + rc1(Product Category) + rc2(Product)
&lt;&#x2F;span&gt;&lt;span&gt;            RELATEDTABLE ( Sales ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in rc2(Product) 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 对每一行 Sales, 创建: rc3(Sales), 上下文为: fc0 + rc0 + rc1(Product Category) + rc2(Product) + rc3(Sales)
&lt;&#x2F;span&gt;&lt;span&gt;            Sales[Quantity] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in rc3(Sales)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;[Unit Price] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in rc2(Product)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product Category&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;[Discount] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- eval in rc1(Product Category)
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的这个表达式可以简化为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;SUMX (
&lt;&#x2F;span&gt;&lt;span&gt;    Sales,
&lt;&#x2F;span&gt;&lt;span&gt;    Sales[Quantity] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; RELATED ( &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;[Unit Price] ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; RELATED ( &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product Category&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;[Discount] )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;filter-context-yu-mdx-de-yi-tong&quot;&gt;Filter Context 与 MDX 的异同&lt;&#x2F;h2&gt;
&lt;p&gt;在 MDX 引擎中，Filter Context 的概念是非常相似的，一般的， MDX 的 filter context 由一下几个部分组成：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Filter axis：在 WHERE 子句中的筛选条件构成了 filter axis&lt;&#x2F;li&gt;
&lt;li&gt;Column axis&#x2F;Row axis: 在 SELECT 子句中的列、行构成了 Column axis&#x2F;Row axis&lt;&#x2F;li&gt;
&lt;li&gt;在 MDX 中，可以通过 &lt;code&gt;[Dim1].[ALL Dim1s]&lt;&#x2F;code&gt; 等语法手动的设置某个维度的筛选条件，改变其筛选条件。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;总的来说，DAX 的 Filter Context 相比 MDX 来说，要复杂的多，当然，也要强大的多，灵活的多，或者在很多场景下，也会有更好的性能：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;MDX 是 多维模型，一个 MDX 就是一个N维多维空间。 而 Power BI 是表-关系模型，每个事实表（根据其筛选关系构建的一个查询子图）都是一个
独立的多维空间。 DAX 更可以动态的创建计算表，因此，灵活性就更大了。&lt;&#x2F;li&gt;
&lt;li&gt;DAX 的 filter context 中， 分为 column based 的 table based，其中 column based 的 filter 是满足 SQL 下沉的
基础的，这样在数据库上执行时，会有更好的效率。
MDX 理论上也可以如此，目前的开源引擎 mondrian 在这方面做得不够，可以参加我整理的 &lt;a href=&quot;&#x2F;blog&#x2F;mdx-optimize&quot;&gt;MDX optimize&lt;&#x2F;a&gt; 一文&lt;&#x2F;li&gt;
&lt;li&gt;MDX 对 filter context 的修改能力也较弱，不过这个理论上是可以通过 MDX 的函数来实现的，不算是引擎的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>数据分析之表达式语言：Tabular</title>
        <published>2024-09-04T00:00:00+00:00</published>
        <updated>2024-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/tabular/"/>
        <id>https://wangzaixiang.github.io/blog/tabular/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/tabular/">&lt;p&gt;本文是数据分析表达式语言系列之二，主要介绍我对 Tabular 的理解。&lt;&#x2F;p&gt;
&lt;p&gt;首先说明，我对 taular 这个产品的熟悉程度是最低的，只是有限的试用了，并重点是在学习 &lt;a href=&quot;https:&#x2F;&#x2F;www.tableau.com&#x2F;zh-cn&#x2F;blog&#x2F;LOD-expressions#:~:text=Tableau&quot;&gt;15 大详细级别表达式&lt;&#x2F;a&gt;
这个系列文档时，按照教程进行的一些练习，重点在与理解 LOD 表达式的使用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chang-jing-1-ke-hu-ding-dan-pin-lu&quot;&gt;场景1: 客户订单频率&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Number of orders per customer]  := { FIXED [Customer Name] : COUNTD([Order ID]) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 行: countd([Customer Name])
&lt;&#x2F;span&gt;&lt;span&gt;- 列: [Number of orders per customer] 作为维度
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个可以理解为：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;计算子图： 订单&lt;&#x2F;li&gt;
&lt;li&gt;以 LOD 为维度时，等同于 DAX 的计算列 (以当前行的 Customer Name为筛选条件，计算 &lt;code&gt;CountD([Order Id])&lt;&#x2F;code&gt; )：&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span&gt; of orders per customer] = CALCULATE( DISTINCTCOUNT(Orders[Order ID]), ALLEXCEPT(Orders[Customer Name]) )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
在这里, LOD expression 相比 DAX 更加简洁，更容易理解。&lt;&#x2F;li&gt;
&lt;li&gt;在每一行上，计算出 Numbers of orders per customer 的值，作为一个维度。&lt;&#x2F;li&gt;
&lt;li&gt;以&lt;code&gt;[Numbers of orders per customer]&lt;&#x2F;code&gt;为筛选维度，进而计算出 &lt;code&gt;countd([Customer Name]&lt;&#x2F;code&gt;) 的值。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;可以基于 [Number of orders per customer] 计算度量，此时，需要使用聚合函数，诸如 SUM, MAX 等，其原理与计算列是一致的。
FIXED LOD 只会计算出单行的值，因此，可以作为计算列直接使用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chang-jing-2-zhen-lie-fen-xi&quot;&gt;场景2: 阵列分析&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;tabular&#x2F;scenario-2-1.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;tabular&#x2F;scenario-2-2.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[客户首次下单时间] := { FIXED [Customer Name] : year(MIN([Order Date])) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 行: year([Order Date])
&lt;&#x2F;span&gt;&lt;span&gt;- 列：SUM([销售额])
&lt;&#x2F;span&gt;&lt;span&gt;- 颜色：[客户首次下单时间] as 维度，排序
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;如果是现实百分比，则分析设置为：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 行: year([Order Date])
&lt;&#x2F;span&gt;&lt;span&gt;- 列：SUM([销售额]) &#x2F; sum({ EXCLUDE [客户首次下单年份]: SUM([销售额])})
&lt;&#x2F;span&gt;&lt;span&gt;- 颜色：[客户首次下单时间] as 维度，排序
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;我这里是通过手写计算公式的方式来实现，官方示例可以通过 表快速计算 来实现，操作更简单。&lt;&#x2F;li&gt;
&lt;li&gt;在能使用LOD 表达的场景来看，确实比 DAX 更加简单。&lt;&#x2F;li&gt;
&lt;li&gt;Tabular 的 数据展示，设计的非常合理，其中，轴除了 column, row 轴两条常规周之外，还有：
&lt;ul&gt;
&lt;li&gt;颜色轴：可作为维度（用于分组）、度量（用于渲染不同的颜色）&lt;&#x2F;li&gt;
&lt;li&gt;大小轴：可用于维度、度量&lt;&#x2F;li&gt;
&lt;li&gt;标签轴：可用于维度、度量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;LOD 本身是一个集合，作为维度使用时，或者其是单行集合，例如 FIXED LOD, 或者 INCLUDE LOD，或者其是多行集合，例如 EXCLUDE LOD。
作为多行集合，需要使用 聚合函数 计算出单个标量值。或者 attr() 函数，如果多行具有相同值，则返回之。&lt;&#x2F;li&gt;
&lt;li&gt;Tablular 提供了一些表间快速计算的功能。（后续单独分析一下 tabular 的表计算函数）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;chang-jing-3-mei-ri-li-run-kpi&quot;&gt;场景3: 每日利润 KPI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;tabular&#x2F;scenario-3.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[当天利润] := { fixed [订单日期]: SUM([利润]) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[当天盈利性质] := 
&lt;&#x2F;span&gt;&lt;span&gt;   if [当天盈利] &amp;gt; 2000 then &amp;quot;高盈利&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;   ELSEIF  [当天盈利] &amp;gt; 0 then &amp;quot;盈利&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;   else &amp;quot;不盈利&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   end
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt; - 行：【当天盈利性质】, countd([订单日期])
&lt;&#x2F;span&gt;&lt;span&gt; - 列： DATETRUNC(&amp;#39;month&amp;#39;, [订单日期])
&lt;&#x2F;span&gt;&lt;span&gt; - 颜色： [当天盈利性质] as 维度  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chang-jing-4&quot;&gt;场景4:&lt;&#x2F;h2&gt;
&lt;p&gt;未完，待续。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>使用 ADT 代数数据类型 进行数据建模</title>
        <published>2024-09-01T00:00:00+00:00</published>
        <updated>2024-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/adt/"/>
        <id>https://wangzaixiang.github.io/blog/adt/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/adt/">&lt;h1 id=&quot;1-shen-me-shi-adt&quot;&gt;1. 什么是 ADT?&lt;&#x2F;h1&gt;
&lt;p&gt;代数数据类型 ADT 是 Haskell 等函数式编程语言中的一个重要概念，通过两种构造方式，即 product type 和 sum type，就可以构造出复杂的
数据结构，并且可以通过 pattern matching 来对这些数据结构进行处理。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sum type&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; a | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Nothing
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt; a b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span&gt; a | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Nil &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Cons&lt;&#x2F;span&gt;&lt;span&gt; a (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; a)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 Scala 和 Rust 中，sum type 是通过 enum 来实现的。可以这样理解， sum type 的取值空间是所有构造子的并集。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;product type&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span&gt; a b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span&gt; a b
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Triple&lt;&#x2F;span&gt;&lt;span&gt; a b c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Triple&lt;&#x2F;span&gt;&lt;span&gt; a b c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 Scala 和 Rust 中，product type 是通过 case class 或 struct 来实现的。可以这样理解， product type 的取值空间
是所有构造子的笛卡尔积。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;很多的基础类型，例如：boolean, int, float 等都可以视为某种 SUM 类型，但在 scala&#x2F;rust 等语言中，我们一般将这些类型视为基础类型
（primitive type），基于这些基础类型，通过 SUM &#x2F; PRODUCT 就可以构造出复杂的数据结构，用于对目标领域的建模。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;she-ji-zhi-shan-yi-jing-shu-ju-zhi-dong-xing-wei-dong-jing-fen-chi&quot;&gt;设计之禅：以静（数据）制动（行为），动静分离&lt;&#x2F;h2&gt;
&lt;p&gt;目前更为流行的面向对象编程（OOP）中，使用类（class）来进行数据建模，在 OOP 中更强调如下的方法：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;继承：即通过创建子类的方式。 OOP 中一个类的子类往往是开放的，可以随意的定义新的子类，提供扩展的属性，并改变父类的行为。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;受 Liskov Substitution Principle 的限制, 子类的行为必顿要与父类一致，现实建模中，很少有真正的 is-a 关系，更多的是 has-a 关系。
大部份的继承关系都是错误的设计，因此，现在语言如 rust&#x2F;go 等都不再提供继承的方式，而是使用组合的方式来实现类似的功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;接口定义：一般的，通过 interface 的方式来定义一组行为，子类（或实现者）提供对 interface 的实现。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OOP 将数据与行为 强行绑定在一起，这样会导致频繁的更新类的定义（扩展方法、变更行为）。一个笑话就是，如果要发送订单的邮件通知，就需要
在订单类中增加一个 sendEmail 方法，如果要发送短信通知，就需要增加一个 sendSMS 方法。假以时日，订单类就会变得臃肿不堪。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在 DDD 中，有一个 充血模型 和 贫血模型 的概念，充血模型是指领域对象具有丰富的行为，而贫血模型则是指领域对象只有数据，没有行为。
很多的 DDD 理论都倾向于充血模型，并使用 OOP 的方式，将数据与行为耦合在一起。但是，这种方式实际上是教条的，或者在很多方面是
自相矛盾的。
在商业系统中，数据结构（实体、数据库结构）是相对稳定的，但行为则是高度不稳定的，会随着时间、空间的变化而变化。因此，将数据与行为
绑定到一起，实际上是不合理的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;函数式编程 与 ADT 更倾向于数据的封闭性（而非扩展性），任何对数据模型的修改，都应该维护到一个 ADT 模型中，并通过类型检查的方式来检查现有的
代码是否有正确的覆盖新的类型，通过静态的类型检查，可以避免很多的运行时错误。
当然，这种方式也确实会带来一定的限制：即动态能力会受到限制。
通常情况下，对复杂的系统，我们会更倾向于追求通过静态类型检查即可保证的正确性，而将需要动态性的部分，限制在一个更小的边界内。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;she-ji-zhi-shan-qiong-jin-mei-ju-zu-gou-fu-gai&quot;&gt;设计之禅：穷尽枚举，足够覆盖&lt;&#x2F;h2&gt;
&lt;p&gt;在 OOP 中，我们一般会将某一类对象抽象抽象为父类、子类的方式，或者 interface、实现类的方式，然后在使用时，通过多态的方式来进行处理。
而在 ADT 中，我们一般会将某一类对象抽象为一个 enum 类型，然后通过 pattern matching 的方式来进行处理。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-json-with-adt&quot;&gt;2. JSON with ADT&lt;&#x2F;h1&gt;
&lt;p&gt;数据结构除了广泛的存在于内存之中，承担着运行过程中的血液和神经的作用，还会被序列化到磁盘、网络中，作为：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;持久化存储&lt;&#x2F;li&gt;
&lt;li&gt;网络传输、数据交换&lt;&#x2F;li&gt;
&lt;li&gt;配置文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;从某个角度来看，这些外部的序列化的数据结构承担着更为重要的作用，因为这些数据结构是更加面向人的，需要有良好的可理解性，同时，一般的，它与
运行期的数据结构是有一定的相关性的，某种程度上决定了内部数据结构与处理代码的设计。&lt;strong&gt;由外而内，外部决定内部&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这些年来，随着 Restful API 的流行，JSON 作为一种轻量级的数据交换格式，已经成为了事实上的标准。很多的系统都使用 JSON 来作为文件存储的格式、
网络传输的格式。相比于 XML，JSON 更加简洁、易读、易写，也更加容易的被程序处理（写一个JSON Parser只需要100-200行代码就足够了，而且性能足够快
，而XML Parser则可能需要上万行代码），相比于二进制格式，JSON 更加容易的被人类理解，这在网络调试、配置文件等方面有着很大的优势。&lt;&#x2F;p&gt;
&lt;p&gt;JSON 的自由也很容易滥用，一些复杂的系统会随着时间的演化，而导致 JSON 结构的不断的变化，出现很多的质量问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;出现大量的冗余字段，或者废弃但遗留的字段。&lt;&#x2F;li&gt;
&lt;li&gt;历史版本的 字段的结构、类型、语义的变化，导致了很多的兼容性和不一致的问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;当混乱发展到一定程度，存储文件结构的变化，会变成整个系统沉重的包袱，此时，在代码处理时，需要面对很多的兼容性问题，很多的代码删不得，改不动，
只能不断的通过补丁的方式，叠加分支的方式，来维护这些历史遗留的问题。在这个时候，我们就会发现，JSON 的自由性，实际上是一种负担。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂的软件世界，其实并不需要太多的自由，相反，更需要的是保证质量的规则，诸如强类型编程语言，相比于动态语言，就失去了一定的自由，但
可以通过类型体系，更好的保证的代码的正确性。所谓：动态语言一时爽，一直动态一直爽，重构代码火葬场。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;同理，rust 语言的 borrow checker 也是一种规则，它限制了程序员的自由，但却可以保证代码的正确性。虽然和编译期的错误交流，对大部份
的初学者是一件痛苦的事情，但是，大部份代码编译通过就可以无错运行，这种感觉是非常美妙的。同理，在code review时，也可以更加专注于
核心逻辑，而无需为一些低级错误而烦恼。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;2-1-json-schema&quot;&gt;2.1 JSON Schema&lt;&#x2F;h2&gt;
&lt;p&gt;类似于XML Schema，&lt;a href=&quot;https:&#x2F;&#x2F;json-schema.org&quot;&gt;JSON Schema&lt;&#x2F;a&gt; 是一种用于描述 JSON 数据结构的规范，它可以描述 JSON 数据结构的类型、结构、约束等信息，本质上就是
JSON 的类型体系。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，JSON schema 相比大部份的编程语言的类型体系，对数据的 constraint 的描述更加丰富，例如：可以描述数据的长度、取值范围、正则表达式等。
我觉得 ADT 中也需要一套 constraint 的描述，这样可以更好的描述数据的约束。
在 design-by-contract 的设计理念中，也需要一种 contract 的描述语言，这些都是目前的语言中缺失的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;通过 JSON schema，我们可以:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用 JSON schema 对 JSON 数据结构进行校验。&lt;&#x2F;li&gt;
&lt;li&gt;在 Visual Code、IntelliJ IDEA 等编辑器中，可以对JSON 编辑来提供更好的提示、补全、校验等功能。&lt;&#x2F;li&gt;
&lt;li&gt;可以将 Schema 作为元信息，在代码生成、文档生成等方面发挥作用，例如 API 文档等。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;2-2-wjson&quot;&gt;2.2 wjson&lt;&#x2F;h2&gt;
&lt;p&gt;在我开发的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;wjson&quot;&gt;wjson&lt;&#x2F;a&gt; 中，提供了一种面向 Scala3 ADT 的 JSON 工具包：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bean&#x2F;JSON 映射支持: 支持 ADT 类型到 JSON 的映射，以及 JSON 到 ADT 类型的映射。&lt;&#x2F;li&gt;
&lt;li&gt;JSON Schema generator: 支持自动根据 ADT 类型生成 JSON Schema，便于在前端、IDE等其他工具中对JSON进行数据提示、校验和代码补全等功能&lt;&#x2F;li&gt;
&lt;li&gt;规划的多版本支持功能：可以在后续版本中，增加新的字段，或者废弃旧的字段，支持新版本软件的向下兼容（新版本软件可以读写旧版本文件），和一定程度的
的向上兼容（旧版本软件可以读新版本文件）。
相关的技术文档参考：&lt;a href=&quot;&#x2F;wjson&#x2F;index.html&quot;&gt;wjson docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>September 2024</title>
        <published>2024-09-01T00:00:00+00:00</published>
        <updated>2024-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2024-09/"/>
        <id>https://wangzaixiang.github.io/monthly/2024-09/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2024-09/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.yoshuawuyts.com&#x2F;tree-structured-concurrency&#x2F;&quot;&gt;Tree-Structured-Concurrency&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在很多编程语言中，对多线程和并发处理，都停留在线程池、锁、消息队列等机制上。Structured Concurrency 在实际业务中，是一个
更为贴合的并发模型。Java 在 19-23 版本中，也提出了一个 Preview 版本的 Structured-Concurrency（我在公司内部项目中，
也参考这个概念，设计了一个Scala 的 Structured Concurrency API）。

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;structured-concurrency.1d3eccef9127ba95.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个作者的一系列文章，都是围绕着Rust 语言中的概念，例如：Self-Reference, Pin， Async&#x2F;Await etc. 值得持续关注学习。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dioxuslabs.com&quot;&gt;Rust GUI&lt;&#x2F;a&gt;
按照文档，跑了一个 Web 示例程序。 感觉：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;API 很熟悉。 rsx! 相当与将 JSX 和 react 风格迁移到 Rust 中。&lt;&#x2F;li&gt;
&lt;li&gt;一种开发模式，可以支持 WEB, Desktop, TUI, 确实很有吸引力。到了 WEB 中也运行的是 Rust（基于WASM） 而非 JavaScript。&lt;&#x2F;li&gt;
&lt;li&gt;dx 风格也和 cargo&#x2F;npm 风格很相似，开发模式下，修改源代码自动编译、热加载。简单的例子体验不错，不知道在复杂的项目中，这个效率会如何？
现在来看，是有些担心的，一是 rust 编译速度，二是整个 wasm 重新加载，hot reload 相当于是整个应用了。&lt;&#x2F;li&gt;
&lt;li&gt;wasm 的编译大小，目前看一个简单的例子（dx new 的示例代码)，编译后大小为 957K, br压缩后为 240K。 更复杂的项目会有多大呢？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raphlinus.github.io&#x2F;rust&#x2F;gui&#x2F;2022&#x2F;05&#x2F;07&#x2F;ui-architecture.html&quot;&gt;Xilem: an architecture for UI in Rust&lt;&#x2F;a&gt;
一个 React 风格的 Rust GUI 框架，架构设计与 flutter 很相似，这个作者的 blogs 上有很多这方面的思考，介绍了&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;view tree: 短生命周期，每次 render 都会重新创建，仅保留足够长的时间来协助事件分派，然后与下一个版本进行比较，然后就被销毁。
纯值对象。&lt;&#x2F;li&gt;
&lt;li&gt;widget tree：长生命周期，每次 render 会更新。&lt;&#x2F;li&gt;
&lt;li&gt;view state tree. 跨 circle 持续存在。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如何维护这三颗树，实现高效的 incremental update，这与&lt;a href=&quot;&#x2F;blog&#x2F;virtual-dom&quot;&gt;DOM 更新技术对比：Virtual DOM or Incremental DOM&lt;&#x2F;a&gt; 中介绍
的内容是同一个主题。&lt;&#x2F;p&gt;
&lt;p&gt;文章也对比了与 immediate mode GUI(egui) 的区别。与 &lt;a href=&quot;https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;architecture&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt; 架构的区别。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raphlinus.github.io&#x2F;ui&#x2F;druid&#x2F;2019&#x2F;11&#x2F;22&#x2F;reactive-ui.html&quot;&gt;Towards a unified theory of reactive UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1opLymkreSTFfxygjzSLYI_uH7j1YFfE6DLl8RfCiw7E&#x2F;edit?pli=1#slide=id.p&quot;&gt;增量计算之旅&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;xilem&#x2F;blob&#x2F;main&#x2F;ARCHITECTURE.md&quot;&gt;系列架构文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;mpp-olap&quot;&gt;MPP &amp;amp; OLAP&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;glaredb.com&quot;&gt;GlareDB&lt;&#x2F;a&gt; 又一个跨库执行SQL的引擎，从目前官网上没有看到与性能相关的信息，不知道这方面的表现如何。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sohu.com&#x2F;a&#x2F;783829162_121124375&quot;&gt;Databricks 收购了 Apache Iceberg背后公司 Tabular&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iceberg.apache.org&quot;&gt;iceberg&lt;&#x2F;a&gt; 开放的分析型表存储格式：支持
&lt;ol&gt;
&lt;li&gt;schema evolution&lt;&#x2F;li&gt;
&lt;li&gt;隐藏分区&lt;&#x2F;li&gt;
&lt;li&gt;分区结构演进&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snowflake.com&quot;&gt;snowflake&lt;&#x2F;a&gt; 云数据仓库，支持&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=bZOvAKGkzpQ&quot;&gt;DuckDB internals&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;in process like sqlite.&lt;&#x2F;li&gt;
&lt;li&gt;1.1.0 性能优化
&lt;ul&gt;
&lt;li&gt;版本增加了对 join 的优化，可以根据右表的过滤结果，来优化左表的筛选。&lt;&#x2F;li&gt;
&lt;li&gt;对 CTE 的 material 的优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;extension 支持 rust开发&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑 DuckDB 作为数据分析的基础引擎，以解决复杂分析场景下的性能问题，与数据库兼容性问题。不同的源数据库，其提供的查询能力差别较大，
（语法，函数）等，对 Full JOIN能力、窗口函数的计算能力等， 逐一适配成本太大，考虑使用 DuckDB 作为数据分析引擎，可以解决这个问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;本月开始，计划阅读 DuckDB 的源代码，在阅读过程中整理文档，有几个目的：一是阅读一个优秀的OLAP引擎的源代码，加深对 OLAP 引擎的理解；
二是评估在公司产品中集成 duckdb, 提高产品的分析能力。三是顺便重温一下 C++ 的知识，把自己从 C++ 的陌生区转移到熟悉区来。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prql&#x2F;prql&quot;&gt;Pipelined Relational Query Language&lt;&#x2F;a&gt; 一个更为结构化的SQL描述&lt;&#x2F;p&gt;
&lt;p&gt;在数据分析时，对复杂的SQL进行理解，往往是非常头痛的，使用 with CTE 可以让这个过程便得更为结构化， PRQL 提供了另外一个参考的视角。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hex.tech&quot;&gt;Hex&lt;&#x2F;a&gt; 一个蛮有特色的数据分析产品，可以体验一下其产品设计。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Notebook 风格，一个 notebook 就是一个 workspace，支持 Python, SQL两种分析语言。&lt;&#x2F;li&gt;
&lt;li&gt;这些计算目前来看是执行在 server 上的&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;[Rill Opensource](Dashboards that move as fast as your business)
体验了一下，作为 EndUser，功能还比较粗燥。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;web-visualization&quot;&gt;Web &amp;amp; Visualization&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NoBuild&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;world.hey.com&#x2F;dhh&#x2F;you-can-t-get-faster-than-no-build-7a44131c&quot;&gt;You can&#x27;t get faster than No Build&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;x.com&#x2F;dhh&#x2F;status&#x2F;1769903387527790975&quot;&gt;#NoBuild on X.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;world.hey.com&#x2F;dhh&#x2F;modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755&quot;&gt;Modern web apps without JavaScript bundling or transpiling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;#nobuild 对 Web 的众多 pack 框架总是很不爽，mark 一下。&lt;&#x2F;p&gt;
&lt;p&gt;之前也测试过一个网站，https:&#x2F;&#x2F;shoelace.style&#x2F;components&#x2F;badge 由于采用了 HTTP&#x2F;2，在不pack的情况下，也能快速访问。
DHH 是 NoBuild 的发起人，也是 Webpacker(非webpack) 的创建者。（不过，如果使用 ts，还是需要一个 transpiling）&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;减少了 build 时间&lt;&#x2F;li&gt;
&lt;li&gt;由于不再bundle，对单个module的修改，无需重新build整个项目，以及重新下载整个大的bundle文件。&lt;&#x2F;li&gt;
&lt;li&gt;由于不再bundle，对多页面应用，可以更好的利用浏览器的缓存机制。（不同页面 bundle 会导致重复的下载）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;反面意见：https:&#x2F;&#x2F;dev.to&#x2F;konnorrogers&#x2F;why-we-still-bundle-with-http2-in-2022-3noo&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;太多的碎片，会产生瀑布式的请求，因为有一些请求是依赖于其他请求的，这种依赖关系，会导致 HTTP&#x2F;2 也无法发挥。（优化：将深层次的 import
提升到上一层来？改进采用 modulepreload）&lt;&#x2F;li&gt;
&lt;li&gt;无法享受 tree shaking 带来的好处，后者可以减少下载的大小。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Maybe 最佳实践:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;开发阶段，不使用 pack，减少 build 时间，并且方便 Hot Reload&lt;&#x2F;li&gt;
&lt;li&gt;生产阶段，转为 package, module 两个层级，在 package 上进行 pack, 一个 package 作为一个 前端的单元。源代码级别的 module 太细粒度了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以 shoelace 项目为例，我们可以将组件分为：高频、低频、庞大的组件，拆分为3-5个 package。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;levelup.gitconnected.com&#x2F;signals-behind-the-scenes-19cbcb6b802b&quot;&gt;Signals behind the scenes&lt;&#x2F;a&gt; 介绍了响应式款架 中
Signal API 的实现原理。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Manager: 是我设计的一个更为宏观层面（响应联路更长、且支持异步处理）的前端变量响应式管理器，目前在内部产品中使用，后续整理成技术文章。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;ekino-france&#x2F;webassembly-the-future-of-backend-development-b40bdc7c5cb4&quot;&gt;Wasm: 2023年报告&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;作为 Plugin 使用。 例如 nginx plugin。相比 LUA 来说，可以提供更好的性能、完成更复杂的功能，以及使用开发者更熟悉的编程语言。&lt;&#x2F;li&gt;
&lt;li&gt;目前，我觉得最为缺失的，是缺少 Debugger 支持，对开发者来说，这是一个很大的障碍。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.scala-js.org&#x2F;news&#x2F;2024&#x2F;09&#x2F;28&#x2F;announcing-scalajs-1.17.0&#x2F;&quot;&gt;scala-js 1.17.0 支持 Wasm&lt;&#x2F;a&gt; 暂时还是实验性质。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;keynmol&#x2F;scalajs-wasm-game-of-life&quot;&gt;Game of life Demo in scala-js WASM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Vega-altair: Declarative Visualization in Python 一个 Python 的可视化库，支持声明式的可视化设计。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vega.github.io&#x2F;vega-lite&#x2F;&quot;&gt;Vega-Lite&lt;&#x2F;a&gt; 基于 Vega，更偏向于用户层, 数据描述式风格&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vega.github.io&#x2F;vega&#x2F;&quot;&gt;Vega&lt;&#x2F;a&gt; 一个更底层的图表描述语言，更归一化，命令式风格&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;@vega&quot;&gt;vega on observablehq&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;@vega&#x2F;how-vega-works&quot;&gt;How vega works&lt;&#x2F;a&gt;: 一篇介绍 vega 的内部workflow的文章，pipeline(data flow) + react 是其核心。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vega.github.io&#x2F;vega&#x2F;about&#x2F;vega-and-d3&#x2F;&quot;&gt;Vega and D3&lt;&#x2F;a&gt; d3相比vega更为low level&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;234762889&quot;&gt;技术人员眼中的BI之可视化 —— 标准家：Vega &amp;amp; Vega-Lite&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当使用Vega-Lite和Voyager时，总有种”小tableau“的感觉，和tableau神似。这也引出了是不是有了Vega-Lite和Voyager，
我们其实就具备了一个小型的BI。
Vega 与 Tableau 有相近的渊源。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;不知道 vega 的性能表现如何？可以评估使用 wasm 或者 webgl&#x2F;webgpu 来进行加速？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 https:&#x2F;&#x2F;vega.github.io&#x2F;vega&#x2F;about&#x2F;vega-and-d3&#x2F; 文中提到了 canvas 性能与 SVG 的对比：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过引入一个中间层 scenegraph, Vega 可以渲染为 canvas 或者 SVG， 在完整刷新时，Canvas 可以提供2-10倍的速度提升
而 SVG 则更适合于无限放大，可打印能力。Vega 可以扩展到使用 WebGL 来进行渲染（不过，https:&#x2F;&#x2F;github.com&#x2F;vega&#x2F;vega-webgl-renderer
这个项目似乎已经8年没有维护了，其Demo在现有的浏览器中都无法正确运行）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;monthly&#x2F;2024-09&#x2F;vega-arch.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;observablehq&#x2F;framework&quot;&gt;Observable Framework&lt;&#x2F;a&gt; JS&#x2F;TS 的 notebook.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;aralroca&#x2F;build-reactive-web-components-with-ssr-3pb9?utm_source=dormosheio&amp;amp;utm_campaign=dormosheio&quot;&gt;Build Reactive Web Components with SSR&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;brisa.build 这个 framework 还没有open source, 从 doc 来看，提供的 API 尤其是 CLI API 比较友好。 Lit项目的 SSR 感觉还不是很简单。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;books&quot;&gt;Books&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本月入手 rust-under-the-hood 从生成的汇编代码来理解 Rust 语言。&lt;&#x2F;p&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;rust-under-the-hood.ba739e2bbbce9dfe.png&quot; &#x2F;&gt;
&lt;p&gt;之前也断续阅读过一些 Rust 编译生成的汇编代码，确实，从更低成本的角度来理解语言特性和概念，往往会带来更为深刻的理解。更何况
Rust 自身也是面向底层的一门语言，各种特性的设计都与内存、CPU 优化密切关联。很多在上层复杂的概念，往往只是在上层中不同
角度的投影，在底层反而简单明了。&lt;&#x2F;p&gt;
&lt;p&gt;赶在月底之前，把这本书大概翻了一遍，对 Rust &#x2F; LLVM 的代码优化有了进一步的了解。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>数据库查询优化相关技术收集 ...</title>
        <published>2024-08-22T12:00:00+00:00</published>
        <updated>2024-08-22T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/sql-optimize/"/>
        <id>https://wangzaixiang.github.io/blog/sql-optimize/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/sql-optimize/">&lt;h2 id=&quot;you-hua-ce-lue-summary&quot;&gt;优化策略 Summary&lt;&#x2F;h2&gt;
&lt;p&gt;每一个章节都可以写若干论文&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Expression Rewriter&lt;&#x2F;li&gt;
&lt;li&gt;Filter Push-down&lt;&#x2F;li&gt;
&lt;li&gt;Join
&lt;ul&gt;
&lt;li&gt;算法选择： Hash(parallel, grace), Sort(full, partial),&lt;&#x2F;li&gt;
&lt;li&gt;表顺序&lt;&#x2F;li&gt;
&lt;li&gt;filter push-down&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Subquery as Join
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ericfu.me&#x2F;subquery-optimization&#x2F;&quot;&gt;子查询的查询优化&lt;&#x2F;a&gt;： Executor -&amp;gt; Evaluator -&amp;gt; Executor 的执行模式是非常低效的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ericfu.me&#x2F;calcite-top-down-planner&quot;&gt;Calcite 中新增的 Top-down 优化器&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Window 函数优化
&lt;ul&gt;
&lt;li&gt;窗口：重用窗口、增量式窗口&lt;&#x2F;li&gt;
&lt;li&gt;聚合：增量式聚合&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;group-by + 聚合函数优化
&lt;ul&gt;
&lt;li&gt;分区: map-reduce&lt;&#x2F;li&gt;
&lt;li&gt;avg() 转换为 SUM()&#x2F;COUNT()&lt;&#x2F;li&gt;
&lt;li&gt;消除 grouped dataframe&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;减枝
&lt;ul&gt;
&lt;li&gt;裁剪列&lt;&#x2F;li&gt;
&lt;li&gt;裁剪表（关联）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;索引优化
&lt;ul&gt;
&lt;li&gt;minmax&lt;&#x2F;li&gt;
&lt;li&gt;bloom&lt;&#x2F;li&gt;
&lt;li&gt;bitmap&lt;&#x2F;li&gt;
&lt;li&gt;sorted index&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;vectorized using SIMD + GPU&lt;&#x2F;li&gt;
&lt;li&gt;cache, material CTE&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;mysql&quot;&gt;MySQL&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;select-optimization.html&quot;&gt;Optimizing SELECT Statements&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;where-optimization.html&quot;&gt;WHERE Clause Optimization&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;移除不必要的括号 (表达式优化)&lt;&#x2F;li&gt;
&lt;li&gt;Constant folding &lt;code&gt;(a&amp;lt;b AND b=c) AND a=5&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;b&amp;gt;5 AND b=c AND a=5&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Constant condition removal.&lt;&#x2F;li&gt;
&lt;li&gt;count(*) 优化&lt;&#x2F;li&gt;
&lt;li&gt;在没有 group by 时， having 合并到 WHERE 中&lt;&#x2F;li&gt;
&lt;li&gt;where 下沉到 join 表&lt;&#x2F;li&gt;
&lt;li&gt;constant tables 提前读取&lt;&#x2F;li&gt;
&lt;li&gt;join 顺序：如果 order by &#x2F; group by 字段来源于单个表，则这表优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;range-optimization.html&quot;&gt;Range Optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;window-function-optimization.html&quot;&gt;Window Function Optimization&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;如果子查询具有窗口函数，则禁用子查询的派生表合并。子查询总是具体化的。&lt;&#x2F;li&gt;
&lt;li&gt;半连接不适用于窗口函数优化，因为半连接适用于 WHERE和中的子查询JOIN ... ON，其中不能包含窗口函数。&lt;&#x2F;li&gt;
&lt;li&gt;优化器按顺序处理具有相同排序要求的多个窗口，因此可以跳过第一个窗口之后的排序。&lt;&#x2F;li&gt;
&lt;li&gt;优化器不会尝试合并可以在单个步骤中评估的窗口（例如，当多个 OVER子句包含相同的窗口定义时）。
解决方法是在子句中定义窗口并在 WINDOW子句中引用窗口名称OVER。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;subquery-optimization.html&quot;&gt;子查询、派生表、视图与CTE的优化&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;subquery: scalar subquery, 1-row subquery, or N-rows subquery&lt;&#x2F;li&gt;
&lt;li&gt;derived table &lt;code&gt;select ... from (subquery) as tbl&lt;&#x2F;code&gt; or &lt;code&gt;select * from JSON_TABLE(arg_list) as tbl&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;view reference&lt;&#x2F;li&gt;
&lt;li&gt;Common Table Expression&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;优化策略：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;IN, = NAY, EXISTS&lt;&#x2F;code&gt; subquery =&amp;gt; Semijoin &#x2F; materialization &#x2F; Exists-Strategy&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;NOT IN, &amp;lt;&amp;gt; ALL, NOT EXITS&lt;&#x2F;code&gt; subquery=&amp;gt;  materialization &#x2F; Exists-Strategy&lt;&#x2F;li&gt;
&lt;li&gt;derived table, view, CTE =&amp;gt; merge into query &#x2F; material&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Semi-join 优化：将子查询转化为 Semi-Join, 如果子查询使用了 range 操作，是无法进行改优化的。&lt;&#x2F;li&gt;
&lt;li&gt;物化：当子查询没有引用外部表的字段时，是可以物化的&lt;&#x2F;li&gt;
&lt;li&gt;(a, b, c) IN (select ... ) 转化为 exists (select ... where ...)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;derived-table-optimization.html&quot;&gt;Merging&lt;&#x2F;a&gt;: 在 Mergeing 后再进行化简，避免一次重复的子查询。&lt;&#x2F;li&gt;
&lt;li&gt;Condition pushdown：将查询条件下压到 CTE。&lt;&#x2F;li&gt;
&lt;li&gt;如果都不能走上述优化，则可能按需执行，在 select 部分，会对美航执行子查询，因而会出现性能问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;clickhouse&quot;&gt;ClickHouse&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;docs&#x2F;en&#x2F;guides&#x2F;joining-tables#optimizing-join-performance&quot;&gt;Join 算法&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hash, parallel hash&lt;&#x2F;li&gt;
&lt;li&gt;grace hash: right table 过大时，将 hashtable 拆分为多个，每次仅在内存中存放一个分区，其他放到磁盘保存。&lt;&#x2F;li&gt;
&lt;li&gt;full sorting merge: 左表、右表都在关联字段上排序&lt;&#x2F;li&gt;
&lt;li&gt;partial merge：右表在关联字段上排序。&lt;&#x2F;li&gt;
&lt;li&gt;direct: 类似于 Hash，针对于特定的存储引擎类型。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;clickhouse-joins.47c9574879666d92.png&quot; &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;blog&#x2F;clickhouse-fully-supports-joins-part1&quot;&gt;Join Types supported in ClickHouse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;blog&#x2F;clickhouse-fully-supports-joins-hash-joins-part2&quot;&gt;Hash Join, Parallel HashJoin, Grace HashJoin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;blog&#x2F;clickhouse-fully-supports-joins-full-sort-partial-merge-part3&quot;&gt;Full Sort Merge, Partial Merge Jooin&lt;&#x2F;a&gt;
&lt;blockquote&gt;
&lt;p&gt;从文档上看，如果右表已经是排序的，也需要做一次排序，感觉这个是多余的&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;blog&#x2F;clickhouse-fully-supports-joins-direct-join-part4&quot;&gt;Direct Join&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;subquery-you-hua&quot;&gt;Subquery 优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;left join&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; o_orderkey, (
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; c_name
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; CUSTOMER
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c_custkey = o_custkey
&lt;&#x2F;span&gt;&lt;span&gt;) AS c_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; ORDERS;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; o_orderkey, c_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; orders &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; customers on c_custkey = o_custkey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;semi join&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; CUSTOMER
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c_nationkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;86 &lt;&#x2F;span&gt;&lt;span&gt;AND EXISTS(
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; ORDERS
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; o_custkey = c_custkey
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; c_custkey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; customer 
&lt;&#x2F;span&gt;&lt;span&gt;semi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; orders on o_custkey = c_custkey 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; _nationkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;86
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;group by&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; CUSTOMER
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; (
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(o_totalprice)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; ORDERS
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; o_custkey = c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; c_custkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(o_totalprice)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span&gt; customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;left join&lt;&#x2F;span&gt;&lt;span&gt; orders on o_custkey = c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; c_custkey
&lt;&#x2F;span&gt;&lt;span&gt; having &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(o_totalprice)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;集合比较&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; c_name
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; CUSTOMER
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c_nationkey &amp;lt;&amp;gt; ALL (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; s_nationkey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; SUPPLIER);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; c_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; customer anti semi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt; supplier on c_nationkey = s_nationkey;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Mandelbrot-set CPU vs GPU comparison</title>
        <published>2024-08-17T15:19:42+00:00</published>
        <updated>2024-08-17T15:19:42+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/mandelbrot-gpu/"/>
        <id>https://wangzaixiang.github.io/blog/mandelbrot-gpu/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/mandelbrot-gpu/">&lt;p&gt;本文承接上一片文章 [wgpu 代码阅读](@&#x2F;blog&#x2F;2024-08-10-Trying WGPU&#x2F;index.md), 在阅读 wgpu 代码的基础上，通过一个实例来对比 CPU 和 GPU 的性能。&lt;&#x2F;p&gt;
&lt;p&gt;算法： Mandelbrot Set，其中 CPU 版本来自 《 Programming Rust 》第二版第2章（单线程）、第19章（多线程），
详细代码可以参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;mandelbrot_gpu&#x2F;blob&#x2F;main&#x2F;src&#x2F;cpu.rs&quot;&gt;单线程版本&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;mandelbrot_gpu&#x2F;blob&#x2F;main&#x2F;src&#x2F;cpu_par.rs&quot;&gt;多线程版本&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;参考&lt;a href=&quot;https:&#x2F;&#x2F;wgpu.rs&quot;&gt;wgpu-rs&lt;&#x2F;a&gt;的例子，我编写了一个GPU的版本，详细的代码请参考：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;mandelbrot_gpu&#x2F;blob&#x2F;main&#x2F;src&#x2F;gpu.rs&quot;&gt;GPU版本&lt;&#x2F;a&gt;，
对这三个版本分别进行对照性能测试：（测试环境：M1 Max, 64G）&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;CPU(1 thread)&lt;&#x2F;th&gt;&lt;th&gt;CPU(parallel)&lt;&#x2F;th&gt;&lt;th&gt;GPU&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3.097s&lt;&#x2F;td&gt;&lt;td&gt;0.368s&lt;&#x2F;td&gt;&lt;td&gt;0.064s&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1x&lt;&#x2F;td&gt;&lt;td&gt;8.4x&lt;&#x2F;td&gt;&lt;td&gt;48.4x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;从这个测试结果来看，使用 GPU 进行加速的效果是非常显著的，相比单线程有 48.4 倍的加速效果。相对于多线程的加速效果也有 6 倍的提升。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;通过从零开始构建一个 GPU 实例，对 webgpu 的 API 和一些概念 有了更好的理解。算是入了个门了。&lt;&#x2F;li&gt;
&lt;li&gt;目前基于 webgpu 的开发模式还是太繁琐了，相当于把现代语言的 link, loading 过程都要在代码中实现一次。类似于 Rust GPU、Bend 这样的技术
未来一定会有巨大空间，让 GPU 开发的门槛与 CPU 开发对齐起来。&lt;&#x2F;li&gt;
&lt;li&gt;类似于 dataframe 一类的向量计算，GPU 应该具有非常巨大的想象空间。可以和 SIMD 形成更好的搭配：SIMD 更轻便，但限制多，提升倍数有限。
GPU 重（内存复制、CPU&#x2F;GPU协同），支持复杂的分支，具有理论上更高的并发度。而目前，dataframe技术，即便在 SIMD 上，也优化有限，
大部份的项目主要依赖语言级的 vectorize, 显示的 SIMD 算法并未大量使用，更谈不上 GPU 了，这一块，有非常广阔的发展空格。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;参考资料：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webgpufundamentals.org&#x2F;webgpu&#x2F;lessons&#x2F;webgpu-fundamentals.html&quot;&gt;wgpu 教程&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HigherOrderCO&#x2F;Bend&quot;&gt;Bend: 并行编程语言&lt;&#x2F;a&gt; 可以直接在 GPU 上执行，基于 HVM2，类 python 的并行编程语言，
不过目前仅支持 Cuda GPU。在我的 M1 Max 上无法体验。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-gpu.github.io&#x2F;blog&#x2F;transition-announcement&#x2F;&quot;&gt;Rust GPU&lt;&#x2F;a&gt; 直接将 Rust 编译到 GPU 上执行，
相比基于 wgpu 进行开发，易用性有显著的差异（ webgpu 的开发模式还是很 low-level, 需要模拟 linker, loading 等复杂逻辑，
优点回到上世纪使用 win32 API 编写 Windows 图形界面的感觉，我今天是花了3-4个小时，才让 mandelbrot 的GPU版本跑起来。
而 RustGPU&#x2F;Bend 等则试图让 GPU 开发更接近于现代的编程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;optimizing-with-simd&#x2F;&quot;&gt;faster Mandelbrot with SIMD&lt;&#x2F;a&gt;
这个算法如何利用 SIMD 进行优化，可以作为一个学习的例子。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>August 2024</title>
        <published>2024-08-16T09:19:42+00:00</published>
        <updated>2024-08-16T09:19:42+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/monthly/2024-08/"/>
        <id>https://wangzaixiang.github.io/monthly/2024-08/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/monthly/2024-08/">&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2024&#x2F;08&#x2F;12&#x2F;Project-goals.html&quot;&gt;Rust Project goals for 2024&lt;&#x2F;a&gt; 为 Rust Edition 2024 进行准备&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&#x2F;blog&#x2F;2024&#x2F;08&#x2F;22&#x2F;scala-3.5.0-released.html&quot;&gt;Scala 3.5.0&lt;&#x2F;a&gt; 正式发布
&lt;ol&gt;
&lt;li&gt;scala-cli 作为 scala 命令的替代，正式进入到发布版本。这个命令目前也是我经常使用的工具，结合 helix 编辑器，有基本的 IDE 功能，很好用了。&lt;&#x2F;li&gt;
&lt;li&gt;Named Tuple: 这是我很期待的特性，很多场景使用 Case Class 有点重，使用 Tuple 简单轻量，但 _1, _2 这样的名字实在不可阅读。
体验一下，看看是否可以把我们代码中的 Tuple 都替换到 NamedTuple。&lt;&#x2F;li&gt;
&lt;li&gt;trait Dynamic&#x27;s selectDynamic&#x2F;applyDynamic 支持 inline &lt;a href=&quot;https:&#x2F;&#x2F;inoio.de&#x2F;blog&#x2F;2024&#x2F;07&#x2F;15&#x2F;scala3-macros-part2&#x2F;&quot;&gt;文章链接&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;WasmGC
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;dartlang&#x2F;dart-3-4-bd8d23b4462a&quot;&gt;Dart3.5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.virtuslab.com&#x2F;p&#x2F;scala-to-webassembly-how-and-why&quot;&gt;ScalaJS&lt;&#x2F;a&gt; 文中也提到为什么是 ScalaJS 而非 Scala Native&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rust &amp;amp; Flutter &amp;amp; Web
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fzyzcjy&#x2F;flutter_rust_bridge&quot;&gt;Rust Flutter Bridge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mcmah309&#x2F;rust_core&quot;&gt;rust_core&lt;&#x2F;a&gt; 模拟 rust core library 的 dart 库&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thlorenz.com&#x2F;rid-site&#x2F;&quot;&gt;Rust Integrated Dart&lt;&#x2F;a&gt; Dart 为 main, Rust 为 library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;mpp&quot;&gt;MPP&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HigherOrderCO&#x2F;hvm&quot;&gt;Higher-order Virtual Machine2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HigherOrderCO&#x2F;Bend&quot;&gt;Bend: 并行编程语言&lt;&#x2F;a&gt; 类 python 的并行编程语言，可以执行在 Cuda GPU 上执行，基于 HVM2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tonbo.io&#x2F;blog&#x2F;introducing-tonbo&quot;&gt;tonbo&lt;&#x2F;a&gt; Arrow系的数据库存储引擎，基于 LSM、Type Safe Structured Storage, async operation, WASM support.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-gpu.github.io&#x2F;blog&#x2F;transition-announcement&#x2F;&quot;&gt;Rust GPU&lt;&#x2F;a&gt; 直接将 Rust 编译到 GPU 上执行，易用性相比 wgpu 更简单&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wgpu.rs&quot;&gt;wgpu&lt;&#x2F;a&gt; Rust 下的 WebGPU API。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;uwheel.rs&#x2F;post&#x2F;datafusion_uwheel&#x2F;&quot;&gt;uwhell&lt;&#x2F;a&gt; 针对时序数据分析的 DataFusion 优化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;web&quot;&gt;Web&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eisenbergeffect.medium.com&#x2F;web-components-2024-winter-update-445f27e7613a&quot;&gt;2024 state of web components&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eisenbergeffect.medium.com&#x2F;2023-state-of-web-components-c8feb21d4f16&quot;&gt;2023 state of web components&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.quadratichq.com&quot;&gt;spreadsheet with Python, SQL, and AI&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;filtra.io&#x2F;rust-quadratic-aug-24&quot;&gt;Building A Spreadsheet in Rust with WASM and WebGL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pixijs.com&quot;&gt;pixi.js, 一个基于WebGL的 Sprites 库&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&quot;&gt;nushell&lt;&#x2F;a&gt; 已作为我的 bash 的替代品&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lsd-rs&#x2F;lsd&quot;&gt;lsd&lt;&#x2F;a&gt; 已作为我的 ls 替代品&lt;&#x2F;li&gt;
&lt;li&gt;tree-sitter powered tools
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;helix-editor.com&quot;&gt;helix editor&lt;&#x2F;a&gt;: 已作为我的 vi 的替代品，无依赖，良好的 light IDE.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ast-grep&#x2F;ast-grep&quot;&gt;ast-grep&lt;&#x2F;a&gt;: 代码搜索利器&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;difftastic.wilfred.me.uk&quot;&gt;difftastic&lt;&#x2F;a&gt;： 已作为我的 git diff 替代品，代码对比更清爽&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust vs C++: A Performance Comparison</title>
        <published>2024-08-15T09:19:42+00:00</published>
        <updated>2024-08-15T09:19:42+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/rust-cpp-comparison/"/>
        <id>https://wangzaixiang.github.io/blog/rust-cpp-comparison/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/rust-cpp-comparison/">&lt;p&gt;本文内容节选自：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;rustaceans&#x2F;c-vs-rust-a-performance-comparison-46d1a669beb1&quot;&gt;Rust vs C++: A Performance Comparison. Part 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;rustaceans&#x2F;rust-vs-c-a-performance-comparison-part-2-646ceeb1fbd4&quot;&gt;Rust vs C++. A Performance Comparison. Part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;rustaceans&#x2F;rust-vs-c-a-performance-comparison-part-3-effective-abstractions-e740e8262ce8&quot;&gt;Rust vs C++. A Performance Comparison. Part 3. Effective abstractions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Aliasing 数据别名&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reference 不同于 raw pointer：总是有效的指针（除了 danglin ），对齐。&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;T 确保数据不可变，可以进行寄存器存储等激进的优化措施。这在C++中并不可行。&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;mut T 可以确保独占，在本文中的案列中，mul_by_2 的 src 和 dest 可以确保不会引用同一个区域
（两个slice无数据重叠），因而在生成的代码中，可以进行如下的优化：使用 movdqu 等指令一次移动 16 字节内容（相当于2个u64)。&lt;&#x2F;li&gt;
&lt;li&gt;如果是 *const T 指针，则不会保证引用同一个区域，需要先进行检测，才能使用 movdqu 等指令进行移动处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;验证代码 &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=release&amp;amp;edition=2021&amp;amp;gist=412780e50ae0ab4c8c62bf8869808897&quot;&gt;playgroud 链接&lt;&#x2F;a&gt;，
可以查看其生成的ASM代码的差异&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Move 语义
C++ 的 std::move 模拟了一个 move 语义，但又不能象 Rust 一样的保证原始变量不能再被访问。我对 C++ 11引入的这些概念
并不熟悉，只是感觉 std::move 和 std::forward 相比 rust 来说，要复杂很多。&lt;&#x2F;p&gt;
&lt;p&gt;通过 move 语义，编译期可以进行更多的优化，比如在函数调用时，可以选择不再复制数据，而是直传递用数据的指针，这样可以避免数据的复制。
验证代码：&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=release&amp;amp;edition=2021&amp;amp;gist=19b61fbf97f1734cdb6b52801b2ab03c&quot;&gt;move playground&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;由于 rust 做了太多的优化，如果结构体较小的话，就直接通过寄存器传递参数了，反而可能不走地址传递的优化。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;rust-cpp-comparison&#x2F;rust-c++-1.jpg&quot; alt=&quot;截图&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic dispatch
C++ 的 VTBL 开销对 virtual 函数来说是必不可少的，及每个对象都会携带一个 VTBL 指针，除了占用内存的
开销之外，VTBL调用也会是2次访问，同时也阻碍了 inline 的优化。
而 Rust 的 Trait 可以通过 Generic 来实现完全静态的多态，除了会增加代码体积之外，无而外开销。
也可以通过&amp;amp;dyn 方式实现动态的多态。算是一个不错的平衡。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Struct Layout and Padding.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 的 struct 的内存布局与字段的定义顺序有关，可能会消耗更多的内存。而 Rust 默认则最优化内存布局，
从而减少内存占用。(对 vec&lt;struct&gt; 这样的应用，会因为减少内存的占用而提高 cache 命中率，从而提高性能)&lt;&#x2F;li&gt;
&lt;li&gt;Rust 的 enum 类型很难在C++中表达&lt;&#x2F;li&gt;
&lt;li&gt;诸如 Option&lt;T&gt; 这样的类型对 &amp;amp;T 来说是零开销的，即根本不存在 tag 的开销。这也是一个很神奇的设计，&lt;&#x2F;li&gt;
&lt;li&gt;兼顾简洁和性能，堪称 Zero Cost Abstract 的典范。再看看 Scala 的 Option 瞬间就不香了。&lt;&#x2F;li&gt;
&lt;li&gt;在 Rust 中很广泛的使用 struct 嵌套的方式来定义新的数据类型，包括 Rc, RefCell 等，而在 Scala 中为了
到达类似的zero cost效果，可以通过 opaque type 来实现，但是这样的代码会更加复杂，还是 Rust 的设计更加优雅。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Compile-time computations.
应该说 comptime 方面，Rust 通过 const, constexp 关键字提供了简单，但并不够强大的支持。
在这方面，C++、Zig、Scala语言都走得更远。不过，Rust 中，我们可以通过 Macro 来实现相似的功能。
或许，在 comptime 这一块，最优特色的应该是 zig 语言了。&lt;&#x2F;p&gt;
&lt;p&gt;当然 Scala 的 Macro 也是非常完备的，不过复杂性也有些令人生畏了。&lt;&#x2F;p&gt;
&lt;p&gt;我在 wsql&#x2F;wjson 这两个库的开发中，借助于 Macro 的能力，提供了用户友好的API，这些没有 macro 的助力，是不可能的。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;从 ADT 类型自动提供 ResultSetMapping &#x2F; JsonValueMapping 功能（在 Java 中有个 mapstruct 的框架，不够显然
比不上 wjson&#x2F;wsql 提供的映射支持的简洁和强大）&lt;&#x2F;li&gt;
&lt;li&gt;wsql 对 mysql insert batch 的自动改写&lt;&#x2F;li&gt;
&lt;li&gt;wsql 中提供的 BeanBuilder 提供了类型强大的 编译期间的 BeanCopy 功能。兼顾性能与 type safe.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>MDX 执行引擎优化思路 ...</title>
        <published>2024-08-10T12:00:00+00:00</published>
        <updated>2024-08-10T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/mdx-optimize/"/>
        <id>https://wangzaixiang.github.io/blog/mdx-optimize/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/mdx-optimize/">&lt;h2 id=&quot;evaluationcontext-you-hua&quot;&gt;EvaluationContext 优化&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;AllMembers&lt;&#x2F;li&gt;
&lt;li&gt;Member(u32)  -- native member&lt;&#x2F;li&gt;
&lt;li&gt;CalcMemberInCube(u32)&lt;&#x2F;li&gt;
&lt;li&gt;CalcMemberInQuery(u32)&lt;&#x2F;li&gt;
&lt;li&gt;SlicedMembers -- 全局的 slice 筛选，会同时跨多个维度&lt;&#x2F;li&gt;
&lt;li&gt;FilteredMembers(u32) -- 单维度的筛选上下文&lt;&#x2F;li&gt;
&lt;li&gt;ReservedLevel(u32)   -- pseudo&lt;&#x2F;li&gt;
&lt;li&gt;_ReservedOther(u32)
通过扩展 MemberFilter 的能力，支持更好的 filter pushdown 能力。解决目前，不能有效或正确的下沉。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当 MDX 查询中涉及到 filter 轴时，如果简单的展开集合，filter 集合会放大 MDX 的计算。
例如： filter 集合 为 1000 时，会导致每个 cell 的计算都会进行1000次的计算。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-hua-1-slice&quot;&gt;优化1: slice&lt;&#x2F;h2&gt;
&lt;p&gt;当 filter 集合不是一个正交集合时，会在 Context 中保存为 sliced: Set[Tuple]&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果当前 Context 中 filter 的所有维度，其值为 SlicedMembers 时， 会将完整的集合下沉。&lt;&#x2F;li&gt;
&lt;li&gt;如果filter轴中部分维度的值为 SlicedMembers 时，会根据这些维度，生成一个新的下沉条件。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;you-hua-2-bao-cun-wei-duo-ge-filteredmember&quot;&gt;优化2: 保存为 多个 FilteredMember。&lt;&#x2F;h2&gt;
&lt;p&gt;filterMember 会直接传递到 cellRequest，而无需展开。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xia-chen-an-xu-zhan-kai&quot;&gt;下沉按需展开&lt;&#x2F;h2&gt;
&lt;p&gt;当计算 expr 时， 在表达式中，需要获取 dim1 维度的当前值进行计算时，而这个维度在 slice 或 FilterMember中时，需要对其展开：&lt;&#x2F;p&gt;
&lt;p&gt;此时， slice 和 filter 仍然会传递到 cellRequest 中 (计算度量 与 计算成员的优先级问题，需要有 expr 的再聚合方式)。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;filter-han-shu-you-hua&quot;&gt;filter 函数优化&lt;&#x2F;h2&gt;
&lt;p&gt;尝试将 filter 函数优化成为支持如下能力的函数，可以快速执行一个 tuple load.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;loadTuple 函数设计方案，能尽量下称到 SQL 执行&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;you-hua-xiang-guan&quot;&gt;优化相关&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;member cache&lt;&#x2F;li&gt;
&lt;li&gt;tuple cache&lt;&#x2F;li&gt;
&lt;li&gt;segment cache&lt;&#x2F;li&gt;
&lt;li&gt;compute cache&lt;&#x2F;li&gt;
&lt;li&gt;公共表达式消除&lt;&#x2F;li&gt;
&lt;li&gt;batch-fetch buffer optimization&lt;&#x2F;li&gt;
&lt;li&gt;profile support&lt;&#x2F;li&gt;
&lt;li&gt;向量化优化&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;segment-cache&quot;&gt;segment cache&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cell Request&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 存储 查询生命周期相关的信息， slice, filter 信息可以在这里保存
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;QueryContext {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 存储 模型模型生命周期相关的信息，例如 member 可以在这里进行 cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CubeContext {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;EvalContext {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;members&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;MemberValue&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slicer&lt;&#x2F;span&gt;&lt;span&gt;:  Slicer, 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CellRequest {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;members&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;MemberValue&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span&gt;: BitMap,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1: equals for AllMember, SlicedMember, FilterMember, 0: same shape for PrimaryMember, HierarchyMember
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MemberValue {
&lt;&#x2F;span&gt;&lt;span&gt;    AllMember,
&lt;&#x2F;span&gt;&lt;span&gt;    SlicedMember(&amp;amp;Slicer),    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 在 slice 中指定
&lt;&#x2F;span&gt;&lt;span&gt;    PrimaryMember(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;),   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对应于非层次维度下的一个基础成员（sql 绑定单个字段）
&lt;&#x2F;span&gt;&lt;span&gt;    HierarchyMember(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对应于层次维度下的一个成员（sql 绑定多个字段）
&lt;&#x2F;span&gt;&lt;span&gt;    FilterMember(&amp;amp;Filter),    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对应于一个 filter member, 例如 it &amp;gt; &amp;#39;2023-01-01&amp;#39; and it &amp;lt; &amp;#39;2023-12-31&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    CalcMember(&amp;amp;CalcMember),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对应于一个计算成员， 在 CellRequest 中，不会出现
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; MemberValue 可以编码为 MemberValue16, MemberValue32
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;CellRequestBuffer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;cellRequest_exists&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CellRequest) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_cellRequest&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CellRequest, value);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;SegmentLoader {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requestBuffer&lt;&#x2F;span&gt;&lt;span&gt;: CellRequestBuffer) -&amp;gt; Segment;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Segment {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;cellRequest_matches&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CellRequest) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_cell&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CellRequest) -&amp;gt; Option[Value];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;MemberValue16
bit0: 0: 1: ALL(0)&#x2F;PrimaryMember(n)  最多可表示 32K 成员
bit1: 1:
10_b13 SliceMember(0)&#x2F;FilteredMember(n) -- 最多 16K 个切片成员
11_b13 CalMember(n) -- 最多 16K 个计算成员&lt;&#x2F;li&gt;
&lt;li&gt;MemberValue32
做多可表示 2^31（ 2G 个成员 ）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在一个查询中，可能会构造当量的 CellRequest, 且出现重复请求的情况很多，因此，需要一个非常高效的 hashmap 来进行缓存。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;MemberValue 尽可能编码为 i16&#x2F;i32, 减少内存占用，并且机制 hash 计算。&lt;&#x2F;li&gt;
&lt;li&gt;cellRequest 以 trait 设计，提供几个精简的实现，最小化内存使用：
&lt;ul&gt;
&lt;li&gt;CompactCellRequest32: 32 字节大小， 最多支持 15个 维度， 每个 member 支持 2字节编码或 4字节编码。 pattern 使用 2 字节。
其中 2字节可表示 2^15 个 成员（Slice&#x2F;Filter&#x2F;ALL 保留若干成员）， 可处理大部份的小维度。 4字节可表示 2^31 个 member。&lt;&#x2F;li&gt;
&lt;li&gt;CompactCellRequest64: 64 字节大小，最多支持 30 个 维度。 bitmap 使用 4字节。&lt;&#x2F;li&gt;
&lt;li&gt;CompactCellRequest128: 128 字节大小，最多支持 60 个维度。 bitmap 使用 8字节。&lt;&#x2F;li&gt;
&lt;li&gt;CellRequestN: 支持任意的维度数量，但是内存占用较大，不适合大部份的场景。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;结合 Rust 的 HashMap 实现，可以实现一个高效的缓存：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;存储结构紧凑，内存使用少&lt;&#x2F;li&gt;
&lt;li&gt;hash 效率高&lt;&#x2F;li&gt;
&lt;li&gt;内存连续性好（大部份的 CellRequest 是一个纯值对象，没有二次引用）&lt;&#x2F;li&gt;
&lt;li&gt;结合 HashMap 的 SIMD 实现，查找效率高&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
cell request 是从 Context 演变来的，需要设计 Context 的存储机制，使得这个转换几乎0成本&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;与 Java实现对比：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;RolapEvaluator 可以通过 savepoint&#x2F;restore 机制来实现共享一个 evaluator， 以节省内存使用。更换一个 member 需要在 history 中增加
SET_CONTEXT index member 3个对象， 至少24字节，当有2-3个字段更新时，这个成本还不如直接创建一个新的 Context 轻量&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Expr cache
当 EvalContext 中包括至少1个计算成员时， 可以对 Expr 进行缓存，以减少计算成员的计算成本。&lt;&#x2F;p&gt;
&lt;p&gt;对当前 MDX， 每一个 AST node 都可以生成一个 计算度量，有一个查询级的 ExprId，以及 Expr 的依赖维度列表。
eval(Expr)时， 会根据 (ExprId, EvalContext.with(expr.dependencies)) 来查找缓存。&lt;&#x2F;p&gt;
&lt;p&gt;不是所有的 Expr 都会进入这个缓存，一般的，系统中部分 expr 会根据规则，进入这个缓存。可以在 MDX 中使用特殊的函数来控制这个规则。例如：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;  (&#x2F;*expr-cache*&#x2F; expr )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;segment cache&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以在多个 MDX query之间共享 segment cache.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;key: (cubeId, cubeVersion, shape, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CellRequestCrossJoin&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  cubeId
&lt;&#x2F;span&gt;&lt;span&gt;  cubeVersion： 每次抽取后，cubeVersion + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  shape
&lt;&#x2F;span&gt;&lt;span&gt;  requests: 仅对 CrossJoin Bag 进行缓存，存储各个维度的 值
&lt;&#x2F;span&gt;&lt;span&gt;value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SegmentData&lt;&#x2F;span&gt;&lt;span&gt;( HashMap[ compact_cell_data, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;] )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;segment cache：(or using rocksdb as storage.)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;in memory&lt;&#x2F;li&gt;
&lt;li&gt;in files&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1个shape 可能对应多个 Segment, 是否需要进行合并。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;自动的 aggregation
对宽表进行查看时，可以识别每个查询使用到的维度，预先按这些维度进行聚合。再在聚合后的结果上进行查询。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;qiu-zhi-you-hua&quot;&gt;求值优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;公共表达式提取&lt;&#x2F;p&gt;
&lt;p&gt;关于公共表达式提取，有两种方式：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;简单提取：如果两个 AST 结构相同并且具有相同的类型，则可以共享同一个 AST tree。
evaluate( tree1, context ) 完成后，可以将  contetx 和 value 保存到 tree中。当再次执行这 evaluate 时，如果 context 没有变化，则无需重复计算。&lt;&#x2F;li&gt;
&lt;li&gt;优化提取：当前仅当检测到 两个 AST 会共享同一个 context 时，才共享同一个 AST Tree。
做一个改写， 在 第一个 AST 中， 改写为 { val x = ..., x }，后续直接引用 x 即可。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;表达式是调用者求值，还是函数求值。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可以标记 函数的参数，是否可以由调用者求值（在调用者的 context 中），还是由函数求值，如果由函数求值，则函数可能会改变 context。
进行这个标记，可以帮助进行公共表达式的提取优化。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;表达式相关维度。
部分的 tree，求值时，仅引来 context 的部分维度，这时，即使context 的其他维度发生变化时，其值仍然不变。
将这个 mask 存储在 tree 中，则求值的时候， 可以更好的进行优化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Expr&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mask&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Dimension&lt;&#x2F;span&gt;&lt;span&gt;] = Set.empty
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Context 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastResult&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;evaluation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit&lt;&#x2F;span&gt;&lt;span&gt; context) = 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; context == lastContext then lastResult
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;depContext &lt;&#x2F;span&gt;&lt;span&gt;= context.keepOnly(mask) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 清理无关维度
&lt;&#x2F;span&gt;&lt;span&gt;          cache[depContext] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; x
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; realyEvaluation(context)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对函数的参数，可以分为3类：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 caller context 中提前求值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 caller context 中延迟求值。（例如 iif 函数）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 callee context 中求值。（例如 filter 函数的 conditional）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在一个表达式求值时，如果求值 f(a, b, c)，在 caller context 中求值的表达式可以进行 公共表达式提取，这个过程可以递归向下。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果两个表达式完全相同，但可能运行于不同的 context， 则可以按 (mask, mask(context)) 进行cache。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;由于伪求值阶段的存在，对 pseudo value 是否 cache? 如果不 cache，则在伪求值阶段会重复计算。如果 cache，则什么时候清理掉这个 cache。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;pi-liang-jia-zai&quot;&gt;批量加载&lt;&#x2F;h2&gt;
&lt;p&gt;在 MDX 执行过程中，会涉及到 loadCell 的调用，简单加载模式中，每次 loadCell 都会发起一个SQL语句，并
同步等待结果返回， 这种方式实现简单，但由于一次查询过程中，这样的 loadCell 会发起上百次，上千次，乃至上百万次，上千万次，
会存在很严重的性能问题。&lt;&#x2F;p&gt;
&lt;p&gt;优化方案：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;执行过程中，requestCell 并不真实发起请求，而是将其放入到一个buffer中，并返回一个 pseudo value
同时增加一个 dirtyCount.&lt;&#x2F;li&gt;
&lt;li&gt;如果表达式计算过程中，dirtyCount 没有增加，则这次计算时有效的，可以直接作为返回值，并进行 cache。
否则这个返回值也是一个 pseudo value，不能进行 cache.&lt;&#x2F;li&gt;
&lt;li&gt;在计算结束后，将 buffer 中的 requestCell 进行批量处理，发起一个 SQL 请求，保存查询结果，并重新发起计算，
直到 dirtyCount = 0 为止。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;每个批次，对应于一个 SegmentLoad，他可能返回超过请求 cell 数量的结果.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    def cellRequest( cell: CellRequest):
&lt;&#x2F;span&gt;&lt;span&gt;      cellCache.get(cell) match
&lt;&#x2F;span&gt;&lt;span&gt;        case x =&amp;gt; x
&lt;&#x2F;span&gt;&lt;span&gt;        case None =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          cellRequests.add(cell) &#x2F;&#x2F; also increase dirty
&lt;&#x2F;span&gt;&lt;span&gt;          PseudoValue
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    class CellRequestBuffer:
&lt;&#x2F;span&gt;&lt;span&gt;        var dirtyCount: Int = 0
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        def add(cell: CellRequest): Unit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CellRequestBuffer 会按 cell 的 pattern 进行分组记录， 具备一下特性的 cell 可以归入统一分组：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果 cell1.dim1 的值 为 ALL, 则 cell2.dim1 == cell2.dim1&lt;&#x2F;li&gt;
&lt;li&gt;如果 cell1.dim1 的值 为 PrimaryMember, 则 cell2.dim1 也是 PrimaryMember(两者值不一定相等)&lt;&#x2F;li&gt;
&lt;li&gt;如果 cell1.dim1 为 HierarchyMember, 则 cell2.dim1 也是 HierarchyMember(两者值不一定相等)&lt;&#x2F;li&gt;
&lt;li&gt;如果 cell1.dim1 为 FilterMember，则 cell2.dim1 == cell1.dim1&lt;&#x2F;li&gt;
&lt;li&gt;如果 cell1.slice 不为空，则 cell2.slice == cell1.slice&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;由两种方式可以组织 buffer:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;List[CellRequest] 这种方式保存的数量一般会限制在 1000 以内
对应的SQL 为：&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; d1, d2, d3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(m1) 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; cube
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; (d1, d2, d3) in ( (v1, v2, v3), (v4, v5, v6) ... )
&lt;&#x2F;span&gt;&lt;span&gt;        and (f1 &amp;gt; f1_0 and f1 &amp;lt; f1_1)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- filter field
&lt;&#x2F;span&gt;&lt;span&gt;        and (s1, s2, s3) in ( (s1_0, s2_0, s3_0), (s1_1, s2_1, s3_1) ... ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- slice
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Map[ Dim, Set[Member] ] 当 List[CellRequest] 达到一定值时，调整为这个结构。
对应的SQL 为：&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; d1, d2, d3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;SUM&lt;&#x2F;span&gt;&lt;span&gt;(m1)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; cube
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; d1 in (...) and d2 in (...) and d3 in (...)
&lt;&#x2F;span&gt;&lt;span&gt;        and (f1 &amp;gt; f1_0 and f1 &amp;lt; f1_1)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- filter field
&lt;&#x2F;span&gt;&lt;span&gt;        and (s1, s2, s3) in ( (s1_0, s2_0, s3_0), (s1_1, s2_1, s3_1) ... ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- slice
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
后者对应的 segment，可能会返回超过请求的数据，可以匹配更多的 cellRequest 请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ytd-mtd-deng-chuang-kou-lei-han-shu-de-ji-suan-you-hua&quot;&gt;YTD, MTD 等窗口类函数的计算优化。&lt;&#x2F;h2&gt;
&lt;p&gt;典型的，例如计算 &lt;code&gt;stdev&lt;&#x2F;code&gt; 聚合方式时，可以参照 《Efficient Processing of Window Functions in Analytical SQL Queries
》 论文中的优化方式，极少计算量。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loadtuples-han-shu-ding-yi&quot;&gt;LoadTuples 函数定义&lt;&#x2F;h2&gt;
&lt;p&gt;多维查询时，基于事实表的 tuples 会比 crossjoin 有多个数量级上的下降，而在多事实情况下， &lt;code&gt;nonEmptyCrossJoin&lt;&#x2F;code&gt; 的语义并不清晰，因此，
我设计了新的 loadTuples 语义：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;loadTuples(
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;dimension:&amp;quot;,    [Dim1], [Dim2], [NS1],  ...,  &#x2F;&#x2F; 元组中使用的维度，是否支持显示给定层次？
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;showEmpty:&amp;quot;,    true,   false,  false,  ...,  &#x2F;&#x2F; 各个维度是否容许显示空成员，命名集也可以考虑支持 showEmpty
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;showSubTotal:&amp;quot;, false,  true,   false,  ...,  &#x2F;&#x2F; 各个维度是否显示小计，命名集明确不支持小计
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;dimensionContext&amp;quot;: null, ([Dim1]), null, ..., &#x2F;&#x2F; 显示空成员时维度的筛选上下文，或许可以省略，从Schema中可以获得。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;where:&amp;quot;,        boolean-expression,           &#x2F;&#x2F; 筛选Bool表达式
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;sorts:&amp;quot;,       expr1, expr2, ..., DESC|ASC|BDESC|BASC  &#x2F;&#x2F; 排序设定
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;viewIds:&amp;quot;, viewId1, viewId2, ...              &#x2F;&#x2F; 从那些事实表中加载维度组合。
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;说明
新定义的 LoadTuples 函数比较复杂，综合了如下的能力：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;显示空成员的维度：在 showEmpty = true 中指定需要显示空成员的维度，其他为不显示空成员的维度。（目前仅支持显示空成员的维度之间的筛选，
不显示空成员的维度不参与显示空成员的维度的筛选）&lt;&#x2F;li&gt;
&lt;li&gt;不显示空成员的维度&lt;&#x2F;li&gt;
&lt;li&gt;分组小计。（对单层次维度，创建 aggreate 计算成员 或者映射到 All ， 对多层次维度，如果该维度有过滤，则使用 VisualTotal 函数）&lt;&#x2F;li&gt;
&lt;li&gt;多事实表逻辑。 当选择 viewId1, viewId2 等多事实表时，维度组合符合如下逻辑：
&lt;ul&gt;
&lt;li&gt;如果 viewId1 包含的轴上维度(D_i, D_j, D_k) 与 viewId2 的轴上维度一致时， 二者是一个 union 关系（去除重复）&lt;&#x2F;li&gt;
&lt;li&gt;如果 viewId1 包含的轴上维度(D_i, D_j, Dk)是 ViewId2 (D_i, D_j, D_k, D_l)的子集时，如果 (D_i, D_j, Dk)组合在 (D_i, D_j, D_k, D_l) 中已存在，则不再重复出现。&lt;&#x2F;li&gt;
&lt;li&gt;否则同时包含viewId1的元组和viewId2的元组。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;筛选能力：
&lt;ul&gt;
&lt;li&gt;对维度值进行过滤的筛选条件可以直接下沉（包括WHERE区的条件）&lt;&#x2F;li&gt;
&lt;li&gt;使用基本度量作为过滤条件，与元组的部分维度相关，可以考虑使用窗口函数 + having子句进行下沉&lt;&#x2F;li&gt;
&lt;li&gt;更为复杂的计算度量暂时不能下沉，在 MDX 引擎中执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;排序能力：
&lt;ul&gt;
&lt;li&gt;可以对维度值进行过滤（下沉）&lt;&#x2F;li&gt;
&lt;li&gt;可以对基本度量（与部分维度相关），可以考虑使用窗口函数 进行下沉&lt;&#x2F;li&gt;
&lt;li&gt;更为复杂的计算度量暂时不能下称，在 MDX 引擎中执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;预期的优势：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新的 loadTuple 函数基本涵盖了目前仪表盘构建轴上元组的大部份能力（并在排序上有所超越）&lt;&#x2F;li&gt;
&lt;li&gt;对多事实的处理、筛选能力、排序能力有更好的下沉能力，可以获得更好的查询性能。&lt;&#x2F;li&gt;
&lt;li&gt;即使考虑到复杂的Where条件，loadTuple仍然有更好的下沉能力，在下沉SQL的基础上，再结合不能下沉的 filter + sort 处理，整体性能会比现有的不能下沉的场景有更好的性能。&lt;&#x2F;li&gt;
&lt;li&gt;对比现有的 crossjoin &#x2F; nonEmptyCrossJoin&#x2F; dim.members，有更为清晰的查询语义，便于整个查询的质量提升&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Where 轴上的条件，在多事实表情况下，需要进行的处理逻辑包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果 viewId1 不包含 dim1, 则在 WHERE 条件应用到 viewId1时，需要对 Bool 表达式进行如下的改写：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果 表达式 dim1.currentMember oper literal 使用了viewId中不存在的字段，这个表达式改写为 UNUSED&lt;&#x2F;li&gt;
&lt;li&gt;UNUSED and any  --&amp;gt;  any&lt;&#x2F;li&gt;
&lt;li&gt;UNUSED or any   --&amp;gt; any&lt;&#x2F;li&gt;
&lt;li&gt;NOT UNUSED      --&amp;gt; UNUSED
最后逐步的进行化简，如果最后化简的表达式不包含 UNUSED，则可以直接下沉。如果化简后为 UNUSED，则化简为 true.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;计算成员
在不显示空成员时，如果维度有计算成员，则在 LoadTuples 中需要补充计算成员。
（D_1, D_2, D_3, ..., D_n）中，如果 D_2, D_3有计算成员，则需要补充成员：filter( { (D1, D4) } * { D2.calcMembers, D2.calcMemers },  [Measures].[Fact Count] &amp;gt; 0 )&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;筛选条件下沉
以 f1 &amp;amp;&amp;amp; f2 &amp;amp;&amp;amp; (f3 || f4) 为例, f1 , f2 可以独立下沉， f3 || f4 只能作为整体下沉，具备下沉的 bool 表达式 f 满足：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;f 是 TOP 层的自成员，且 TOP 层的各个自成员之间是 and 关系。&lt;&#x2F;li&gt;
&lt;li&gt;f 形如 dim1.currentMember.caption operate constant 且 dim1 在不显示空成员中，则 f 可以下沉&lt;&#x2F;li&gt;
&lt;li&gt;f 形如 &lt;code&gt;[Measures].[X]&lt;&#x2F;code&gt; operator constant 且 X 是基本度量，则 f 可以下沉&lt;&#x2F;li&gt;
&lt;li&gt;f 形如 (&lt;code&gt;[Measures].[X], [Dim1].[All Dim1s]&lt;&#x2F;code&gt;) operator constant 且 X 是基本度量，则 f 可以下沉。&lt;&#x2F;li&gt;
&lt;li&gt;f 是2 AND (3 与 4的组合)，则 f 可以下沉。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;具备下沉条件的表达式将在如下环节执行：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;非空基本元组（非计算成员）在 SQL 中执行&lt;&#x2F;li&gt;
&lt;li&gt;如果该字段有计算成员，且显示计算成员，则在补充计算成员的元组前，进行过滤。&lt;&#x2F;li&gt;
&lt;li&gt;新增分组小计的元组，在新增前，进行过滤。
不具备下沉条件的表达式，统一在最后的 MDX 过滤阶段进行过滤。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;计算元组时，自动携带辅助的计算（可用于MDX过滤阶段、MDX排序阶段）
在计算元组的值时，可以附带计算用于后续处理所需的值，例如 filter, order-by。
在 MDX 过滤阶段，对给定元组，如果需要对特定值进行求值，可以使用 tuple.properties.get( expression ) 先获取值，如果已有值的话，则无需额外求值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;loadTuples.60a78fbdca665da6.png&quot; &#x2F;&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>wgpu 代码阅读记录</title>
        <published>2024-08-10T12:00:00+00:00</published>
        <updated>2024-08-10T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/trying-wgpu/"/>
        <id>https://wangzaixiang.github.io/blog/trying-wgpu/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/trying-wgpu/">&lt;h1 id=&quot;yue-du-wgpu-dai-ma-ji-lu&quot;&gt;阅读 wgpu 代码记录&lt;&#x2F;h1&gt;
&lt;p&gt;例子： &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;tree&#x2F;trunk&#x2F;examples&#x2F;src&#x2F;hello_compute&quot;&gt;hello_compute&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wgpu-ji-ben-liu-cheng&quot;&gt;wgpu 基本流程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;blob&#x2F;trunk&#x2F;examples&#x2F;src&#x2F;hello_compute&#x2F;mod.rs&quot;&gt;hello_compiute&lt;&#x2F;a&gt;是一个使用 GPU 进行数学运算的示例，核心的代码位于：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;blob&#x2F;trunk&#x2F;examples&#x2F;src&#x2F;hello_compute&#x2F;shader.wgsl&quot;&gt;Shader&lt;&#x2F;a&gt; 是运行于GPU上的代码。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;blob&#x2F;trunk&#x2F;examples&#x2F;src&#x2F;hello_compute&#x2F;mod.rs#L63&quot;&gt;execute_gpu_inner&lt;&#x2F;a&gt; 是与GPU进行交互的代码
代码如下（进行了简化，详细的代码请参考 github hello_compute&#x2F;mod.rs），&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;execute_gpu_inner 这个代码的结构还是有些复杂，我对其进行了整理，形成了一个数据流图，对照这个图来看，就比较好理解 webgpu 的各个错综复杂的实体之间的关系了。&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
    ```mermaid
flowchart TD
    device
    shader_source -.-&amp;gt; module
    numbers -. create_buffer_init .-&amp;gt; storage_buffer
    module -..-&amp;gt; pipeline 
    device -.create_buffer.-&amp;gt; staging_buffer
    device -.create_buffer_init.-&amp;gt; storage_buffer
    device -.create_compute_pipeline.-&amp;gt; pipeline
    bind_group_layout
    pipeline -. get_bind_group_layout.-&amp;gt; bind_group_layout
    bind_group_layout -.create_bind_group.-&amp;gt; bind_group
    storage_buffer -.- bind_group
    device -.create_command_encoder.-&amp;gt; encoder
    device -.create_shader_module.-&amp;gt; module
    encoder -.begin_compute_pass.-&amp;gt; cpass
    pipeline -..-&amp;gt; cpass
    bind_group -..-&amp;gt; cpass
    storage_buffer -.encoder_copy_buffer_to_buffer.- staging_buffer
    cpass -.queue_submit_encoder.-&amp;gt; submit
    submit -.device_poll.-&amp;gt; poll 
    staging_buffer -.slice_bounded_receiver.-&amp;gt; receiver
    poll -.-&amp;gt; result
    receiver -.-&amp;gt; result
```
&lt;&#x2F;div&gt;
&lt;p&gt;-[ ] 思考：可以进一步的抽象，提供一个更加友好的 API，屏蔽 wgpu 的内部细节。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ge-ge-cao-zuo-de-hao-shi&quot;&gt;各个操作的耗时&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;操作&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;耗时（us）&lt;&#x2F;th&gt;&lt;th&gt;占比&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;poll&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1330&lt;&#x2F;td&gt;&lt;td&gt;45%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;create_compute_pipeline&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;756&lt;&#x2F;td&gt;&lt;td&gt;26%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;create_shader_module&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;209&lt;&#x2F;td&gt;&lt;td&gt;7.2%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;copy_buffer_to_buffer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;120&lt;&#x2F;td&gt;&lt;td&gt;4.1%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;submit&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;98&lt;&#x2F;td&gt;&lt;td&gt;3.3%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;create_buffer_init&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;67&lt;&#x2F;td&gt;&lt;td&gt;2.3%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;如果说 poll 的时间是GPU 实际计算的开销，那么可以看到准备数据的时间耗时接近 1.5ms 了。这也是和CPU 对比时，可能会性能对比并不大的原因了&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yu-cpu-ban-ben-de-xing-neng-dui-bi&quot;&gt;与 CPU 版本的性能对比&lt;&#x2F;h2&gt;
&lt;p&gt;基于 hello_compute, 我编写了一个对比的 cpu 版本：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, F&amp;gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;: F)  -&amp;gt; T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; F: FnOnce() -&amp;gt; T  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tm0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tm1 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, label, tm1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;duration_since&lt;&#x2F;span&gt;&lt;span&gt;(tm0));
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read numbers from args
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numbers = std::env::args()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;::from_str(&amp;amp;s).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You must pass a list of positive integers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{s}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ))
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;running_cpu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, || numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;test2&lt;&#x2F;span&gt;&lt;span&gt;(n)).collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;() );
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;running_cpu Steps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n_base&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= n_base;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            n = n &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Overflow? (i.e. 3*n + 1 &amp;gt; 0xffffffffu?)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1431655765&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0x55555555u
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4294967295&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0xffffffffu
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        i = i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;分别进行了如下的测试 N 从 1K - 60K 的测试。
&lt;img width=&quot;529&quot; alt=&quot;wgpu_cpu_compare&quot; src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;830a9e61-a53b-4bca-a0ff-157870dc14df&quot;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从这个的图可以看出：对比与CPU版本，在20K 规模之前，CPU 版本耗时更少，单随着 N 的增加，CPU 耗时基本上线性增加，而 GPU 版本从从 1K - 60K，基本维持不变（受限与目前的代码，GPU 版本，单次提交最多64K 数据。）&lt;&#x2F;p&gt;
&lt;p&gt;那么，当数据量持续增加，且复用 GPU 的如下资源：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;module&lt;&#x2F;li&gt;
&lt;li&gt;staging_buffer&#x2F;storage_buffer&lt;&#x2F;li&gt;
&lt;li&gt;pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在这种情况下，GPU 的提速效果会更为明显。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gpu-yu-shu-ju-fen-xi-si-kao&quot;&gt;GPU 与 数据分析思考&lt;&#x2F;h2&gt;
&lt;p&gt;目前，OLAP 分析的提速主要有如下的技术手段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;列式存储： 列式存储对于宽表的 OLAP 计算在 IO 上有显著的优势，因为大部份的查询仅使用宽表的部分字段。&lt;&#x2F;li&gt;
&lt;li&gt;列式计算： 在内存中使用 vector 模式存储列信息，并基于列计算的方式替代行计算，从而充分利用 CPU 的 cache命中。参见  &lt;a href=&quot;http:&#x2F;&#x2F;cidrdb.org&#x2F;cidr2005&#x2F;papers&#x2F;P19.pdf&quot;&gt;MonetDB&#x2F;X100: Hyper-Pipelining Query Execution&lt;&#x2F;a&gt; by Peter Boncz, Marcin Zukowski and Niels Nes.&lt;&#x2F;li&gt;
&lt;li&gt;SIMD: 基于向量的计算模式，可以充分利用 SIMD 加速能力。C&#x2F;C++&#x2F;Rust等语言均有编译器级别SIMD优化，也有SIMD的库，显示的使用 SIMD 的能力。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;目前来看，使用 GPU 进行加速，目前还不是主流，但应该是一个不错的发展方向，对比 SIMD，基于GPU 计算会有如下的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;WebGPU 标准已趋于成熟，Chrome&#x2F;Firefox等浏览器已支持 webgpu。在 Rust 生态中，wgpu 项目已经可以支持 WGSL 并且运行在 Windwos(Vulkan&#x2F;DX12)、Linux(Vulkan)、Mac(Metal)、WEB(webgpu）上，相当于已经有了一个跨平台的底层开发支持。&lt;&#x2F;li&gt;
&lt;li&gt;SIMD 的并发限制较大，向量宽度一般在 128b - 512b 之间，相当于4-16个整数。而 GPU 的上限要高很多，譬如 RTX 4090 有多达 16384 个计算单元（对应 AVX 512 为 16，提升了 1024倍）&lt;&#x2F;li&gt;
&lt;li&gt;SIMD 并不能适应 分支计算，而 GPU 上可以支持分支计算。类似于 case when 的计算，更适合在 GPU上完成。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bu-chong&quot;&gt;补充&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2024-08-17 编写了一个 mondelbrot set 的 CPU 和 GPU 版本的性能对比 &lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;mandelbrot-gpu&#x2F;&quot;&gt;mandelbrot-gpu&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>MonetDB MAL 探究</title>
        <published>2024-08-08T12:00:00+00:00</published>
        <updated>2024-08-08T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/monetdb-mal/"/>
        <id>https://wangzaixiang.github.io/blog/monetdb-mal/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/monetdb-mal/">&lt;p&gt;MonetDB 是一个基于列存的 OLAP 数据库引擎，最近看到的很多 OLAP 引擎，包括 &lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&quot;&gt;DuckDB&lt;&#x2F;a&gt;、&lt;a href=&quot;https:&#x2F;&#x2F;pola.rs&quot;&gt;Polars&lt;&#x2F;a&gt;
都引用了MonetDB的研究论文，这说明了 MonetDB 在 OLAP 领域的权威地位，我对 MonetDB 的实现原理也很感兴趣，本文尝试对 MAL 做一个初步的探究。&lt;&#x2F;p&gt;
&lt;p&gt;MonetDB 引入了一个 MAL 的组件（Monet Assembly Language），即将SQL语言首先编译成为一种中间语言（IL)，然后再执行这个IL，这与 sqlite3
是非常相似的。在 SQLite3中，这个IL 又成为 bytecode，相关资料可以参考：&lt;a href=&quot;https:&#x2F;&#x2F;sqlite.org&#x2F;whybytecode.html&quot;&gt;为什么SQLite使用 Bytecode&lt;&#x2F;a&gt;。
而在 MonetDB 中，则称之为 MAL。&lt;&#x2F;p&gt;
&lt;p&gt;本文并不对 MAL 的内部实现进行深度分析，而是尝试通过一些简单的案例，来理解最终的 mal 是什么样子，是如何对应到 SQL 语句的？以终为始，如果能读懂mal
代码，则后续可以进一步理解 MonetDB 的其他组件。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;&#x2F;h1&gt;
&lt;p&gt;首先参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.monetdb.org&#x2F;documentation-Dec2023&#x2F;user-guide&#x2F;tutorials&#x2F;voc-tutorial&#x2F;&quot;&gt;Tutorial&lt;&#x2F;a&gt; 在本地搭建好环境和测试数据库。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; brew install monetdb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; monetdbd create &#x2F;path&#x2F;to&#x2F;mydbfarm  -- 初始化一个数据库实例目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; monetdbd start &#x2F;path&#x2F;to&#x2F;mydbfarm   -- 启动该实例
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; monetdb create voc                 -- 创建一个数据库，处在维护模式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; monetdb release voc                -- 将数据库切换到可用模式
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget https:&#x2F;&#x2F;dev.monetdb.org&#x2F;Assets&#x2F;VOC&#x2F;voc_dump.zip -- 获取到示例数据库的数据脚本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; unzip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; voc_dump.zip voc_dump.sql | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mclient -u&lt;&#x2F;span&gt;&lt;span&gt; voc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; voc  -- 执行脚本，初始化示例数据库
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;BAT 相关论文 &lt;a href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;3735086_Flattening_an_object_algebra_to_provide_performance&quot;&gt;Flattening an object algebra to provide performance
&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;jian-dan-an-li&quot;&gt;简单案例&lt;&#x2F;h1&gt;
&lt;p&gt;我们先来阅读一条最简单的 SQL 语句的 MAL。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mclient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; voc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; voc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; explain select * from invoices where chamber = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mal                                                                                                                                                                     &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;========================================================================================================================================================================+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;user.main&lt;&#x2F;span&gt;&lt;span&gt;():void;                                                                                                                                              |
&lt;&#x2F;span&gt;&lt;span&gt;|     X_1:void := querylog.define(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;explain select * from invoices where chamber = &amp;#39;A&amp;#39;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:str, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default_pipe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 36:int);                                                 |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;barrier&lt;&#x2F;span&gt;&lt;span&gt; X_121:bit := language.dataflow();                                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_4:int&lt;&#x2F;span&gt;&lt;span&gt; := sql.mvc();                                                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C_5:bat[:oid]&lt;&#x2F;span&gt;&lt;span&gt; := sql.tid(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str);                                                                                                       |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_8:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                                 |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_15:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number_sup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                            |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_20:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                                  |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_27:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trip_sup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                              |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_34:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_39:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := sql.bind(X_4:int, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chamber&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, 0:int);                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C_48:bat[:oid]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.thetaselect(X_39:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, C_5:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str);                                                                            |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_50:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_8:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_51:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_15:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_52:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_20:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_53:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_27:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_54:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_34:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_55:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := algebra.projection(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_39:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_123:void&lt;&#x2F;span&gt;&lt;span&gt; := language.pass(C_48:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:oid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                                                        |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_124:void&lt;&#x2F;span&gt;&lt;span&gt; := language.pass(X_39:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                                                        |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_57:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := bat.pack(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys.invoices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str);                 |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_58:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := bat.pack(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number_sup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trip_sup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invoice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chamber&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str);                                               |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_59:bat[:str]&lt;&#x2F;span&gt;&lt;span&gt; := bat.pack(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:str);                                                                    |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_60:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := bat.pack(32:int, 1:int, 32:int, 1:int, 32:int, 1:int);                                                                                            |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_61:bat[:int]&lt;&#x2F;span&gt;&lt;span&gt; := bat.pack(0:int, 0:int, 0:int, 0:int, 0:int, 0:int);                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; X_121:bit;                                                                                                                                                         |
&lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;X_56:int&lt;&#x2F;span&gt;&lt;span&gt; := sql.resultSet(X_57:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_58:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_59:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_60:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_61:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_50:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_51:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_52:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_53:bat[ |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; :str], X_54:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, X_55:bat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;);                                                                                                                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt; user.main;                                                                                                                                                          |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# inline                               0 actions 3 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# remap                                0 actions 2 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# costModel                            1 actions 2 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# coercions                            0 actions 5 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# aliases                              1 actions 9 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# evaluate                             0 actions 8 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# emptybind                            6 actions 9 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# deadcode                             6 actions 9 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# pushselect                           0 actions 18 usecs                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# aliases                              6 actions 4 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# for                                  0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# dict                                 0 actions 8 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# mitosis                                                                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# mergetable                           0 actions 9 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# aliases                              0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# constants                            0 actions 7 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# commonTerms                          0 actions 10 usecs                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# projectionpath                       0 actions 4 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# deadcode                             0 actions 3 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# matpack                              0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# reorder                              1 actions 11 usecs                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# dataflow                             1 actions 17 usecs                                                                                                               |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# querylog                             0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# multiplex                            0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# generator                            0 actions 3 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# candidates                           1 actions 2 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# deadcode                             0 actions 4 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# postfix                              0 actions 5 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# profiler                             0 actions 1 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# garbageCollector                     1 actions 9 usecs                                                                                                                |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 29 optimizers 224 usecs                                                                                                                                               |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;59&lt;&#x2F;span&gt;&lt;span&gt; tuples
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面我们会参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.monetdb.org&#x2F;documentation-Dec2023&#x2F;dev-guide&#x2F;monetdb-internals&#x2F;mal-modules&#x2F;&quot;&gt;MAL Modules&lt;&#x2F;a&gt;中
的API文档为 MAL 代码添加上注释：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;function user.main():void;
&lt;&#x2F;span&gt;&lt;span&gt;     X_1:void := querylog.define(&amp;quot;explain select * from invoices where chamber = &amp;#39;A&amp;#39;;&amp;quot;:str, &amp;quot;default_pipe&amp;quot;:str, 36:int);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; barrier X_121:bit := language.dataflow();  &#x2F;&#x2F; The current guarded block is executed using dataflow control.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Get the multiversion catalog context.
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Needed for correct statement dependencies
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; (ie sql.update, should be after sql.bind in concurrent execution
&lt;&#x2F;span&gt;&lt;span&gt;     X_4:int := sql.mvc();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Return a column with the valid tuple identifiers associated with the table sname.tname.
&lt;&#x2F;span&gt;&lt;span&gt;     C_5:bat[:oid] := sql.tid(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Bind the &amp;#39;schema.table.column&amp;#39; BAT with access kind:
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; 0 - base table
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; 1 - inserts
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; 2 - updates
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; 对应于 select * 中的六列
&lt;&#x2F;span&gt;&lt;span&gt;     X_8:bat[:int] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;number&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;     X_15:bat[:str] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;number_sup&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;     X_20:bat[:int] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;trip&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;     X_27:bat[:str] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;trip_sup&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;     X_34:bat[:int] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;invoice&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;     X_39:bat[:str] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;chamber&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Select all head values of the first input BAT for which the tail value
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; obeys the relation value OP VAL and for which the head value occurs in
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; the tail of the second input BAT.
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Input is a dense-headed BAT, output is a dense-headed BAT with in
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; the tail the head value of the input BAT for which the
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; relationship holds.  The output BAT is sorted on the tail value.
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; θ select 进行过滤
&lt;&#x2F;span&gt;&lt;span&gt;     C_48:bat[:oid] := algebra.thetaselect(X_39:bat[:str], C_5:bat[:oid], &amp;quot;A&amp;quot;:str, &amp;quot;==&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Project left input onto right input
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; X_50 到 X_55 就是从过滤后的 oid 映射到对应的列的值
&lt;&#x2F;span&gt;&lt;span&gt;     X_50:bat[:int] := algebra.projection(C_48:bat[:oid], X_8:bat[:int]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_51:bat[:str] := algebra.projection(C_48:bat[:oid], X_15:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_52:bat[:int] := algebra.projection(C_48:bat[:oid], X_20:bat[:int]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_53:bat[:str] := algebra.projection(C_48:bat[:oid], X_27:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_54:bat[:int] := algebra.projection(C_48:bat[:oid], X_34:bat[:int]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_55:bat[:str] := algebra.projection(C_48:bat[:oid], X_39:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Cheap instruction to disgard storage while retaining the dataflow dependency
&lt;&#x2F;span&gt;&lt;span&gt;     X_123:void := language.pass(C_48:bat[:oid]);
&lt;&#x2F;span&gt;&lt;span&gt;     X_124:void := language.pass(X_39:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Materialize the values into a BAT. Avoiding a clash with mat.pack() in mergetable
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; resultset column schema 信息
&lt;&#x2F;span&gt;&lt;span&gt;     X_57:bat[:str] := bat.pack(&amp;quot;sys.invoices&amp;quot;:str, &amp;quot;sys.invoices&amp;quot;:str, &amp;quot;sys.invoices&amp;quot;:str,
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;quot;sys.invoices&amp;quot;:str, &amp;quot;sys.invoices&amp;quot;:str, &amp;quot;sys.invoices&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; resultset column name 信息
&lt;&#x2F;span&gt;&lt;span&gt;     X_58:bat[:str] := bat.pack(&amp;quot;number&amp;quot;:str, &amp;quot;number_sup&amp;quot;:str, &amp;quot;trip&amp;quot;:str,
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;quot;trip_sup&amp;quot;:str, &amp;quot;invoice&amp;quot;:str, &amp;quot;chamber&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; resultset column datatype 信息
&lt;&#x2F;span&gt;&lt;span&gt;     X_59:bat[:str] := bat.pack(&amp;quot;int&amp;quot;:str, &amp;quot;char&amp;quot;:str, &amp;quot;int&amp;quot;:str, &amp;quot;char&amp;quot;:str, &amp;quot;int&amp;quot;:str, &amp;quot;char&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; 应该是column的元信息，具体是什么，暂时还不清楚
&lt;&#x2F;span&gt;&lt;span&gt;     X_60:bat[:int] := bat.pack(32:int, 1:int, 32:int, 1:int, 32:int, 1:int);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F;&#x2F;&#x2F; 应该是column的元信息，具体是什么，暂时还不清楚
&lt;&#x2F;span&gt;&lt;span&gt;     X_61:bat[:int] := bat.pack(0:int, 0:int, 0:int, 0:int, 0:int, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; exit X_121:bit;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; Prepare a table result set for the client front-end
&lt;&#x2F;span&gt;&lt;span&gt;     X_56:int := sql.resultSet(X_57:bat[:str], X_58:bat[:str], X_59:bat[:str], X_60:bat[:int], X_61:bat[:int],
&lt;&#x2F;span&gt;&lt;span&gt;            X_50:bat[:int], X_51:bat[:str], X_52:bat[:int], X_53:bat[:str], X_54:bat[:int], X_55:bat[:str]);                                                                                                                                 :
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;end user.main;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;整理后的处理如图：&lt;img width=&quot;1362&quot; alt=&quot;image&quot; src=&quot;https:&#x2F;&#x2F;github.com&#x2F;user-attachments&#x2F;assets&#x2F;fcc66d79-a46b-4955-ae9f-1d750c3bd46a&quot;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;group-by-an-li&quot;&gt;group by 案例&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sql&amp;gt; explain explain select chamber, sum(trip) from invoices group by chamber;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function user.main():void;
&lt;&#x2F;span&gt;&lt;span&gt;    X_1:void := querylog.define(&amp;quot;explain select chamber, sum(trip) from invoices group by chamber;&amp;quot;:str,
&lt;&#x2F;span&gt;&lt;span&gt;    			&amp;quot;default_pipe&amp;quot;:str, 21:int);
&lt;&#x2F;span&gt;&lt;span&gt;barrier X_91:bit := language.dataflow();
&lt;&#x2F;span&gt;&lt;span&gt;    X_4:int := sql.mvc();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    C_5:bat[:oid] := sql.tid(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    trip_0:bat[:int] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;trip&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;    chamber_0:bat[:str] := sql.bind(X_4:int, &amp;quot;sys&amp;quot;:str, &amp;quot;invoices&amp;quot;:str, &amp;quot;chamber&amp;quot;:str, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    trip_1:bat[:int] := algebra.projection(C_5:bat[:oid], trip_0:bat[:int]);
&lt;&#x2F;span&gt;&lt;span&gt;    chamber_1:bat[:str] := algebra.projection(C_5:bat[:oid], chamber_0:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    X_93:void := language.pass(C_5:bat[:oid]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; 这个函数文档没有找到，返回的两个 BAT 暂时语义不确定，猜测： X_22: [1..N, gid], X_23: [1,n, oid]
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; 其中 N 是行数， n 是分组数。
&lt;&#x2F;span&gt;&lt;span&gt;    (X_22:bat[:oid], C_23:bat[:oid]) := group.groupdone(chamber_1:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;&#x2F;&#x2F; grouped [chamber]
&lt;&#x2F;span&gt;&lt;span&gt;    chamber_2:bat[:str] := algebra.projection(C_23:bat[:oid], chamber_1:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    X_94:void := language.pass(chamber_1:bat[:str]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;&#x2F;&#x2F; [ sum(trip) for each group ]  subsum(bid, gid, eid, skip_nils) 这个函数在官网搜不到
&lt;&#x2F;span&gt;&lt;span&gt;    trip_sum:bat[:hge] := aggr.subsum(trip_1:bat[:int], X_22:bat[:oid], C_23:bat[:oid], true:bit);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    X_95:void := language.pass(C_23:bat[:oid]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    X_29:bat[:str] := bat.pack(&amp;quot;sys.invoices&amp;quot;:str, &amp;quot;sys.%1&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;    X_30:bat[:str] := bat.pack(&amp;quot;chamber&amp;quot;:str, &amp;quot;%1&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;    X_31:bat[:str] := bat.pack(&amp;quot;char&amp;quot;:str, &amp;quot;hugeint&amp;quot;:str);
&lt;&#x2F;span&gt;&lt;span&gt;    X_32:bat[:int] := bat.pack(1:int, 128:int);
&lt;&#x2F;span&gt;&lt;span&gt;    X_33:bat[:int] := bat.pack(0:int, 0:int);
&lt;&#x2F;span&gt;&lt;span&gt;exit X_91:bit;
&lt;&#x2F;span&gt;&lt;span&gt;    X_28:int := sql.;(X_29:bat[:str], X_30:bat[:str], X_31:bat[:str], X_32:bat[:int], X_33:bat[:int],
&lt;&#x2F;span&gt;&lt;span&gt;    	chamber_2:bat[:str], trip_sum:bat[:hge]);
&lt;&#x2F;span&gt;&lt;span&gt;end user.main;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;chuang-kou-han-shu-an-li&quot;&gt;窗口函数案例&lt;&#x2F;h1&gt;
&lt;p&gt;TODO， 后续补充&lt;&#x2F;p&gt;
&lt;h1 id=&quot;join-an-li&quot;&gt;join 案例&lt;&#x2F;h1&gt;
&lt;p&gt;TODO， 后续补充&lt;&#x2F;p&gt;
&lt;h1 id=&quot;shi-yong-yi-ge-il-lai-zhi-xing-sql-you-shen-me-you-dian&quot;&gt;使用一个 IL 来执行 SQL 有什么优点？&lt;&#x2F;h1&gt;
&lt;p&gt;Sqlite3 使用字节码，MonetDB 使用 MAL，二者是相似的，而大部份其他的数据库是基于AST的，通过将 SQL 解析成为 AST，再转换成为 Logic Plan 和 Physical Plan (也是 AST)。
在 &lt;a href=&quot;https:&#x2F;&#x2F;sqlite.org&#x2F;whybytecode.html&quot;&gt;为什么SQLite使用 Bytecode&lt;&#x2F;a&gt; 文中提到了
使用字节码的优点和缺点：
Pros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;字节码易于理解。而 AST 相对难以展示为可读性好的表现形式。（实际上，现在很多数据库都可以以 Tree 方式来查看 Plan，这方面的差距其实不大）&lt;&#x2F;li&gt;
&lt;li&gt;字节码易于调试。可以像普通的代码调试一样的进行字节码的调试。&lt;&#x2F;li&gt;
&lt;li&gt;字节码可以增量式的运行。&lt;&#x2F;li&gt;
&lt;li&gt;字节码更加短小。&lt;&#x2F;li&gt;
&lt;li&gt;字节码更加快速。字节码相对于AST来说具有更小的解释成本
Cons:&lt;&#x2F;li&gt;
&lt;li&gt;AST 更便于在执行期后期的计划变更。尤其是根据实际数据的特征，而改变执行计划，例如调整 Join 策略等。&lt;&#x2F;li&gt;
&lt;li&gt;基于数据流的处理更易于并行化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我觉得还有一个点，是字节码模式更擅长的，可以更好的进行自下而上的性能优化，例如我们可以针对某个特定的优化场景，设计更适合的算法，基于字节码的场景，我们可以略过前面的 AST 构建过程，
直接手写出目标的字节码，然后独立的进行调试，进行性能压测。在达到预期目标后，调整前端的 AST 构建过程即可。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-kao-1-yin-ru-s-expression-de-il&quot;&gt;思考1: 引入 S-Expression 的 IL&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;引入一个函数式的 IL，采用类似于 S-Expression 的方式，这样 AST 与 S-IL之间的距离也相对较小，可以更方便引入新的底层函数。&lt;&#x2F;li&gt;
&lt;li&gt;S-expression 是面向解释执行的，与字节码具有简单的对应关系，可以高校的执行（或者直接通过 JIT 方式执行）&lt;&#x2F;li&gt;
&lt;li&gt;S-expression 可以与 AST 进行共存，这样可以在执行过程中，动态的调整 AST，再次生成 S-IL，然后执行。（类似于JVM的 JIT 优化后 hot-replace）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这样的一个平衡，可以便于自上而下的执行（从AST -&amp;gt; IL -&amp;gt; 执行），也可以便于自下而上的优化，针对特定的场景，提供特定的基础操作，扩展新的 IL 操作，
并且在开发阶段，可以直接通过 S-IL 进行调试，而不需要关心 AST 的构建过程，从而快速的验证性能优化的效果。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-kao-2-yin-ru-yi-ge-geng-jia-tong-yong-de-xiang-liang-hua-yan-suan-ti-xi&quot;&gt;思考2: 引入一个更加通用的向量化演算体系。&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;BAT 的概念是 MonetDB 的核心，后来者诸如 DuckDB, Polars 直接使用 Series + DataFrame 的概念，都弱化了 BAT. Bat 类似于一个 简化的 DataFrame
作为基础数据结构，相比 Series 来说还是重了一些。&lt;&#x2F;li&gt;
&lt;li&gt;建立向量的类型体系， 包括 vec&lt;bool&gt;, vec&lt;i32&gt;, vec&amp;lt;vec&lt;i32&gt;&amp;gt;, vec&amp;lt;(name: i32, birthday: date)&amp;gt; 等等， 尤其是对 Named Tuple 的支持和 Vector of Struct 的支持&lt;&#x2F;li&gt;
&lt;li&gt;建立基于向量的操作体系，包括 project, semi-join, join, select 等等，这些操作，都是向量化优化的（甚至可以直接在GPU上执行）是上层SQL 执行的基础支撑&lt;&#x2F;li&gt;
&lt;li&gt;上层应用可以基于基础向量演算，增加各种优化，例如 min-max 索引， bitmap 索引等，基于这些特定的索引，减少数据的扫描。&lt;&#x2F;li&gt;
&lt;li&gt;对于已排序的向量，提供更多的优化，例如 merge join, merge sort 等等。甚至可以将这些信息作为类型信息，直接在编译期进行优化。
参考： &lt;a href=&quot;https:&#x2F;&#x2F;calcite.apache.org&#x2F;docs&#x2F;algebra.html&quot;&gt;Calcite Relational Algebra&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>使用 Notebook 熟悉 Polars 的概念和 API</title>
        <published>2024-05-18T12:00:00+00:00</published>
        <updated>2024-05-18T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/polars-notebook/"/>
        <id>https://wangzaixiang.github.io/blog/polars-notebook/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/polars-notebook/">&lt;h2 id=&quot;jie-lun-xian-xing&quot;&gt;结论先行&lt;&#x2F;h2&gt;
&lt;p&gt;本 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;notebooks&#x2F;blob&#x2F;main&#x2F;polars&#x2F;polars-1.ipynb&quot;&gt;notebook&lt;&#x2F;a&gt; 是通过 jupyter notebook 的方式，
来学习 polars 的API，并理解其概念。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;polars 有3种求值的上下文：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Selection Context: &lt;code&gt;df.select(...)&lt;&#x2F;code&gt;, &lt;code&gt;df.with_columns(...)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Filter Context:  &lt;code&gt;df.filter(...) &lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Group By(Aggregation Context)：&lt;code&gt;df.group_by(...).agg(...)&lt;&#x2F;code&gt;，每一个分组可以理解为一个child dataframe&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在这三个上下文中，每个表达式的求值结果是 Series-N 或者 Series-1。Series-N 会自动广播为 Series-N。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;表达式可以是基本的 pl.col(&quot;name&quot;) 这种求值为 Series-N&lt;&#x2F;li&gt;
&lt;li&gt;表达式可以是聚合函数，例如 pl.sum(&quot;nrs&quot;)， 求值为 Series-1&lt;&#x2F;li&gt;
&lt;li&gt;可以是窗口函数，例如 pl.col(&quot;Close&quot;).last().over(&quot;YM&quot;).alias(&quot;last_close&quot;)，求值为 Series-N&lt;&#x2F;li&gt;
&lt;li&gt;表达式可以是复杂的操作 pl.col(&quot;random&quot;).filter(pl.col(&quot;names&quot;).is_not_null())&lt;&#x2F;li&gt;
&lt;li&gt;Series-1 的求值结果会被广播为 Series-N, 所有的 Series-N 的 N 值必须与 DataFrame 的记录数相同。否则会报错。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;表达式是在 dataframe 的基础上进行求值，而不是在 row based 上进行求值。即使是 Series-1 也是 (df -&amp;gt; Series-1)，而非
( row -&amp;gt; Series-1 )&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;polars 不同于 SQL select 的执行流程，后者有一个严格的执行顺序定义：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;from -&amp;gt; where -&amp;gt; group by -&amp;gt; having -&amp;gt; select -&amp;gt; window -&amp;gt; order by&lt;&#x2F;li&gt;
&lt;li&gt;polars 中，每个操作是独立的，不同的顺序组合，会产生不同的结果。&lt;&#x2F;li&gt;
&lt;li&gt;在 polars 中, select 求值上下文中可以求值的能力，包括了 字段级、聚合级、窗口级的能力，一定程度上比 SQL 更强大。&lt;&#x2F;li&gt;
&lt;li&gt;在 filter&#x2F;aggr 求值上下文中，也可以进行类似的计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;TODO&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
polars 对窗口函数的求值是如何进行的？是否最优？&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
polars 是否有对简单的 group_by sum 操作有进行优化，避免生成中间的 child dataframe?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
对一个 join 后的 dataframe, 是否会有减枝的操作？及无用到的表会自动减枝？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;1-contexts&quot;&gt;1. Contexts&lt;&#x2F;h2&gt;
&lt;p&gt;如下的概念基于如下的示例数据集：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;polars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;pl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;df = pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DataFrame&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ham&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;egg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;df
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.998578&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.061645&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.927885&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.412684&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;0.432504&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;1-1-selection-context&quot;&gt;1.1 Selection Context&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;1-series-n-and-series-1-expression&quot;&gt;1) Series-N and Series-1 expression&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;total&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;解析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;df.select( pl.col(&quot;nrs&quot;) ) 返回的结果是一个 Series，其长度为 N（记录数）&lt;&#x2F;li&gt;
&lt;li&gt;df.select( pl.col(&quot;random&quot;).sum() ) 返回的结果是 Series[1] 或者 Scalar，Scalar值会广播成为 Series[N]。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;因此，在 Select 中的表达式，或者返回 Series[N]， 或者返回 Series[1]。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(),                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series[N]
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;first name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10xnrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 5)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names1&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;first name&lt;&#x2F;th&gt;&lt;th&gt;10xnrs&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# example mixes Series-N and Series-1 Expression
&lt;&#x2F;span&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(),                                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series[N]
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;first name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &#x2F; pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pecents&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series[N] &#x2F; Scalar =&amp;gt; Series[N]
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10xnrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 5)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;first name&lt;&#x2F;th&gt;&lt;th&gt;pecents&lt;&#x2F;th&gt;&lt;th&gt;10xnrs&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;37.248716&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.337091&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;11.178078&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;37.932039&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;11.304075&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;基于向量的广播机制，可以在单个表达式中结合使用 Series-N 表达式 和 Series-1 表达式，这种能力，要在SQL中表达出来，还是比较困难的。（&lt;strong&gt;从这个角度来看，
Polars的表达能力相比 SQL 更强大一些，两者的计算模型并不相同&lt;&#x2F;strong&gt;）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-apis&quot;&gt;2) APIS&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;df.select( ... )&lt;&#x2F;code&gt;  # 仅选择部分列&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;df.with_columns( ... ) &lt;&#x2F;code&gt; # 保留所有列，并创新新的列(如果列名重复，则覆盖掉原有的列)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_columns&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(),   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 没有取别名时，这个新的列的列明也叫做 random，因此，在结果中会覆盖掉原有 random 列。
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;2.23031&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# the code not works
&lt;&#x2F;span&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()),       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# the series length is 4, not 5
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ComputeError: Series length 4 doesn&amp;#39;t match the DataFrame height of 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;---------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ComputeError                              Traceback (most recent call last)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Cell In[3], line 1
&lt;&#x2F;span&gt;&lt;span&gt;----&amp;gt; 1 df.select(
&lt;&#x2F;span&gt;&lt;span&gt;      2     pl.col(&amp;quot;nrs&amp;quot;).filter(pl.col(&amp;quot;names&amp;quot;).is_not_null()),
&lt;&#x2F;span&gt;&lt;span&gt;      3     pl.col(&amp;quot;names&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;      4     pl.col(&amp;quot;random&amp;quot;).sum().alias(&amp;quot;total&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;      5     pl.col(&amp;quot;groups&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      6 )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;File ~&#x2F;venvs&#x2F;polars&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;polars&#x2F;dataframe&#x2F;frame.py:8137, in DataFrame.select(self, *exprs, **named_exprs)
&lt;&#x2F;span&gt;&lt;span&gt;   8037 def select(
&lt;&#x2F;span&gt;&lt;span&gt;   8038     self, *exprs: IntoExpr | Iterable[IntoExpr], **named_exprs: IntoExpr
&lt;&#x2F;span&gt;&lt;span&gt;   8039 ) -&amp;gt; DataFrame:
&lt;&#x2F;span&gt;&lt;span&gt;   8040     &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;   8041     Select columns from this DataFrame.
&lt;&#x2F;span&gt;&lt;span&gt;   8042 
&lt;&#x2F;span&gt;&lt;span&gt;   (...)
&lt;&#x2F;span&gt;&lt;span&gt;   8135     └───────────┘
&lt;&#x2F;span&gt;&lt;span&gt;   8136     &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; 8137     return self.lazy().select(*exprs, **named_exprs).collect(_eager=True)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;File ~&#x2F;venvs&#x2F;polars&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;polars&#x2F;lazyframe&#x2F;frame.py:1816, in LazyFrame.collect(self, type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, no_optimization, streaming, background, _eager, **_kwargs)
&lt;&#x2F;span&gt;&lt;span&gt;   1813 # Only for testing purposes atm.
&lt;&#x2F;span&gt;&lt;span&gt;   1814 callback = _kwargs.get(&amp;quot;post_opt_callback&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; 1816 return wrap_df(ldf.collect(callback))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ComputeError: Series length 4 doesn&amp;#39;t match the DataFrame height of 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码无法正确执行：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;df 的长度为 5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;df.select( pl.col(&quot;nrs&quot;).filter( pl.col(&quot;names&quot;).is_not_null() )&lt;&#x2F;code&gt; 返回的 Series 长度为4。Series-N 与 DataFrame 不匹配。
这种情况是不能使用广播的方式进行对齐的，因此，这段代码无法正确执行。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;1-2-filter-context&quot;&gt;1.2 Filter Context&lt;&#x2F;h3&gt;
&lt;p&gt;Filter Context 的表达式求值为 boolean， 类似于 f: row -&amp;gt; boolean&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (2, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.249306&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;0.252116&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 可以在 filter 中使用聚合函数，窗口函数，其用法与 select 中一致。
&lt;&#x2F;span&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;over&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (2, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.155879&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.711329&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;需要补充分析&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在 Filter 中也存在 Series-N 和 Series-1 的表达式问题，可以理解为：filter 是计算出一个 Series-N[Boolean]，表达式的每一个部分或者求值为：Series-1（广播）或者 Series-N。
当结合一些复杂的表达式时，例如 a and b or c，其中 a,b, c 可能是 Series-N， 也可能是 Series-1.
求值方式： 1. 先对所有基础的 Logic Expression 进行求值，其或者为 Series-N, 或者为 Series-1。
2. 广播后，再求值 Series-N&lt;&#x2F;p&gt;
&lt;p&gt;问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在上面的例子中，select 上下文中可以使用 filter, sum, 以及窗口函数等，那么这些函数是否在 filter 中也可以使用？&lt;&#x2F;li&gt;
&lt;li&gt;如果既有 select 计算，又有 filter 计算，那么这两个计算是否有先后顺序？
我们可以查看如下的示例：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df1 = df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(),                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series[N]
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;first name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10xnrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;) .filter(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;df2 = df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(),                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series[N]
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;first name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10xnrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scalar
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;shape: (5, 5)
&lt;&#x2F;span&gt;&lt;span&gt;┌─────┬────────┬───────┬────────────┬────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│ nrs ┆ names1 ┆ names ┆ first name ┆ 10xnrs │
&lt;&#x2F;span&gt;&lt;span&gt;│ --- ┆ ---    ┆ ---   ┆ ---        ┆ ---    │
&lt;&#x2F;span&gt;&lt;span&gt;│ i64 ┆ str    ┆ str   ┆ str        ┆ f64    │
&lt;&#x2F;span&gt;&lt;span&gt;╞═════╪════════╪═══════╪════════════╪════════╡
&lt;&#x2F;span&gt;&lt;span&gt;│ 11  ┆ foo    ┆ null  ┆ foo        ┆ 27.5   │
&lt;&#x2F;span&gt;&lt;span&gt;│ 11  ┆ ham    ┆ egg   ┆ foo        ┆ 27.5   │
&lt;&#x2F;span&gt;&lt;span&gt;│ 11  ┆ spam   ┆ foo   ┆ foo        ┆ 27.5   │
&lt;&#x2F;span&gt;&lt;span&gt;│ 11  ┆ egg    ┆ ham   ┆ foo        ┆ 27.5   │
&lt;&#x2F;span&gt;&lt;span&gt;│ 11  ┆ null   ┆ spam  ┆ foo        ┆ 27.5   │
&lt;&#x2F;span&gt;&lt;span&gt;└─────┴────────┴───────┴────────────┴────────┘
&lt;&#x2F;span&gt;&lt;span&gt;shape: (2, 5)
&lt;&#x2F;span&gt;&lt;span&gt;┌─────┬────────┬───────┬────────────┬────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│ nrs ┆ names1 ┆ names ┆ first name ┆ 10xnrs │
&lt;&#x2F;span&gt;&lt;span&gt;│ --- ┆ ---    ┆ ---   ┆ ---        ┆ ---    │
&lt;&#x2F;span&gt;&lt;span&gt;│ i64 ┆ str    ┆ str   ┆ str        ┆ f64    │
&lt;&#x2F;span&gt;&lt;span&gt;╞═════╪════════╪═══════╪════════════╪════════╡
&lt;&#x2F;span&gt;&lt;span&gt;│ 8   ┆ spam   ┆ null  ┆ spam       ┆ 40.0   │
&lt;&#x2F;span&gt;&lt;span&gt;│ 8   ┆ null   ┆ spam  ┆ spam       ┆ 40.0   │
&lt;&#x2F;span&gt;&lt;span&gt;└─────┴────────┴───────┴────────────┴────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 5)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names1&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;first name&lt;&#x2F;th&gt;&lt;th&gt;10xnrs&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;27.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (2, 5)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names1&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;first name&lt;&#x2F;th&gt;&lt;th&gt;10xnrs&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;40.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;40.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;从上面的这个例子中， 我们可以看到 调整顺序后的两个结果是完全不一样的，这个也说明了与 SQL Select 并不一样，在 Pola RS 中，
select 与 filter 是独立的操作，df.select(...).filter(...) 与 df.filter(...).select(...) 是不一样的。&lt;&#x2F;p&gt;
&lt;p&gt;这与 SQL 中 select * from table where ... 的执行顺序是不一样的。一条SQL 语句有一个预定的执行顺序，参见：
&lt;a href=&quot;https:&#x2F;&#x2F;pic2.zhimg.com&#x2F;80&#x2F;v2-8faf44f913ce39eef7bab322e4a1b4f9_1440w.webp&quot;&gt;SELECT 语句执行流程&lt;&#x2F;a&gt;
在这个执行流程中，select 子句是在filter 之后，然后group by，having，在 having 过滤之后执行的，但在窗口函数执行之前。
而 polars 则完全不同，每个 data frame 操作是独立的，不同的顺序组合，会产生不同的结果。&lt;&#x2F;p&gt;
&lt;p&gt;当然，在 Lazy Evaluation 中，最后执行计划会对这些操作进行优化，生成一个最优的执行计划。但逻辑上来看，这些操作是独立的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-3-aggragation-context&quot;&gt;1.3 Aggragation Context&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;group_by&lt;&#x2F;code&gt;之后， DataFrame 会转化为 GroupBy， agg 操作会再次将 GroupBy 转换为 DataFrame。&lt;&#x2F;p&gt;
&lt;p&gt;每个 agg 表达式的上下文是单个分组， 其返回值是 Series-1。 如果某个表达式求值为 Series-N，将最后转换为 Series-1。（大部分是一个字符串拼接的操作）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group_by&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;agg&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), 
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (3, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;list[i64]&lt;&#x2F;td&gt;&lt;td&gt;list[f64]&lt;&#x2F;td&gt;&lt;td&gt;list[str]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;[1, 2]&lt;&#x2F;td&gt;&lt;td&gt;[0.830762, 0.052124]&lt;&#x2F;td&gt;&lt;td&gt;[&amp;quot;foo&amp;quot;, &amp;quot;ham&amp;quot;]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;[null]&lt;&#x2F;td&gt;&lt;td&gt;[0.846002]&lt;&#x2F;td&gt;&lt;td&gt;[&amp;quot;egg&amp;quot;]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;[3, 5]&lt;&#x2F;td&gt;&lt;td&gt;[0.249306, 0.252116]&lt;&#x2F;td&gt;&lt;td&gt;[&amp;quot;spam&amp;quot;, null]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;在 group_by 之后的 DF 其上下文为 List[(key, rows)] 的形式，在这个例子中，我们没有进行聚合操作，因此，返回的结果是每个组中的字段的一个列表形式。这个在实际中意义不大，因为数据量很大时，这个值会很长。但在这个教程中，可以帮助理解后续的聚合函数如何工作。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group_by&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;agg&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum nrs by groups
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random_count&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# count group members
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random_hasname&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suffix&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_sum&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum random where name != null
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series-N 会自动转换为 Series-1
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reversed names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Series-N 会自动转换为 Series-1,
&lt;&#x2F;span&gt;&lt;span&gt;    (pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()) &#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;     pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;    ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hasname_percents&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),                                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 比较复杂的表达式 
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random_hasname_tailer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 理解 filter 
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (3, 10)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;random_count&lt;&#x2F;th&gt;&lt;th&gt;random_hasname&lt;&#x2F;th&gt;&lt;th&gt;random_sum&lt;&#x2F;th&gt;&lt;th&gt;all nrs&lt;&#x2F;th&gt;&lt;th&gt;reversed names&lt;&#x2F;th&gt;&lt;th&gt;hasname_percents&lt;&#x2F;th&gt;&lt;th&gt;random_hasname_tailer&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;list[f64]&lt;&#x2F;td&gt;&lt;td&gt;u32&lt;&#x2F;td&gt;&lt;td&gt;list[f64]&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;list[i64]&lt;&#x2F;td&gt;&lt;td&gt;list[str]&lt;&#x2F;td&gt;&lt;td&gt;list[f64]&lt;&#x2F;td&gt;&lt;td&gt;list[f64]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;[0.846002]&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;[0.846002]&lt;&#x2F;td&gt;&lt;td&gt;0.846002&lt;&#x2F;td&gt;&lt;td&gt;[null]&lt;&#x2F;td&gt;&lt;td&gt;[&amp;quot;egg&amp;quot;]&lt;&#x2F;td&gt;&lt;td&gt;[100.0]&lt;&#x2F;td&gt;&lt;td&gt;[]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;[0.249306, 0.252116]&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;[0.249306]&lt;&#x2F;td&gt;&lt;td&gt;0.249306&lt;&#x2F;td&gt;&lt;td&gt;[3, 5]&lt;&#x2F;td&gt;&lt;td&gt;[null, &amp;quot;spam&amp;quot;]&lt;&#x2F;td&gt;&lt;td&gt;[49.719785]&lt;&#x2F;td&gt;&lt;td&gt;[0.249306]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;[0.830762, 0.052124]&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;[0.830762, 0.052124]&lt;&#x2F;td&gt;&lt;td&gt;0.882886&lt;&#x2F;td&gt;&lt;td&gt;[1, 2]&lt;&#x2F;td&gt;&lt;td&gt;[&amp;quot;ham&amp;quot;, &amp;quot;foo&amp;quot;]&lt;&#x2F;td&gt;&lt;td&gt;[94.096138, 5.903862]&lt;&#x2F;td&gt;&lt;td&gt;[0.052124]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;这个示例中有几个Expression的理解会比较复杂，需要理解 Series-N 和 Series-1 的计算过程。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pl.sum(&quot;nrs&quot;)&lt;&#x2F;code&gt; 在当前分组中，求值为 Series-1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pl.col(&quot;random&quot;).filter(pl.col(&quot;names&quot;).is_not_null()).sum().name.suffix(&quot;_sum&quot;)&lt;&#x2F;code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;X = pl.col(&quot;random&quot;)&lt;&#x2F;code&gt; 求值为 Series-N&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Y = X.filter(pl.col(&quot;names&quot;).is_not_null())&lt;&#x2F;code&gt; 求值为 Series-N&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Y.sum()&lt;&#x2F;code&gt; 求值为 Series-1&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pl.col(&quot;random&quot;).filter(pl.col(&quot;names&quot;).is_not_null()).filter(pl.col(&quot;nrs&quot;) &amp;gt;= 2).alias(&quot;random_hasname_tailer&quot;) &lt;&#x2F;code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;X = pl.col(&quot;random&quot;)&lt;&#x2F;code&gt;: Series-N&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Y = X.filter(pl.col(&quot;names&quot;).is_not_null())&lt;&#x2F;code&gt; : X 的环境中不仅仅包括 random列，也包括了其他的列。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Z = Y.filter(pl.col(&quot;nrs&quot;) &amp;gt;= 2)&lt;&#x2F;code&gt;  : Z：从Y 中派生出来，Y 中也包含了其他的列。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个 filter 的上下文确实非常强大，后续在阅读代码时，需要理解这个执行的逻辑。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-expressions&quot;&gt;2. Expressions&lt;&#x2F;h2&gt;
&lt;p&gt;理解了 context 之后，expression 的多样性就显得没有那么复杂了，否则的话，一大堆的 expression 会让人眼花缭乱。&lt;&#x2F;p&gt;
&lt;p&gt;可以分为如下几类：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;operators: +, -, *, &#x2F; etc.&lt;&#x2F;li&gt;
&lt;li&gt;column selections: p.col(&quot;name&quot;), p.all()&lt;&#x2F;li&gt;
&lt;li&gt;functions, case when,&lt;&#x2F;li&gt;
&lt;li&gt;casting&lt;&#x2F;li&gt;
&lt;li&gt;strings&lt;&#x2F;li&gt;
&lt;li&gt;aggregations&lt;&#x2F;li&gt;
&lt;li&gt;missing data&lt;&#x2F;li&gt;
&lt;li&gt;window functions&lt;&#x2F;li&gt;
&lt;li&gt;folds&lt;&#x2F;li&gt;
&lt;li&gt;lists&lt;&#x2F;li&gt;
&lt;li&gt;UDF&lt;&#x2F;li&gt;
&lt;li&gt;struts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (5, 4)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;nrs&lt;&#x2F;th&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;th&gt;random&lt;&#x2F;th&gt;&lt;th&gt;groups&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;i64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;f64&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.332095&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;ham&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.807228&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;A&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.174601&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;egg&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;0.839158&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;C&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;td&gt;0.498681&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;B&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;out = df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group_by&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;agg&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum nrs by groups
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# count group members
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum random where name != null
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suffix&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_sum&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reversed names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(out)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;shape: (3, 5)
&lt;&#x2F;span&gt;&lt;span&gt;┌────────┬─────┬───────┬────────────┬────────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│ groups ┆ nrs ┆ count ┆ random_sum ┆ reversed names │
&lt;&#x2F;span&gt;&lt;span&gt;│ ---    ┆ --- ┆ ---   ┆ ---        ┆ ---            │
&lt;&#x2F;span&gt;&lt;span&gt;│ str    ┆ i64 ┆ u32   ┆ f64        ┆ list[str]      │
&lt;&#x2F;span&gt;&lt;span&gt;╞════════╪═════╪═══════╪════════════╪════════════════╡
&lt;&#x2F;span&gt;&lt;span&gt;│ A      ┆ 3   ┆ 2     ┆ 1.139323   ┆ [&amp;quot;ham&amp;quot;, &amp;quot;foo&amp;quot;] │
&lt;&#x2F;span&gt;&lt;span&gt;│ C      ┆ 0   ┆ 1     ┆ 0.839158   ┆ [&amp;quot;egg&amp;quot;]        │
&lt;&#x2F;span&gt;&lt;span&gt;│ B      ┆ 8   ┆ 2     ┆ 0.174601   ┆ [null, &amp;quot;spam&amp;quot;] │
&lt;&#x2F;span&gt;&lt;span&gt;└────────┴─────┴───────┴────────────┴────────────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;) )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (2, 1)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (2, 1)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;names&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&amp;quot;spam&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;null&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;out = df.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group_by&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;agg&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum nrs by groups
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# count group members
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sum random where name != null
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_not_null&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;().name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suffix&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_sum&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reversed names&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(out)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;shape: (3, 5)
&lt;&#x2F;span&gt;&lt;span&gt;┌────────┬─────┬───────┬────────────┬────────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│ groups ┆ nrs ┆ count ┆ random_sum ┆ reversed names │
&lt;&#x2F;span&gt;&lt;span&gt;│ ---    ┆ --- ┆ ---   ┆ ---        ┆ ---            │
&lt;&#x2F;span&gt;&lt;span&gt;│ str    ┆ i64 ┆ u32   ┆ f64        ┆ list[str]      │
&lt;&#x2F;span&gt;&lt;span&gt;╞════════╪═════╪═══════╪════════════╪════════════════╡
&lt;&#x2F;span&gt;&lt;span&gt;│ A      ┆ 3   ┆ 2     ┆ 1.139323   ┆ [&amp;quot;ham&amp;quot;, &amp;quot;foo&amp;quot;] │
&lt;&#x2F;span&gt;&lt;span&gt;│ C      ┆ 0   ┆ 1     ┆ 0.839158   ┆ [&amp;quot;egg&amp;quot;]        │
&lt;&#x2F;span&gt;&lt;span&gt;│ B      ┆ 8   ┆ 2     ┆ 0.174601   ┆ [null, &amp;quot;spam&amp;quot;] │
&lt;&#x2F;span&gt;&lt;span&gt;└────────┴─────┴───────┴────────────┴────────────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;datetime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;date ;
&lt;&#x2F;span&gt;&lt;span&gt;df2 = (
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date_range&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eager&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to_frame&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;df2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div&gt;&lt;style&gt;
.dataframe &gt; thead &gt; tr,
.dataframe &gt; tbody &gt; tr {
  text-align: right;
  white-space: pre-wrap;
}
&lt;&#x2F;style&gt;
&lt;small&gt;shape: (365, 1)&lt;&#x2F;small&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;time&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;date&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;2021-01-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-01-02&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-01-03&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-01-04&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-01-05&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;&amp;hellip;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-12-27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-12-28&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-12-29&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-12-30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2021-12-31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;3-eager-or-lazy&quot;&gt;3. Eager or Lazy&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;4-transformation&quot;&gt;4. Transformation&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;5-window-function&quot;&gt;5. Window Function&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;apple_stocks = (
&lt;&#x2F;span&gt;&lt;span&gt;    pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scan_csv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;apple_stock.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;q = (apple_stocks
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to_datetime&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_columns&lt;&#x2F;span&gt;&lt;span&gt;(pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).dt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_columns&lt;&#x2F;span&gt;&lt;span&gt;( pl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;over&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;last_close&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) )
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;last_close&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unique&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show_graph&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# q.explain()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;polars-notebook&#x2F;output_42_0.svg&quot; alt=&quot;svg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-operator-and-functions&quot;&gt;6. Operator and Functions&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;misc-why-an-expression-based-api-other-than-sql-in-polars&quot;&gt;Misc: Why an Expression based API other than SQL in Polars?&lt;&#x2F;h2&gt;
&lt;p&gt;The short answer:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Is Polars DSL a superset of SQL? Many DSL capabilities can&#x27;t be expressed in SQL.&lt;&#x2F;li&gt;
&lt;li&gt;What capabilities can be expressed by SQL but not by Polars DSL?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In terms of ease of use, SQL is undoubtedly a more concise expression, while DSL is slightly redundant. However, for complex logic, SQL may use complex nesting to represent it, while DSLs can be more concise in this regard.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Supplemented the analysis of Polars&#x27; execution process and performance optimization strategy&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Is it OK to further test the JOIN performance of Polars?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
How to read Polars&#x27; query plan&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Think about how to optimize further data: for example, how to optimize indexed datasets (including min-max indexes, bloom indexes, bitmap indexes, etc.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
What can polars do in our multidimensional model queries?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
window functions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; 1. Use polars to query the wide table and cache it in a parquet file.
&lt;&#x2F;span&gt;&lt;span&gt; 2. 查询时，从缓存的parquet 中读取数据。
&lt;&#x2F;span&gt;&lt;span&gt; 3. aggregate 查询时，自动缓存聚合的结果数据。
&lt;&#x2F;span&gt;&lt;span&gt; 4. 使用 LRU 机制管理缓存数据。&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>向量学习</title>
        <published>2024-05-13T12:00:00+00:00</published>
        <updated>2024-05-13T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/vectorize-1/"/>
        <id>https://wangzaixiang.github.io/blog/vectorize-1/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/vectorize-1/">&lt;p&gt;本文是想通过案例来学习 vectorize 的 使用、效果，以加深对这项技术的理解。
这个例子是 参考: &lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;605743800&quot;&gt;ucasfl：ClickHouse 系列 - 向量化执行引擎介绍&lt;&#x2F;a&gt; 中介绍的 countBytes 函数，
我使用 rust portable Simd 库来进行练习。&lt;&#x2F;p&gt;
&lt;p&gt;代码可以 从这里访问：&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=nightly&amp;amp;mode=release&amp;amp;edition=2021&amp;amp;gist=e5f7c81e71e467adad2d372d13625f16&quot;&gt;playground&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;或者参考如下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(portable_simd)]
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(stdsimd)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::mem::{size_of};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::simd::{SimdPartialEq, ToBitMask};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::simd::{u8x16, u8x32, u8x64};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::simd::Simd;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fill_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; random = rand::random::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        bytes[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ random as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; bytes = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; random = rand::random::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fill_data&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; bytes);
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZero_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZero_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV128_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV128_countOnes_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV256_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV256_countOnes_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV512_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV512_countOnes_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV128_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV128_popcnt_intrins_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV256_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV256_popcnt_intrins_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; require 256bit AVX2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV256_popcnt_intrins_x86&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ countNonZeroV256_popcnt_intrins_x86(&amp;amp;bytes) }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV512_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV512_popcnt_intrins_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; require 512bit AVX2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV512_popcnt_intrins_x86&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ countNonZeroV512_popcnt_intrins_x86(&amp;amp;bytes) }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV128_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV128_popcntAsm_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV256_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV128_popcntAsm_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countNonZeroV512_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span&gt;, || {
&lt;&#x2F;span&gt;&lt;span&gt;            bytes[random % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            countNonZeroV128_popcntAsm_inline(&amp;amp;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run1&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loops&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; F: FnMut()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize  &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; time0 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; time1 = time0;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; end = time0 + std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; _i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..loops {
&lt;&#x2F;span&gt;&lt;span&gt;            sum += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        n += loops;
&lt;&#x2F;span&gt;&lt;span&gt;        time1 = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; time1 &amp;gt;= end {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; elapsed = time1 - time0;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; avg = elapsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_nanos&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; n as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{label:32}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lane width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{width}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sum:{sum:16}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;times:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{elapsed:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{avg:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ns&#x2F;iter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZero_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;byte in bytes {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; byte != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZero&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;byte in bytes {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; byte != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x16;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x32;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_popcnt_intrins_x86&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::x86_64::*;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = __m256i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm256_setzero_si256&lt;&#x2F;span&gt;&lt;span&gt;() ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm256_loadu_epi8&lt;&#x2F;span&gt;&lt;span&gt;(bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(i) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const i8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm256_cmp_epi8_mask&lt;&#x2F;span&gt;&lt;span&gt;(chunk, zero, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;_MM_CMPINT_NE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count +=  mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_popcnt_intrins_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x64;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_popcnt_intrins_x86&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::x86_64::*;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = __m512i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm512_setzero_si512&lt;&#x2F;span&gt;&lt;span&gt;() ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm512_loadu_epi8&lt;&#x2F;span&gt;&lt;span&gt;(bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(i) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;*const i8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mask = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;_mm512_cmp_epi8_mask&lt;&#x2F;span&gt;&lt;span&gt;(chunk, zero, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;_MM_CMPINT_NE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count +=  mask.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_popcnt_intrins&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x16;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_popcnt_intrins&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x32;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_popcnt_intrins&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x64;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std::arch::x86_64::_popcnt64(bits as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 16&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 32&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_countOnes_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 64&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;&#x2F; no-inline
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_countOnes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 16&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_countOnes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 32&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_countOnes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = Simd&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, 64&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits = cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        count += bits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x16;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x32;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_popcntAsm_inline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x64;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; no-inline
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV128_popcntAsm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x16;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV256_popcntAsm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x32;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(target_arch = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(never)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;countNonZeroV512_popcntAsm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core::arch::asm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;VT = u8x64;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::splat(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i + size_of::&amp;lt;VT&amp;gt;() &amp;lt;= bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;VT&lt;&#x2F;span&gt;&lt;span&gt;::from_slice(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmp = chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;simd_ne&lt;&#x2F;span&gt;&lt;span&gt;(zero);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= cmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_bitmask&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; count += unsafe { std::arch::x86_64::_popcnt32(bits as i32) as usize };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ asm! {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;popcnt {y}, {x}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x = in(reg) bits, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) n
&lt;&#x2F;span&gt;&lt;span&gt;        } }
&lt;&#x2F;span&gt;&lt;span&gt;        count += n;
&lt;&#x2F;span&gt;&lt;span&gt;        i += size_of::&amp;lt;VT&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        count += countNonZero_inline(&amp;amp;bytes[i..]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    count
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;128bit: u8x16&lt;&#x2F;li&gt;
&lt;li&gt;256bit: u8x32&lt;&#x2F;li&gt;
&lt;li&gt;512bit: u8x64&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个实现中，对如何进行整数的1位统计分别使用了3种方法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;count_ones。看rust得实现，采用的算法并不算太高效&lt;&#x2F;li&gt;
&lt;li&gt;尝试使用  std::arch::x86_64::_popcnt64(bits as i64)&lt;&#x2F;li&gt;
&lt;li&gt;尝试使用 asm 嵌入 popcnt 指令。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;后面发现，其实可以使用 &lt;code&gt;-Ctarget-cpu=native&lt;&#x2F;code&gt; 来识别 popcnt 特性，从而自动生成 popcnt的代码，这种情况下，可以获得很好的执行效果。&lt;&#x2F;p&gt;
&lt;p&gt;分别在3个平台上进行了测试：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;M1-MAX&lt;&#x2F;li&gt;
&lt;li&gt;X86 on M1-MAX(Rosetta 2)&lt;&#x2F;li&gt;
&lt;li&gt;X86(内部虚拟机)&lt;&#x2F;li&gt;
&lt;li&gt;X86(阿里云 ecs.c7.xlarge型号，CPU为：Intel Xeon(Ice Lake) Platinum 8369B)&lt;&#x2F;li&gt;
&lt;li&gt;ecs.c7.xlarge，启用 -Ctarget-cpu=native&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;vectorize-1&#x2F;simd-1.webp&quot; alt=&quot;性能对比&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;更新：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在 x86 AVX512上，使用 &lt;code&gt;cargo +nightly rustc --release -- -Ctarget-cpu=native&lt;&#x2F;code&gt; 选项编译后的性能更佳。应该是使用到了当前CPU的全部能力,
512bit向量下，达到了11.7ns。&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; +nightly rustc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Z&lt;&#x2F;span&gt;&lt;span&gt; build-std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; x86_64-unknown-linux-gnu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release&lt;&#x2F;span&gt;&lt;span&gt;  -- -Ctarget-cpu=native
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;结论分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;向量化的版本相比普通循环的版本，有接近10倍的提升。(M1 提升：4倍，X86提升：9倍）portable_simd 实际使用的是 128bit 的向量，
但可以使用256&#x2F;512位的API，此时，它会进行展开。&lt;&#x2F;li&gt;
&lt;li&gt;我之前有个误解，portable_simd无法使用到 AVX512等能力。实际上并不然，只要编译时指定 target-cpu，是可以使用到 avx2, avx512等向量能力的。
portable_simd 是开发向量化算法首选，毕竟可移植性是一个很重要的需求。&lt;&#x2F;li&gt;
&lt;li&gt;在部份场合下，rustc会自动向量化，简单场景下效果会和手动向量化效果差不多。但有不少限制，复杂一些算法，可能无法自动向量化。&lt;&#x2F;li&gt;
&lt;li&gt;尝试使用 x86 私有的 256位向量&#x2F;512位向量能力，发现性能反而有下降，查看原因是 rustc 没有为 &lt;em&gt;mm_xxx&lt;&#x2F;em&gt; intrinsc 指令生成内联，
产生了 function call 的开销，这导致了性能的下降。&lt;&#x2F;li&gt;
&lt;li&gt;编写测试代码时，前面的版本，inline时进行了过度的优化（指针对当前的场景进行了特定的优化），其不具备可复制性，干扰了测试。
调整后的测试数据要好理解很多。（之前的部份优化，导致 512bit 可以优化到4n s 以内，后实际发现是测试代码触发了rustc进行了逻辑优化，
少执行了不少循环。调整后的代码增加了数据的混乱，避免过度优化）。&lt;&#x2F;li&gt;
&lt;li&gt;使用嵌入汇编后，可能会影响编译器的进一步优化，在案列中，asm版本，在支持 AVX512的CPU上并非最佳，我估计是没有进行循环展开导致的。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;hou-xu-wo-hui-shou-ji-ji-yu-xiang-liang-ji-suan-de-yi-xi-lie-suan-fa-zheng-li-yi-ge-ti-gang-li-ru&quot;&gt;后续，我会收集基于向量计算的一系列算法，整理一个提纲，例如:&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;C++中的向量计算https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;450069375&#x2F;answer&#x2F;3258826060?utm_psn=1714201317017481216&lt;&#x2F;li&gt;
&lt;li&gt;hash 向量算法：是否可以设计一个可基于 SIMD 的hash算法（不是对单个值计算hash，而是对向量计算hash向量）？&lt;&#x2F;li&gt;
&lt;li&gt;hash join的 向量算法
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;blog&#x2F;vectorized-hash-joiner&#x2F;&quot;&gt;40x faster hash joiner with vectorized execution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;源头：Balancing vectorized query execution with bandwidth-optimized storage (已收藏到 ivySCI 库中第5.4节：Optimizing Hash-Join)，比较难读。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.csail.mit.edu&#x2F;cag&#x2F;6.893-f2000&#x2F;vectorhashjoin.pdf&quot;&gt;A Vectorized Hash-Join&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;binary search 的向量算法&lt;&#x2F;li&gt;
&lt;li&gt;Simd-json 中的向量计算&lt;&#x2F;li&gt;
&lt;li&gt;加密解密中的向量计算&lt;&#x2F;li&gt;
&lt;li&gt;Swiss Table中的向量计算等。Rust HashMap就是基于这个结构的。&lt;&#x2F;li&gt;
&lt;li&gt;base64&lt;a href=&quot;https:&#x2F;&#x2F;link.zhihu.com&#x2F;?target=https%3A&#x2F;&#x2F;mcyoung.xyz&#x2F;2023&#x2F;11&#x2F;27&#x2F;simd-base64&#x2F;&quot;&gt;Designing a SIMD Algorithm from Scratch · mcyoung&lt;&#x2F;a&gt;非常好的一篇讲解 vectorize 的文章。
以 base64 decode为例构造一个向量实现，我觉得 encode 也适合构造一个向量实现，可以拿来练手。&lt;&#x2F;li&gt;
&lt;li&gt;Intel 向量指令 https:&#x2F;&#x2F;www.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;docs&#x2F;intrinsics-guide&#x2F;index.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;cloudwego&#x2F;sonic-rs&#x2F;blob&#x2F;main&#x2F;docs&#x2F;performance_zh.md sonic-rs如何利用SIMD来加速JSON解析&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;zig 语言有内置的 SIMD 支持，在 Parker Liu 的专栏，有很多值得学习的干货：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;687938028&quot;&gt;Zig语言的SIMD并行计算优化初探&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;688345298&quot;&gt;Zig语言的SIMD并行计算优化初探--矩阵转置&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;688719072&quot;&gt;Zig语言的SIMD并行计算优化初探--高通DSP的矩阵转置&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;690008262&quot;&gt;Zig语言的SIMD并行计算优化初探--并行排序&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;695321017&quot;&gt;Zig语言的SIMD并行计算优化初探--混合快速排序&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;696657692&quot;&gt;Zig语言的SIMD并行计算优化初探--多向量并行排序&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;也欢迎各位帮忙补充你所知道的应用向量计算的算法。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Scala3 浅尝</title>
        <published>2022-07-10T12:00:00+00:00</published>
        <updated>2022-07-10T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/trying-scala3/"/>
        <id>https://wangzaixiang.github.io/blog/trying-scala3/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/trying-scala3/">&lt;p&gt;Scala3 从2021-05-14 正式发布 3.0.0 至今，已发布了 3.0.1， 3.0.2， 3.1.0， 3.1.1， 3.1.2， 3.1.3 等6个小版本，
预计7月份很快就迎来3.2.0的版本。之前有不少的Scala2.12&#x2F;2.13的使用经验，但由于最近没有实际应用的项目，故一直没有机会动手体会Scala3。
最近闲暇时间，动手把之前的几个库迁移到Scala3上，将部份经验记录一下。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;2024-08-21 补充
这篇文章写于2022-05,现在时间又过去了2年多，Scala3 LTS 版本也出来了，社区已经基本转向 Scala3了，IdeaJ 对 Scala3 的支持
也趋于稳定。我也在23年开始带领了一个团队，将一个核心的产品转儿使用 Scala3 进行了重构，取得了良好的成绩。&lt;&#x2F;p&gt;
&lt;p&gt;可能是我个人有偏见：使用Java，太容易受不良习惯的左右，是在很难编写出好的代码呢，而应用Scala，我们通过施加一些简单的限制原则，
就可以强迫开发人员改变习惯，编写成可读性、可维护性显著改进的代码。&lt;&#x2F;p&gt;
&lt;p&gt;很希望后续能够在这方面总结经验，分享，并进一步推广函数式编程实践。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;idezhi-chi&quot;&gt;IDE支持&lt;&#x2F;h2&gt;
&lt;p&gt;学习一个新的编程语言，如果有一个好的IDE支持，会顺手很多。之前一直在 ideaj 这个工具中编写 scala 2 的代码。目前的 ideaj 对 Scala3
的支持算得上“能用”的阶段，还有不少瑕疵，期待在新的版本中能够加速优化。说实在的，目前的IDE水平对Scala3的推广还是会有很多的阻碍：
大家对IDE的依赖是相当强的。&lt;&#x2F;p&gt;
&lt;p&gt;一些瑕疵：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;对新的缩进语法的编辑支持一般，比如 Copy - Paste 操作不能很好的处理 indent 语法。&lt;&#x2F;li&gt;
&lt;li&gt;对 V3 的一些语法，如extension等，语法导航能力较弱，也缺乏类型提示的功能。很多在IDE中的类型推导都弱化到了 &lt;code&gt;any&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;对 Macro 的部份语法支持不够，例如 &lt;code&gt;&#x27;[t]&lt;&#x2F;code&gt; 这样的类型模式匹配。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;整体评估：ideaj 的 Scala3 支持，“可用”，不够优秀。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macro-qian-yi&quot;&gt;Macro 迁移&lt;&#x2F;h2&gt;
&lt;p&gt;大部份的Scala2 的代码都可以较为简单的迁移到 Scala3，甚至于直接把源代码复制过来。官方提供了一个很好的迁移指导：
&lt;a href=&quot;https:&#x2F;&#x2F;link.zhihu.com&#x2F;?target=https%3A&#x2F;&#x2F;docs.scala-lang.org&#x2F;scala3&#x2F;guides&#x2F;migration&#x2F;compatibility-intro.html&quot;&gt;Compatibility Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不过，我在迁移 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wangzaixiang&#x2F;scala-sql&quot;&gt;scala-sql&lt;&#x2F;a&gt; 库的过程中，还是强迫自己放弃了Scala2的兼容语法，
强迫自己来体会 Scala3 的新风格，比如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新的缩进语法。写的越多，确实会越喜欢，这个倒是很符合“简洁”的味道。&lt;&#x2F;li&gt;
&lt;li&gt;使用 enum 来替代传统的 ADT 实现。（更好）&lt;&#x2F;li&gt;
&lt;li&gt;使用新的 given&#x2F;using 替代 implicit。 （个人是有些怀念2.13的一个关键词，搞定一切的模式的。）&lt;&#x2F;li&gt;
&lt;li&gt;新的 extension。（更好）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;上述的转变并不难，最难的还是macro的迁移：scala-sql 项目中广泛使用 Macro 来简化重复性代码的编写工作，也是框架既“简单实用”，又“功能强大”的关键措施。
Scala3的Macro可以说是一次颠覆性的实现，完全不兼容于Scala2，概念虽然有很多是相同的，但API却完全不同了。
我是差不多花了2个周末才完成了第一个Macro的迁移，不过，后面的速度就越来越快了，慢慢摸到了一些门道。这一块，我也整理了一些文档，后续可以最进一步的分享。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scala3-macros.jpg&quot; alt=&quot;Scala3 Macro 核心对象关系图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-diao-shi-macro&quot;&gt;如何调试Macro：&lt;&#x2F;h2&gt;
&lt;p&gt;编写Macro的重要方式是善用调试器，在调试中，了解各个数据结构。这相比啃文档或者直接看源代码，可能会更有效很多。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sbt -J-agentlib&lt;&#x2F;span&gt;&lt;span&gt;:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;开启 IDEA 的远程调试，这样，在sbt中执行 compile 命令时，就可以调试到我们的macro代码了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-inline-macro&quot;&gt;试用 Inline + Macro&lt;&#x2F;h2&gt;
&lt;p&gt;结合 Macro 和 inline，是一个非常有意思的实践，在scala-sql 的2.0.X版本实践中，生成的 &lt;code&gt;ResultSetMapper[T]&lt;&#x2F;code&gt; 实现，
如果从最终实现的字节码来看，是不够理想的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;需要在运行期完成 数据库字段名 和 对象字段名 的映射关系，以满足 诸如从 is_active 到 isActive的映射。&lt;&#x2F;li&gt;
&lt;li&gt;调用 caseFieldGet 方法，完成从 rs 中获取值，以及没有该字段时，default 值的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个过程时有额外的开销的。虽然相对数据库IO而言，可以忽略。&lt;&#x2F;p&gt;
&lt;p&gt;在迁移到 Scala3的过程中，我尝试结合Macro + inline 的方式，最终实现了一个“zero-cost”的ResultSetMapper实现。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;眼下Java的框架风格是无视cost，每一个框架喜欢在调用栈上层层加码，随便看看那个Spring的StackTrace都是几十层楼高。再回到 zero-cost 的时代，
感觉是那么的清爽。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;譬如：对如下的Case Class类，&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UseColumnMapper&lt;&#x2F;span&gt;&lt;span&gt;(classOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Camel2UnderscoreMapper&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Test1&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isActive&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tinyInt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;smallInt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Short&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalInt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bigInt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;floatValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doubleValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Double&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decimalValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BigDecimal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;birthday&lt;&#x2F;span&gt;&lt;span&gt;: java.sql.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createdAt&lt;&#x2F;span&gt;&lt;span&gt;: java.sql.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;updatedAt&lt;&#x2F;span&gt;&lt;span&gt;: java.sql.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blobValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Null&lt;&#x2F;span&gt;&lt;span&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or using Option[String]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyInt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or using Option[Int]
&lt;&#x2F;span&gt;&lt;span&gt;     ) derives ResultSetMapper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其对应的ResultSetMapper代码如下（对 生成的代码进行反编译的效果：）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResultSetMapper&lt;&#x2F;span&gt;&lt;span&gt; var5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResultSetMapper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResultSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var2 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var3 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var4 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBoolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;is_active&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var5 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getByte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tiny_int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;short&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var6 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getShort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;small_int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var7 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;normal_int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var8 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLong&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big_int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var10 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;float_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var11 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDouble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;double_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BigDecimal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; it &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBigDecimal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;decimal_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    scala.math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BigDecimal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var13 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; it &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; scala.package..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BigDecimal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(it) &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var15 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;birthday&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var16 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTimestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var17 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTimestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;updated_at&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var18 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blob_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var10000;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; vx &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       var10000 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; vx &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(vx);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       var10000 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var19 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var10000;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; v &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty_int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       var10000 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wasNull&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BoxesRunTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boxToInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(v));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       var10000 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;scala.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MODULE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;$;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var22 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; var10000;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.$outer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wsql_test$WsqlTest$_$_$Test1$$$$outer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(), var2, var3, var4, var5, var6, var7, var8, var10, var11, var13, var15, var16, var17, var18, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)var19, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)var22);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个生成的代码质量，基本上是 zero-cost 的了，达到了“手写代码”的质量。相比 Java的基于反射的大部分框架，scala-sql 生成的代码质量更优，
更享受了编译时期的静态类型检查福利。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现如上的清洁代码生成，我们并不需要编写复杂的Macro代码（如果这么做，Macro的代码会复杂很多，而且也不便于调试），
而是，在Macro中生成对 inline 函数的调用，利用inline展开能力，实现最终的清爽代码。
例如，对基础数据类型（值类型），且有缺省值时（deff），其使用如下的inline代码，实际上并不会产生一次函数调用，
而是将如下的代码嵌入到 from(rs: ResultSet)中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withDefaultOptionAnyVal&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deff&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResultSet&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                       (using JdbcValueAccessor[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;= rs.get[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](name)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; rs.wasNull then deff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;Some(v.nn)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; deff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ji-yu-xin-de-context-functions-chuang-jian-dsl&quot;&gt;基于新的Context Functions 创建 DSL&lt;&#x2F;h2&gt;
&lt;p&gt;最近在规划开发一个新的接口自动化测试平台， 规划的特性非常有吸引力：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;能够支持 HTTP 接口 和 Dubbo 接口。&lt;&#x2F;li&gt;
&lt;li&gt;能够配置单接口的测试用例 和 多接口流程的测试用例&lt;&#x2F;li&gt;
&lt;li&gt;可以配置请求、配置对结果的断言（基于 wjson 提供的强大的 JSON 表达能力）&lt;&#x2F;li&gt;
&lt;li&gt;可以配置依赖的数据库、以及对服务执行完后的数据库结果进行校验。&lt;&#x2F;li&gt;
&lt;li&gt;可以为接口调用配置 Mock 依赖，Mock依赖只需要使用 JSON 进行配置即可（基于wjson提供的简单而强大的模式匹配能力）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在研发上述原形信息时，我们苦于如何提供一个有好的 User Interface 以让研发、测试人员能够简单的使用上述能力？
虽然我们的最终版本会提供基于WEB的用户界面，但作为一个原型产品，我们选择 Scala DSL 来达成上述目标。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;testcase( name=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, business=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, project=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, service=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; method=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  reuse(atomic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6600&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  prepareDB {
&lt;&#x2F;span&gt;&lt;span&gt;    dataset(ref = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;base-dataset1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    insert into table1 values(...);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  prepareMocks {
&lt;&#x2F;span&gt;&lt;span&gt;    mockset( ref = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basic-mocks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; )
&lt;&#x2F;span&gt;&lt;span&gt;    mock( service=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, method=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ){
&lt;&#x2F;span&gt;&lt;span&gt;      request( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rejson&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; {...}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      response( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;....&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot; ) 
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Scala3的Context Function让 DSL变得更为简单，这一块目前还没有投产，等我们的案例完成后，我再补充上具体的demo。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;null-safe&quot;&gt;Null Safe&lt;&#x2F;h2&gt;
&lt;p&gt;这个特性目前还是实验性质的，也是我非常感兴趣的一个特性。在Java中， null 和 NPE 真是一个普遍的错误使用模式。
Kotlin&#x2F;Dart等语言都拥抱 Null Safe了。所以 Explicit Null 这个特性刚刚出来，我是非常兴奋的。
也乘着这次的机会，把 scala-sql 3 编译切到这个模式，还真的发现了之前存在一些代码，是没有很好的处理 null的。
这个暂时放到 scala3-nullsafe 分支之中，稳定后会合并到 master.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>敏捷研发与过程管理</title>
        <published>2022-03-20T00:00:00+00:00</published>
        <updated>2022-03-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/agile-rd/"/>
        <id>https://wangzaixiang.github.io/blog/agile-rd/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/agile-rd/">&lt;p&gt;本文是我在任深圳科脉公司CTO期间，在公司内部进行敏捷动员的一个 PPT 讲稿，分享了我对敏捷研发与过程管理的理解、实践经验。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.001.jpg&quot; alt=&quot;agile.001&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.002.jpg&quot; alt=&quot;agile.002&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.003.jpg&quot; alt=&quot;agile.003&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.004.jpg&quot; alt=&quot;agile.004&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.005.jpg&quot; alt=&quot;agile.005&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.006.jpg&quot; alt=&quot;agile.006&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.007.jpg&quot; alt=&quot;agile.007&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.008.jpg&quot; alt=&quot;agile.008&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.009.jpg&quot; alt=&quot;agile.009&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.010.jpg&quot; alt=&quot;agile.010&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.011.jpg&quot; alt=&quot;agile.011&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.012.jpg&quot; alt=&quot;agile.012&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.013.jpg&quot; alt=&quot;agile.013&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.014.jpg&quot; alt=&quot;agile.014&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.015.jpg&quot; alt=&quot;agile.015&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.016.jpg&quot; alt=&quot;agile.016&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.017.jpg&quot; alt=&quot;agile.017&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.018.jpg&quot; alt=&quot;agile.018&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.019.jpg&quot; alt=&quot;agile.019&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;agile-rd&#x2F;img.020.jpg&quot; alt=&quot;agile.020&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Yedis：一款轻量级、高性能的Redis驱动程序</title>
        <published>2021-10-29T00:00:00+00:00</published>
        <updated>2021-10-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/yedis/"/>
        <id>https://wangzaixiang.github.io/blog/yedis/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/yedis/">&lt;p&gt;Redis是互联网应用中广泛使用的缓存解决方案，以其高性能、丰富的数据结构、简单易用的API而著称，基本上已经成为了互联网应用的基础设施，
其重要程度与MySQL、Nginx等足以相提并论。Jedis是最常用的Redis Java驱动程序，在我们的应用中也广泛使用Jedis驱动程序。&lt;&#x2F;p&gt;
&lt;p&gt;在使用Jedis的过程中，我们遇到了如下的问题：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Jedis 对 Redis Cluster 支持有局限，Slave实例不能提供读访问。诸如MySQL的Slave实例，一般用于承担一定的线上只读访问访问，
以降低对主库的访问压力，提高整个系统的吞吐能力。虽然Redis实例具有很高的访问性能，单实例可以提供10万量级的访问QPS，
但也是存在上限的。对电商、秒杀等业务场景，单实例的处理能力仍然会成为性能瓶颈，既然 Redis Cluster 支持 Master&#x2F;Slave 模式，
为什么不能充分应用 Redis Slave 来分担访问压力呢？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Jedis 使用连接池的模式，在实际应用中，就需要关注诸多的连接池参数，并尝试平衡：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;minIdle&lt;&#x2F;li&gt;
&lt;li&gt;maxTotal&lt;&#x2F;li&gt;
&lt;li&gt;maxIdle&lt;&#x2F;li&gt;
&lt;li&gt;testOnBorrow&lt;&#x2F;li&gt;
&lt;li&gt;testOnReturn&lt;&#x2F;li&gt;
&lt;li&gt;testWhileIdle&lt;&#x2F;li&gt;
&lt;li&gt;timeBetweenEvictionRunsMillis&lt;&#x2F;li&gt;
&lt;li&gt;numTestsPerEvictionRun&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;本文并不尝试介绍最佳的 Jedis 参数实践，这些参数的调优过程确实是一个挑战。当服务部署的实例增加到一定量级后，配置一个较大的连接池，
会导致单个redis服务实例需要支持一个很大的连接数。这些也给到DBA一定的心理压力。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Jedis 连接需要 testOnBorrow, 或者testOnReturn 等检测机制来检测连接状态是否正常，这种检测或者会导致额外的 RTT 时间，
从而降低了应用的访问速度(每次连接0.1ms级别)。或者采用 testWhileIdle 机制，这种机制避免了每次连接进行测试，
但无法保证连接检测的及时，有可能出现漏检的可能型。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 Redis Cluster 模式下，Redis服务并不支持 mget, mput 等批量操作。而业务上碰到这类场景时，或者采用串行模式逐个调用 get 操作，
或者使用线程池等方式，进行并发操作。无论哪一种方式都不够让人满意：串行的性能不佳，多线程的模式，由增加了业务服务的复杂性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;基于如上的痛点问题，我们决定自研一个匹配的驱动程序，我们称之为：Yedis，可以理解为 Yunji Redis Driver 或者
Yet another Redis Driver。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yedis-shi-yong-shuo-ming&quot;&gt;Yedis 使用说明&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;maven依赖&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;yunji.yedis.client&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;yedis&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.3.2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;基本API用法&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;初始化
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Yedis&lt;&#x2F;span&gt;&lt;span&gt; yedis = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Yedis&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;172.16.0.3:6379,172.16.0.3:6380&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;超时时间(单位:秒)
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;String
&lt;&#x2F;span&gt;&lt;span&gt;   yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_str&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; val = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_str&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Hash
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; map = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hgetAll&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hmget&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; str = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hget&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;List
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrange&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rpush&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;指定数据读取来源
&lt;&#x2F;span&gt;&lt;span&gt;   yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_str&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ReadModel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MASTER_SLAVE&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;ReadModel：MASTER、SLAVE、MASTER_SLAVE
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Pipeline
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Pipeline&lt;&#x2F;span&gt;&lt;span&gt; pip = yedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openPipeline&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   pip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;返回值：String
&lt;&#x2F;span&gt;&lt;span&gt;   pip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hvals&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;返回值：List
&lt;&#x2F;span&gt;&lt;span&gt;   pip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;数据类型不匹配，异常
&lt;&#x2F;span&gt;&lt;span&gt;   pip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zrangeWithScores&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key_zset&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;返回值：Tuple
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = pip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getResults&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; obj : list){
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(obj instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisException&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisException&lt;&#x2F;span&gt;&lt;span&gt; exception = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisException&lt;&#x2F;span&gt;&lt;span&gt;) obj;
&lt;&#x2F;span&gt;&lt;span&gt;           exception.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(obj);
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;JMX 监控
yedis提供监控信息方便查看当时运行状况，以及基本的统计信息:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;yedis_jmx.27a2445429253d4c.png&quot; &#x2F;&gt;
&lt;p&gt;监控中包含4个属性：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ChannelInfo：一个redis节点对应一个channel，监控中可以看到当前连接是否正常、当前连接创建时间、请求数(最近20s内)、平均响应时间(单位:ms)以及该Redis节点对应的连接总创建、关闭次数&lt;&#x2F;li&gt;
&lt;li&gt;QueueInfo:  记录Queue最后一次写入、消费时间、Queue中消息阻塞数(Queue的具体作用下文会提到)&lt;&#x2F;li&gt;
&lt;li&gt;UpdateNums: Reids集群发生变更次数&lt;&#x2F;li&gt;
&lt;li&gt;LastUpdateTime:  最后一次更新Redis状态时间&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ji-ben-jia-gou-tu&quot;&gt;基本架构图&lt;&#x2F;h2&gt;
&lt;p&gt;Yedis 采用了如下的设计思路：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;每个 Redis 节点只维护一个连接，所有的客户端线程均共享单个连接，发送命令。而不采用连接池。&lt;&#x2F;li&gt;
&lt;li&gt;基于 Netty，所有网络处理采用异步、非阻塞模式。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;采用单连接模式是否会有性能问题？&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;单连接并不意味着一次只能有一个客户端请求redis，其它的客户端必须等待这个请求返回后，才能发起下一个请求。相反，Yedis在单个TCP Socket之上，多个应用线程可以并行的使用这个Socket发送命令。这个是基于Redis的Pipeline特性。&lt;&#x2F;li&gt;
&lt;li&gt;大部分单个的Redis命令执行时间非常之快，一般在 10-50us 数量级上，相反，即使在局域网上，网络的 rtt 一般也会达到0.3ms - 1ms量级。也就是说，如果从单个命令的执行过程来看，只有5%-15%的时间是在真正的耗费在redis执行之上，其余时间其实是耗费在等待网络传输的过程之中。&lt;&#x2F;li&gt;
&lt;li&gt;通过使用Pipeline技术，无需等待上一个命令处理完毕，再发送下一个命令请求，而是客户端一个接一个的将命令发送给Redis服务器，Redis逐个进行处理，再逐个的进行返回，客户端在逐个的处理返回结果。这种方式，可以实现单个连接就可以替代原有连接池才能完成任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;那么单连接的模式是否会存在性能瓶颈呢？理论上确实有，在单个Socket上传输的最大速度 = windowSize &#x2F; rtt，在万兆局域网下，这个值一般在50M byte左右。考虑到单个客户端对redis的访问很少会达到如此高的场景，因此，单个TCP连接的数据传输瓶颈并不会成为实际的问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;wangzaixiang.github.io&amp;#x2F;processed_images&amp;#x2F;15722638104683.fd5cf1a8194d8491.jpg&quot; &#x2F;&gt;&lt;h3 id=&quot;ji-ben-liu-cheng-zheng-chang-ming-ling-chu-li&quot;&gt;基本流程：正常命令处理&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;首先，根据用户所传入的Key进行计算，得到该Key的所在Redis节点对应的Channel&lt;&#x2F;li&gt;
&lt;li&gt;对选中的Channel，同步的执行如下操作：
&lt;ol&gt;
&lt;li&gt;创建一个处理返回结果的 Future， 保存到 channel 对应的队列中（目前没有使用JDK8的Future API，原因是需要提供对JDK7的API兼容）&lt;&#x2F;li&gt;
&lt;li&gt;调用 Netty writeAndFlush 操作将命令发送给服务器。
这两个操作必须同步完成，确保 queue 中的Future顺序和发送顺序完全一致，这样在下一步处理返回结果&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt; request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; channel) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertChannelNotNull&lt;&#x2F;span&gt;&lt;span&gt;(channel);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; future = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SendCallback&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        ......
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span&gt;(channel) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertChannelIsActive&lt;&#x2F;span&gt;&lt;span&gt;(channel);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisHandler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(channel, future);
&lt;&#x2F;span&gt;&lt;span&gt;            channel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeAndFlush&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisInterruptedExceptionException&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitResponse&lt;&#x2F;span&gt;&lt;span&gt;(future);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Netty接收到Redis的返回结果后，从对应Queue中取出ResponseFuture，将结果设置到到ResponseFuture，然后唤醒客户端等待线程、将结果返回。&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;channelRead&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ChannelHandlerContext&lt;&#x2F;span&gt;&lt;span&gt; ctx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; msg) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt; response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setContent&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RedisMessage&lt;&#x2F;span&gt;&lt;span&gt;) msg);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span&gt;(response) {
&lt;&#x2F;span&gt;&lt;span&gt;        response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在上述的代码中虽然有 synchronized 代码块，但是，在代码块内没有阻塞性的操作，因此，其对并发的性能影响是非常微小的。当然例外也是存在的：我们会控制单个queue的排队数量，目前缺省是200，相当于最多可以有200个处理中的命令，对应于Jedis的话，相当于最多200个连接池。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-ben-liu-cheng-lu-you-chu-li&quot;&gt;基本流程：路由处理&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;先对Key进行CRC16、对16384进行取模，得到该Key对应的slot&lt;&#x2F;li&gt;
&lt;li&gt;yedis内存中维护了一个长度为16384的slots数组，slots数组存储了Partion引用，Partion与Redis节点一一对应、同时也保存了Redis的主从关系。通过第1步的slot + ReadModel可以获得对应的Partion，进而获取对应的Redis节点Host&lt;&#x2F;li&gt;
&lt;li&gt;yedis在初始化的时候，会为每个Reids节点创建一个channel连接，同时将channel缓存到本地Map，使用host作为key。通过第2步获取到的host便可从channel map中获取对应的channel，然后进行数据的发送了,&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ji-ben-liu-cheng-wang-luo-yi-chang-chu-li&quot;&gt;基本流程：网络异常处理&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;服务器异常关闭连接
yedis网络通信采用netty，与Redis保持长连接，一旦某个Redis节点连接被关闭，客户端能迅速检测到并且移除该Channel缓存信息，使得发往该Reids节点的请求在客户端便快速失败，不会因此堵塞；同时后台线程会异步的尝试重新创建到该Reids节点的Channel连接。&lt;&#x2F;li&gt;
&lt;li&gt;集群发生变化
yedis启动的时候，后台会启动一个异步线程，每5s检测Reids集群是否发生变化，例如：主节点down机、主从发生切换、新增&#x2F;缩减Redis节点等，yedis会重新执行一次初始化操作，期间所有读写操作均暂停，直至Redis信息同步完成&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ji-ben-liu-cheng-xin-tiao-jian-cha&quot;&gt;基本流程：心跳检查&lt;&#x2F;h3&gt;
&lt;p&gt;yedis后台有一个异步线程，每10s向服务端发送一个PING命令然后带上当前时间戳，然后我们检测Reids服务的返回内容是否与我们发送的时间戳一致，如果不一致，那就说明消息在Queue中发生了错位，我们会立即关闭该channel，然后立即重新创建一个新的连接&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pipeline-chu-li-liu-cheng&quot;&gt;Pipeline 处理流程&lt;&#x2F;h3&gt;
&lt;p&gt;yedis的数据发送、接收模式非常友好的支持Pipeline，是全局的Pipeline，而非针对某个Redis节点的。具体使用方式，可参考API基本用法。Pipeline处理流程十分简单，和普通命令唯一的区别就是同步和异步等待结果，Pipeline模式下，命令均返回ResponseFuture，在命令全部发送完成后，再统一等待结果。这样，Redis命令可以不停的发送到Redis服务端，而不必等待上一条命了处理完，再处理下一条，大大提升效率！
基于 Yedis 的单连接、异步处理框架，Pipeline的实现逻辑非常简单：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt; request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; channel) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertChannelNotNull&lt;&#x2F;span&gt;&lt;span&gt;(channel);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; future = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ResponseFuture&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SendCallback&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            ......
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span&gt;(channel) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertChannelIsActive&lt;&#x2F;span&gt;&lt;span&gt;(channel);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisHandler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(channel, future, timeout)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;put msg to blockingqueue timeout %s seconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeout));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                channel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeAndFlush&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YedisInterruptedExceptionException&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; future;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;yedis-xing-neng-ce-shi-shu-ju&quot;&gt;Yedis 性能测试数据&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;序号&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;线程数&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;测试数据大小(byte)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;queue size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;主&#x2F;从&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;总请求数&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;成功数&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;失败数&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;QPS&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;YGC&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;FGC&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;64878&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;76591&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;64&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;82486&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;128&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;88704&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;81655&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;55200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;63713&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;64&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;68154&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;128&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;74609&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;256&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;200&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;M&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;320万&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;71428&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;qi-ta-jing-yan-zong-jie&quot;&gt;其它经验总结&lt;&#x2F;h2&gt;
&lt;p&gt;在Yedis开发中，我们非常关注代码的性能，尽可能提供一个足够高效的驱动程序，这里简单的补充说明一下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;直接在 ByteBuf（一般的，是HeapOff的ByteBuf，可以提供更高的数据读写、分配性能）中搜索CR、LF等分隔符，实际测试表明：使用 ByteBuf.forEachByte 迭代相比手写的 for循环遍历，具有10-20%的性能提升。&lt;&#x2F;li&gt;
&lt;li&gt;最小化内存分配，减少GC负担。Yedis针对网络通信，尽量避免创建额外的对象。我们为每个Channel准备了一个缺省1024的buffer，除非单个redis响应字符串超过1024，否则无需额外的内存分配。这对于大量以较小的key，value为主的Redis应用来说，可以最小化对象分分配。&lt;&#x2F;li&gt;
&lt;li&gt;使用 immutable 的数据结构，简化并发情况下的线程安全。Yedis中涉及到大量的并发操作，这些并发操作会涉及到复杂的数据同步。同步操作是并发的万恶之源，为了简化并发处理，提高系统的鲁棒性，Yedis在存储共享的数据结构时，尽量采用 immutable 的数据结构，这个可以参考：&lt;code&gt;ClusterInfo&lt;&#x2F;code&gt;、&lt;code&gt;Node&lt;&#x2F;code&gt;、&lt;code&gt;Partion&lt;&#x2F;code&gt;等数据结构。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>应用函数式编程</title>
        <published>2021-07-10T00:00:00+00:00</published>
        <updated>2021-07-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/applied-function-progamming/"/>
        <id>https://wangzaixiang.github.io/blog/applied-function-progamming/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/applied-function-progamming/">&lt;h1 id=&quot;ying-yong-han-shu-shi-bian-cheng&quot;&gt;应用函数式编程&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;1-1-tu-ling-ji-feng-nuo-yi-man-ti-xi-yu-ming-ling-shi-bian-cheng&quot;&gt;1.1 图灵机、冯.诺伊曼体系 与 命令式编程&lt;&#x2F;h2&gt;
&lt;p&gt;现在大部分的程序员，接受的是“面向对象”的编程方法，基本的几板斧包括：继承、覆盖（重写）、设计模式等。缺乏对比，就很容易坐井观天，容易以为这种方式就是“唯一”的选择。&lt;&#x2F;p&gt;
&lt;p&gt;其实，从语言抽象的角度来看，从面向机器的汇编语言，到以Ｃ、Pascal为代表的结构化编程语言、再到C++、Java等OOP语言，他们的本质都是“图灵机”模型，程序 =
控制流 + 共享内存。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;applied-function-progamming&#x2F;15735640009763.png&quot; alt=&quot;图灵机&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过移动纸带依次执行下一行代码，代码可能是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;从内存中读取某个数据&lt;&#x2F;li&gt;
&lt;li&gt;进行某种计算（或逻辑比较）&lt;&#x2F;li&gt;
&lt;li&gt;将计算结果写入到某个内存&lt;&#x2F;li&gt;
&lt;li&gt;顺序执行下一条指令，或者跳转到某个指定的位置。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个编程模型由于最为贴近目前的计算机体系架构（冯诺伊曼架构），因此是一种很自然的进化，具有最高的执行效率。但是，这种模型对”人类“并不是友好的：我们更喜欢一种顺序前进的思维模型：第一步，第二步，......直到完成任务。在这个过程中，如果不断的进行跳跃，兜转，最终就会形成一团乱麻，一座迷宫，让开发者无法理清思路。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;控制流程的复杂性，会让我们陷入到一个不断前进、后退的怪圈之中，很容易就会让我们迷失，忘记了过去，找不到未来。&lt;&#x2F;li&gt;
&lt;li&gt;数据流程的复杂性。某一行代码，都需要读写某个内存数据，这些依赖的数据，其来龙去脉如何？目前的状态是否正确？与其他的数据是否一致？如果已经出现错误，或者不一致的情况，后续的处理就会蔓延这个错误，导致更大的错误产生。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;控制流的复杂性和数据流的复杂性是相互纠缠的：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;复杂的控制流，会让数据流变得更复杂、更难以证明其正确性。某个数据的当前状态依赖于之前的执行流程，复杂的控制流，就意味着这个数据过去的读、写生命周期非常复杂。&lt;&#x2F;li&gt;
&lt;li&gt;复杂的数据流，会反向作用于控制流，影响其程序流程。一个简单的例子是，某段代码本身逻辑没有问题，如果他的输入是一个错误的，或者自相矛盾的，则一定会产生错误的结果，甚至会让这个错误加以放大。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;控制流，可以通过消除goto，从一团乱麻式的逻辑演进成为“结构化”的模式，主要的措施包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;引入“函数、过程”，提供一种基础化的子部件，通过过程调用的方式，支持高粒度的逻辑组合。在宏观层面消除 goto&lt;&#x2F;li&gt;
&lt;li&gt;使用三种控制流程：
&lt;ol&gt;
&lt;li&gt;顺序代码块&lt;&#x2F;li&gt;
&lt;li&gt;分支代码块，也就是高级语言中的 if else, switch 等语法&lt;&#x2F;li&gt;
&lt;li&gt;循环代码块。也就是高级语言中的 for, while 等语法&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;结合上述元素，就可以完全编写出没有 goto
的代码来。其实，正如“结构化编程“的名称所示，我们并没有消除掉控制流的异常跳转，只是换了一种更加有序的模式，让代码块变得更为”结构“，接近人的思维习惯。结构化编程是对控制流程的一次抽象，把编程从无限自由的goto中，加以抽象，使用
&lt;code&gt;子过程&lt;&#x2F;code&gt;、&lt;code&gt;顺序块&lt;&#x2F;code&gt;、&lt;code&gt;分支块&lt;&#x2F;code&gt;、&lt;code&gt;循环块&lt;&#x2F;code&gt;这几个基本的结构就可以实现同样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;结构化编程诞生了新的高级语言，如 C、Pascal、Ada 等，随后，随着代码规模的飞速上升，&lt;code&gt;过程&lt;&#x2F;code&gt;
的数量逐步成为一个巨大的数字，传统的代码组织模式一般按照“模块”的方式，将一组相关联的&lt;code&gt;过程&lt;&#x2F;code&gt;放到同一个模块中，例如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;一个实现 Link List 数据结构的&lt;code&gt;module&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;一个实现 Quick Sort 排序算法的&lt;code&gt;module&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;一个实现某个 User Story 的&lt;code&gt;module&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;随着&lt;code&gt;module&lt;&#x2F;code&gt;的进一步复杂化，我们引入了 &lt;code&gt;object oriented&lt;&#x2F;code&gt;, 以数据结构为中心，将 数据结构（&lt;code&gt;object&lt;&#x2F;code&gt;)和操作数据结构的过程（
&lt;code&gt;method&lt;&#x2F;code&gt;) 组合到一起，形成了&lt;code&gt;class&lt;&#x2F;code&gt;，于是诞生了&lt;code&gt;面向对象编程&lt;&#x2F;code&gt;，除了 &lt;code&gt;object&lt;&#x2F;code&gt; 之外，我们还使用了 &lt;code&gt;package&lt;&#x2F;code&gt;(或者说
&lt;code&gt;namespace&lt;&#x2F;code&gt;)、&lt;code&gt;module&lt;&#x2F;code&gt; 等更高层次的组合，以提供更好的结构化组织能力。这类语言，包括 smalltalk、c++、Java、C#等。&lt;&#x2F;p&gt;
&lt;p&gt;上面的语言进化史，其实是一个对控制流程进行不断抽象，从而形成更贴近人的表达方式。但有一点不变的是，这个进化史有一个不变的“根隐喻”，即计算是一个图灵机模型，
&lt;code&gt;程序 = 控制流 + 共享内存&lt;&#x2F;code&gt;，无论是汇编语言、结构化语言、面向对象语言，本质上都是一个图灵计算模型，这类的语言，我们也称之为“命令式语言”。&lt;&#x2F;p&gt;
&lt;p&gt;大家可以再翻翻《三体》，这本书其实也算是一本通俗的计算机入门书籍，第十八章《牛顿、冯.诺伊曼、秦始皇、三日连珠》中，为了解决三体的运转规律，准确预测出三体连珠的时间，牛顿发现了物理学三定律，解决了从上到天体运动、下到细胞分裂的一切规律，只是这里的计算量太过庞大，一大堆微积分方程需要求解。这个时候，冯.诺伊曼发明了计算模型，还只是理论，冯.诺伊曼并没有发明计算机，于是，他们找到了东方的君主：秦始皇，由秦始皇来负责制造这台复杂的计算机。冯调动了秦始皇的3000万士兵，把3000万士兵排兵布阵，并明确每一个士兵的职责，其实也是非常之简单：承担与门、或门、非门三者之一的职责，任何一名士兵只需要一小时的训练就可以掌握。最后，这台“秦1号”
计算机就构建成功（秦1号的CPU，由3000万的门电路组成，大约有1.2亿晶体管，其规模相当于 2005年Intel的第一代奔腾D双核处理器2.3亿晶体管
中的单核规模，其实是非常只领先的了）。这台计算机耗时16个月，完成了三体连珠的计算。当然，这个漂亮的案例中，如果再补充上图灵和Ada，我觉得会更完美一些，因为是图灵创造了计算模型，冯诺伊曼则根据这个计算模型设计了CPU和系统架构，而Ada，则是第一个程序员，由她设计出整个计算程序，命令着这台庞大的计算机，完成一个具体命题的计算。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在金字塔的中部，一排旗手用旗语发出指令，一时间，下面大地上三千万人构成的巨型主板仿佛液化了，充满了细密的粼粼波光，那是几千万面小旗在挥动。在靠近金字塔底部的显示阵列中，一条由无数面绿色大旗构成的进度条在延伸着，标示着自检的进度。十分钟后，进度条走到了头。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“自检完成！引导程序运行！操作系统加载！！”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;下面，贯穿人列计算机的系统总线上的轻骑兵快速运动起来，总线立刻变成了一条湍急的河流，这河流沿途又分成无数条细小的支流，渗入到各个模块阵列之中。很快，黑白旗的涟漪演化成汹涌的浪潮，激荡在整块主板上。中央的CPU区激荡最为剧烈，像一片燃烧的火药。突然，仿佛火药燃尽，CPU区的扰动渐渐平静下来，最后竟完全静止了；以它为圆心，这静止向各个方向飞快扩散开来，像快速封冻的海面，最后整块主板大部分静止了，其间只有一些零星的死循环在以不变的节奏没有生气地闪动着，显示阵列中出现了闪动的红色。&lt;&#x2F;p&gt;
&lt;p&gt;刘慈欣. 三体全集&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-2-lyan-suan-yu-han-shu-shi-bian-cheng&quot;&gt;1.2 λ演算 与 函数式编程&lt;&#x2F;h2&gt;
&lt;p&gt;花开两朵，各表一枝。除了图灵计算，还有一个计算模型，就是 λ计算。 lambda演算是Alonzo
Church在1930年建立的（其相比图灵机理论的创建时间早6年，Church也是Turing的老师）。lambda 计算的核心非常简单：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;E = x       -- 变量 x
&lt;&#x2F;span&gt;&lt;span&gt;    | λx.E -- 定义一个函数，接收变量x，返回值为 E
&lt;&#x2F;span&gt;&lt;span&gt;    | (E1 E2) -- 调用函数 E1(E2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有论文证明：图灵演算 和 λ演算都是计算完备的语言，二者在功能上是等价的。Lisp 语言是最早的基于 λ演算 的高级语言。现在的各种编程语言中，都会引入
lambda 这个概念，其源头都出自 lambda 演算这一理论。&lt;&#x2F;p&gt;
&lt;p&gt;上述的核心模型是如此简单，但却是FP的核心原理，其作用犹如牛顿三定律之于经典物理，如五大公理之于欧几里得几何。或者可以理解为
FP 编程的CPU和汇编语言：所有的函数式代码，最终都可以表达为如上的三种基本元素。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-han-shu-shi-bian-cheng-de-ji-ben-yuan-ze&quot;&gt;2. 函数式编程的基本原则&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2-1-wu-fu-zuo-yong-chun-han-shu&quot;&gt;2.1 无副作用纯函数&lt;&#x2F;h2&gt;
&lt;p&gt;所谓纯函数，就是接收输入，计算并返回结果。除此之外，不产生其它效果。（通俗的说，除了返回结果，以及CPU发热之外，不要做其他的事情），包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;任何赋值操作，会改变现有内存状态（除非首次赋值，在函数式语言中，首次赋值被称为 变量绑定）&lt;&#x2F;li&gt;
&lt;li&gt;更改全局变量。在Java中，这包括：static变量，对象的实例变量（包括修改参数对象中的字段）等。&lt;&#x2F;li&gt;
&lt;li&gt;任何 IO 操作。包括键盘输入、屏幕输出、文件读写、记录日志、读写Socket等。&lt;&#x2F;li&gt;
&lt;li&gt;任何数据库操作。当然，数据库操作也是IO。&lt;&#x2F;li&gt;
&lt;li&gt;当然，也包括发送短信、发送邮件等等，这些也是通过 IO 来引起的。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;除此之外，纯函数还具备“引用透明性”，即对相同的输入参数，总是应该返回相同的计算结果，因此，诸如
currentTimeMillis、UUID、random等，都不是“纯函数”。&lt;&#x2F;p&gt;
&lt;p&gt;放到实际业务之中，这个约束其实有些“苛刻”，我们很难做到。我们可以根据实际情况，酌情放松一下，例如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;诸如“日志输出“这样的IO，可以视为“轻微无害的副作用”。&lt;&#x2F;li&gt;
&lt;li&gt;在事务类服务处理中，读取数据库中的当前状态，可以视为“无害的IO操作&quot;，或者当作类似于读取函数上下文中的全局变量操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;感觉上，如果没有IO，没有数据库操作，那我们的代码还能干什么呢？创建订单的服务，本质上不就是需要生成一个新的订单吗？这个疑问，我们会在
&lt;code&gt;2.5 管理副作用&lt;&#x2F;code&gt; 中进行说明。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-2-bu-ke-bian-shu-ju&quot;&gt;2.2 不可变数据&lt;&#x2F;h2&gt;
&lt;p&gt;与命令式语言基于”共享内存“的模型不同，函数式编程中强调数据的不可变性：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在函数中不要使用可变变量（variable）。用 Java 语言为例，所有的函数局部变量都应该使用 final 修饰，只能初始化赋值一次，不能进行二次赋值。（这里，沿用了
variable 这个名称，只是沿用而已，其含义完全不同）&lt;&#x2F;li&gt;
&lt;li&gt;不要创建 mutable 的对象。所有的对象都应该是 immutable 的。一经实例化，其内部字段终生不变，直到对象销毁。用 Java
语言为例，所有的实例变量都应该使用 final 修饰，只能在构造方法中进行初始化。这样的类型，在Java中少之又少，我们所熟知的就是
String 类型。&lt;&#x2F;li&gt;
&lt;li&gt;不要使用 mutable 的集合。所有的集合，都必须在实例化的时候，唯一确定其中的元素。一经创建，便不可增加、替换或删除元素。如果需要变更的话，只能基于现有的集合，创建一个新的副本。这一点在
Java 中比较尴尬，java.util.collection 中根本就没有这样的集合类型。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;局部变量不可变，实例变量不可变（当然，静态变量也不可变）、集合不可变，这个也是颠覆Java程序员三观的约束，在此规则下，还能干什么呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-3-shi-yong-biao-da-shi-expression-er-fei-yu-ju-statement&quot;&gt;2.3 使用表达式(expression)而非语句(statement)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;1 + 2 * 3&lt;&#x2F;code&gt; 是一个表达式，其反应了一个计算过程，并代表着一个最终的值。而 &lt;code&gt;if(flag) a = 1 else a = 0&lt;&#x2F;code&gt;
是一个语句，它没有返回值（虽然部分语言也可能给它赋予了一个返回值），而是执行了一次赋值操作，产生了副作用。&lt;&#x2F;p&gt;
&lt;p&gt;在 Java 中， if-else，for, while, switch, try-catch 都是 statement，因此，这一点我们只能将就。（Java14中 switch 将支持作为
expression 使用，但奇怪的是，其它操作还是不支持 expression，总是学一点不学完全）。我们可以使用 &lt;code&gt;?:&lt;&#x2F;code&gt; 三木运算符来替代
if-else，不过也有很多局限。这一点，我们就只能将就了。&lt;&#x2F;p&gt;
&lt;p&gt;而在 Kotlin，scala 等时髦的编程语言里，if-else, switch, try-catch, for 都可以作为 expression 来使用，如果你选择这样的语言，你就可以选择
expression，而避免使用 statement 了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 statement，则不可避免的会用到赋值操作，这一类的副作用就没法避免的了。在这种场景下，我们可以约束：只容许对方法的局部变量进行赋值，而不要对对象字段（实例变量或静态变量）进行赋值。这相当于把
”副作用“局限在方法内部。&lt;&#x2F;p&gt;
&lt;p&gt;而在Kotlin，Scala这类支持完整 expression 的语言中，我们可以指定严格的标准，杜绝赋值语言这一类副作用的出现。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-4-jian-dan-hua-liu-cheng&quot;&gt;2.4 简单化流程&lt;&#x2F;h2&gt;
&lt;p&gt;结构化编程，引入了 if-else, switch 等分支流程，for&#x2F;while等循环流程，实际业务中，这类的流程还是会带来一定的复杂性，尤其是多层嵌套的情况下。正如
λ演算 的理论模型中，FP 只需要函数的调用，而无需分支和循环流程的。&lt;&#x2F;p&gt;
&lt;p&gt;这里的约定针对 kotlin, scala等支持 expression 的语言，对于 Java, 需要酌情参考：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;使用 if-else, for, switch 等expression, 而不是 statement。（思考题：if-else expression就不是分支了吗？）&lt;&#x2F;li&gt;
&lt;li&gt;避免使用 continue, break 等破坏正常流程。&lt;&#x2F;li&gt;
&lt;li&gt;避免使用 return ，正常的话，函数应该在最末一行产生返回值。&lt;&#x2F;li&gt;
&lt;li&gt;避免 null 值。
&lt;ol&gt;
&lt;li&gt;如果某个变量的值可能为 null，则改变为 Option[T]，并使用 None 替代 null。&lt;&#x2F;li&gt;
&lt;li&gt;如果某个方法，可能会返回 null，调整为返回 Option[T]&lt;&#x2F;li&gt;
&lt;li&gt;如果某个字段的值可能会为 null，调整为 Option[T]&lt;&#x2F;li&gt;
&lt;li&gt;使用 filter, map 等操作处理 Option，可以避免 if&#x2F;else 的使用。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;也有的文章建议，避免使用 Exception，而使用 Try[T] 来替代，不过，我个人并不倾向于此，在我看来， Excpetion 本身也是一个
Monod，自然具有 Try[T] 的特性，而且可读性更高。&lt;&#x2F;p&gt;
&lt;p&gt;一个常见的挑战是，不使用可变变量，不使用循环，那么如何处理传统需要迭代的场景呢？在FP中，递归调用就是FP的循环解决方案，可以参考&lt;a href=&quot;https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;e456c27a4366&quot;&gt;从示例逐渐理解Scala尾递归&lt;&#x2F;a&gt;
一文。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-5-jian-dan-shu-ju-liu&quot;&gt;2.5 简单数据流&lt;&#x2F;h2&gt;
&lt;p&gt;应用函数式编程，带来的一个本质的改变就是：简单的数据流：请求参数留经一个函数，而产出一个新的数据，新的数据继续流动，经过新的计算过程，产生出新的数据，直到达成最终的结果。区别于命令式编程，这个流动总是产生新的数据，而不会修改任何已经存在的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-5-1-pipeline&quot;&gt;2.5.1 pipeline&lt;&#x2F;h3&gt;
&lt;p&gt;对 shell 用户来说，pipeline 是最为熟悉的，譬如如下的bash脚本，是统计nginx访问日志中访问量最大的前10名IP，及其访问次数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; access.log | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gawk&lt;&#x2F;span&gt;&lt;span&gt; ‘{print $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}’ | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniq -c &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort -rn &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tail -10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以这么来理解一个 pipeline：每个step相当于一个函数，接收上一个 step 的输出，处理完成后，形成新的计算结果，再输出到下一个
Step。Step之间收尾相连，数据依次从Step1、Step2、直到最后。这其实相当于一系列的函数组合调用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-5-2-dan-xiang-wu-huan-shu-ju-liu-dag&quot;&gt;2.5.2 单向无环数据流 DAG&lt;&#x2F;h3&gt;
&lt;p&gt;pipeline 是一种最简单、最清晰的数据流，没有分支，没有合并，但实际场景下，数据流向还是会更复杂一些。有如河流入海，有主干河道，也有众多分支的河道，最后主干、支流汇聚成江，东奔大海。&lt;&#x2F;p&gt;
&lt;p&gt;与命令式语言不通，FP下的数据流必须是单向无环路的，一个函数不能依赖这个函数执行之后产生的数据。这样的数据流，最终会形成一个
DAG。数据一旦形成回路，带来的复杂性，包括：难以理解，难以推理。&lt;&#x2F;p&gt;
&lt;p&gt;当然，会有一些其它的模式，让整个数据流变得更加简单一些，例如：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;层次化。 对复杂的数据流进行层次划分。&lt;&#x2F;li&gt;
&lt;li&gt;模块化。将DAG的部分节点进行聚合，简化节点。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个过程需要结合业务，形成经验。后续可以整理成为参考的“模式”。但总的而言，我们的目标是让 DAG 变得更加简单，更易于理解，更方便推理验证。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-6-ge-chi-fu-zuo-yong&quot;&gt;2.6 隔离副作用&lt;&#x2F;h2&gt;
&lt;p&gt;纯函数只返回计算结果，但我们的最终目的都是要“改变世界”：或者更新银行账户的余额，或者发送一个电子邮件通知，或者在屏幕上显示一个报表，这些都是FP意义上的“effect”，在函数结束之后依然存在的影响。现实的程序最终依然会产生
effect，并且以产生最终的 、正确的 effect 为终极目标。&lt;&#x2F;p&gt;
&lt;p&gt;FP
的目的不是没有effect，不是消除effect，而是隔离effect，将程序中的逻辑计算和结果落地进行分离，让逻辑计算更为纯粹，带来更强的组合能力，更清晰的数据流，让逻辑可以自我证明。隔离之后的副作用操作，就是“解释”逻辑计算的结果，完成落地过程，因而更为内聚（而不是分散在处理的四处）、更为简单。&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;overview&#x2F;overview_background&quot;&gt;函数式计算中的副作用&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-6-1-ji-suan-jie-shi-mo-xing&quot;&gt;2.6.1 计算-解释模型&lt;&#x2F;h3&gt;
&lt;p&gt;计算-解释模型是最简单的副作用隔离，其基本逻辑如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala 3&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala 3 &quot;&gt;&lt;code class=&quot;language-scala 3&quot; data-lang=&quot;scala 3&quot;&gt;&lt;span&gt;def service(request: Request): Response = {
&lt;&#x2F;span&gt;&lt;span&gt;    def logic(): ActionModel = {
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ...... pure function code which return an ActionModel
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    def interpret(actionModel: ActionModel): Unit = {
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ......  execute the actions such as insert an entity, send an email, etc.
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    logic() -&amp;gt; interpret()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;考虑到 &lt;code&gt;logic()&lt;&#x2F;code&gt; 中依赖着对数据库等的一些依赖（存在着某种 Input 的操作），因此，也可以调整为 &lt;code&gt;准备-计算-解释模型&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InitialModel &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ......  read only operation, fetch required information into InitialModel
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;logic&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ActionModel &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...... &#x2F;&#x2F; pure function code which return an ActionModel
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actionModel&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ActionModel&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Unit &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...... &#x2F;&#x2F; execute the actions such as insert an entity, send an email, etc.
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fetch() -&amp;gt; logic() -&amp;gt; interpret()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对事务类服务而言，查询类服务和大部分的单事务类服务，都可以简化为 &lt;code&gt;计算-解释模型&lt;&#x2F;code&gt;，这种抽象会带来如下的好处：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;将副作用提取、聚合到一个解释函数中，取代分散在业务逻辑的方式，服务的目的性非常明确，易于理解代码。&lt;&#x2F;li&gt;
&lt;li&gt;隔离副作用后的业务逻辑，成为一个纯函数，可以更好的实现代码的复用，更便于进行单元测试。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在有的事务类处理中，会有锁定资源的需求，如扣减账户余额，此时，我们可以在 fetch
阶段，对需要锁定的资源施加锁定操作。这里，我们把“lock&quot; 这样的操作，也视为一种“低危害副作用”，因为其本质上不修改数据，容易回退。&lt;&#x2F;p&gt;
&lt;p&gt;开发约定：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;区分计算与副作用，业务逻辑应该集中在&lt;code&gt;计算&lt;&#x2F;code&gt;之中，保持&lt;code&gt;解释&lt;&#x2F;code&gt;的简单性。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;保持计算是纯函数的，具备引用透明性。&lt;&#x2F;li&gt;
&lt;li&gt;避免在解释中包括业务逻辑，只解释执行计算的结果，完成数据落地。如：
&lt;ul&gt;
&lt;li&gt;避免在解释阶段依赖 &lt;code&gt;insert&lt;&#x2F;code&gt; 操作返回的自增 ID，替代方案是：通过全局的 id 服务获取id，在 insert 语句中显示赋值。&lt;&#x2F;li&gt;
&lt;li&gt;避免在解释阶段依赖 &lt;code&gt;update&lt;&#x2F;code&gt; 语句是否会命中数据，替代方案是：在 fetch 阶段检查数据是否存在。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;命名约定&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;对有副作用的方法，使用 &lt;code&gt;doXXX&lt;&#x2F;code&gt; 命名。&lt;&#x2F;li&gt;
&lt;li&gt;混合方法（即串联起计算 和 解释的方法），应作为服务的最外层方法（复杂的方法，可以放宽到第二层的方法），混合方法使用
&lt;code&gt;@effect&lt;&#x2F;code&gt;进行标识。&lt;&#x2F;li&gt;
&lt;li&gt;在混合方法中，使用&lt;code&gt;DoEffects!&lt;&#x2F;code&gt;进行代码集中标识有副作用的代码块，示例如下：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;scala 3&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala 3 &quot;&gt;&lt;code class=&quot;language-scala 3&quot; data-lang=&quot;scala 3&quot;&gt;&lt;span&gt;    def service() = 
&lt;&#x2F;span&gt;&lt;span&gt;        calculation_1 &#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        DoEffects_! {   
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; ... ...  在 DoEffects! 代码块中进行副作用处理，如发送邮件，修改数据库。
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        calculation_2 &#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        DoEffects_! { 
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; ... ...  在 DoEffects! 代码块中进行副作用处理，如发送邮件，修改数据库。 
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;2-6-2-duo-jie-duan-di-jin-mo-xing&quot;&gt;2.6.2  多阶段递进模型&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;scala 3&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala 3 &quot;&gt;&lt;code class=&quot;language-scala 3&quot; data-lang=&quot;scala 3&quot;&gt;&lt;span&gt;def service(request: Request): Response = {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; phase1
&lt;&#x2F;span&gt;&lt;span&gt;    phase1Fetch() -&amp;gt; phase1Logic() -&amp;gt; phase1Interpret()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    phase2Fetch() -&amp;gt; phase2Logic() -&amp;gt; phase2Interpret() &#x2F;&#x2F; based on phase1’s result
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    phase3Fetch() -&amp;gt; phase3Logic() -&amp;gt; phase3Interpret() &#x2F;&#x2F; based on phase1 &amp;amp; phase2’s result
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果&lt;code&gt;阶段N&lt;&#x2F;code&gt;的处理需要依赖&lt;code&gt;阶段N-1&lt;&#x2F;code&gt;或者更早之前的副作用处理结果，那么，我们将无法完全的遵守&lt;code&gt;计算-解释&lt;&#x2F;code&gt;
模型，那么，此时，我们可以遵守约定，让代码的可读性变得更强：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将副作用处理集中到服务的顶层主流程代码中&lt;&#x2F;strong&gt;。避免将副作用代码分散，尤其是下沉到很低层的业务代码之中，会让服务的主逻辑变得不明晰，增加复杂度。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;使用 doXXXX 或者 DOEffects! 约定&lt;&#x2F;strong&gt;。让副作用代码阅读起来更为明显。&lt;&#x2F;li&gt;
&lt;li&gt;由于执行副作用本身会带来更多的异常情况，因此，在主流程中集中处理异常，会让异常更为清晰。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在数据库事务类应用中，除非多阶段的处理需要在多个事务中完成（如因为领域隔离原因），否则我们应尽可能使用&lt;code&gt;计算-解释模型&lt;&#x2F;code&gt;
，在计算阶段尽可能的确定逻辑，而不要过于依赖“副作用执行”时的结果。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-6-3-tcc-mo-xing&quot;&gt;2.6.3 TCC 模型&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;计算-解释模型&lt;&#x2F;code&gt; 非常适合于单事务类的处理，但对于多事务，或者说分布式事务的场景时，会有些力不从心。譬如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp_a &lt;&#x2F;span&gt;&lt;span&gt;= service_a(req_a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(resp_a) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp_b &lt;&#x2F;span&gt;&lt;span&gt;= service(req_b)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;需要根据第一个事务处理的结果，来决定第二个事务的执行情况，在执行事务二之前，必须要先提交事务一的执行结果，即执行事务一的副作用。&lt;&#x2F;p&gt;
&lt;p&gt;使用 TCC 模型时：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Try&lt;&#x2F;code&gt; 处理负责锁定服务所需的最少资源，这个操作存在副作用，但提供了一种可逆的方式。因而可视为&lt;em&gt;无害的副作用&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Confirm&lt;&#x2F;code&gt; 由主流程裁决，在决定提交事务时，再依次调用多个子操作的 &lt;code&gt;confirm&lt;&#x2F;code&gt;， 这一步相当于&lt;em&gt;执行副作用&lt;&#x2F;em&gt;的操作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Cancel&lt;&#x2F;code&gt;由主流程裁决，在决定事务回滚时，再依次调用多个字操作的&lt;code&gt;cancel&lt;&#x2F;code&gt;，这一步相当于&lt;em&gt;执行回滚副作用&lt;&#x2F;em&gt;的操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;通过TCC模型的使用，我们可以以一种接近于&lt;em&gt;隔离副作用&lt;&#x2F;em&gt;的效果的方式，来实现复杂场景下的逻辑隔离。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;3-fp-wu-chu-bu-zai&quot;&gt;3. FP 无处不在&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Linux Shell &amp;amp; FP&lt;&#x2F;p&gt;
&lt;p&gt;正如上文中的 pipeline 示例， pipeline 构建了 Shell 的强大之处，也可以作为 FP 成功的一个典型案例：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;每个Linux命令，都聚焦于解决单个问题。这相当于编写更具内聚的函数。&lt;&#x2F;li&gt;
&lt;li&gt;Shell 使用简单的文本行 &lt;code&gt;Line&lt;&#x2F;code&gt; 作为标准的数据格式，作为管道交换的数据标准。这个简单的策略让所有的命令都可以串联起来，完成互操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这也给我们很多良好的 FP 编程启示：
3. 函数设计应遵守&lt;code&gt;Single Responsibility Principle&lt;&#x2F;code&gt;，内聚性越强的函数、功能越单一的函数，不仅实现成本更低，其可组合能力也更强。
4. 基于标准化的数据结构。便于函数间的互相组合。如果在每次函数组合时，都需要进行数据的转换，这样代码的自由度就会大打折扣。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SQL &amp;amp; FP&lt;&#x2F;p&gt;
&lt;p&gt;我们最为熟悉的SQL，其实也算是一种 FP 的思想，也被称之为 &lt;code&gt;Declarative Programming&lt;&#x2F;code&gt;（声明式编程），其实这也是 FP
的特征。如果说命令式语言关注于&lt;code&gt;how to do&lt;&#x2F;code&gt;，那么FP 则关注于 &lt;code&gt;what to do&lt;&#x2F;code&gt;，对比一下如下的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;csharp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-csharp &quot;&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;    int[] array = { 1, 5, 2, 10, 7 };
&lt;&#x2F;span&gt;&lt;span&gt;    var results = from x in array
&lt;&#x2F;span&gt;&lt;span&gt;        where x % 2 == 1  
&lt;&#x2F;span&gt;&lt;span&gt;        orderby x descending   
&lt;&#x2F;span&gt;&lt;span&gt;        select x * x;        
&lt;&#x2F;span&gt;&lt;span&gt;    foreach (var result in results)     {      
&lt;&#x2F;span&gt;&lt;span&gt;         Console.WriteLine(result);   
&lt;&#x2F;span&gt;&lt;span&gt;    } 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的代码是支持 LINQ 语法的C#，在scala中，也可以使用如下的方式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span&gt;= Array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;results &lt;&#x2F;span&gt;&lt;span&gt;= array.filter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .sortedBy ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .map( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; x * x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果使用 Java 来编写，会长什么样子呢？大家可以从这个案例来理解一下 FP 的 &lt;code&gt;声明式编程&lt;&#x2F;code&gt;
特点。声明式编程的一个最大的不同在于，他的每一行代码更聚焦于描述代码的目的（面向阅读者），而不是聚焦于”怎么做“？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;CQRS &amp;amp; FP
&lt;code&gt;Command Query Responsibility Segregation&lt;&#x2F;code&gt; 是一种面向领域复杂性的解决方案，通过区分 Command、Query，使用 Event Sourcing
来描述 Command 的结果，避免对数据进行 mutable 的操作。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Event Sourcing 模式避免了对 Entity 的直接修改，而 Event 本身是 immutable 的，这与 FP 的数据不可变思想一致。&lt;&#x2F;li&gt;
&lt;li&gt;Entity Snapshot = f ( events )。可以根据不同的需求、场景、视角，建立不同的 snapshot。这是一个 Pure 的操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;大数据处理 &amp;amp; FP（Flink、Spark、Kafka Stream、Akka Stream）
从 Map-Reduce 开启大数据处理时代开始，新的大数据处理框架，如 Spark、Flink 等都采用了 FP 的思想。与普通的 FP
不同，这类架构会在一个分布式的环境下，编排出一个分布式的 Data Flow Topology，并提供包括 back presure、checkpoint
等机制。但其核心思想，仍然是数据流图，这个和 FP 的思想是完全吻合的，因此，大部分的大数据处理框架提供的都是 FP 的API。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;React &amp;amp; FP
传统意义上，UI并不适合于FP，因为 UI 本质上就是一个高度 mutable 的场景，任何一个交互事件，如鼠标、键盘，或者时钟事件，都会导致
UI 元素的巨大变化。无论是一个 Widget Tree，还是一个 DOM Tree，这种变化总是无法避免的。而 FP 倾向于 immutable
的思维模型，因此，传统意义上，FP 并不适用于 UI 开发。&lt;&#x2F;p&gt;
&lt;p&gt;不过，React 这个非常流行的框架，从WEB开发，延展到 React Native 进行APP的开发，短短的数年时间，已成为了最受欢迎的前端开发架构。很多最新的前端开发架构，例如
LitElement（a WebComponents library）、Flutter、微信小程序等，都采用了于 React 相似的方式：构建 VDOM，并通过 diff - patch
算法完成 DOM 的更新。&lt;&#x2F;p&gt;
&lt;p&gt;引入 VDOM 后， VDOM. = f ( states )
，这是一个纯粹的函数计算，是没有副作用，当任何状态变化后，我们只需要重新应用函数就可以得到最新的VDOM，而无需根据当前的状态，计算出界面所需要的变化（Δ、或者增量变化）。总是进行一次完整的
VDOM 计算，相比根据当前状态计算 Δ 要简单得多。当完成 VDOM 计算后，我们使用一个 diff 算法，完成 VDOM 与上一次的 VDOM 的差异。
即 patch = diff( VDOM1, VDOM2)，这也是一次纯粹的函数计算，然后，我们调用 &lt;code&gt;interpret&lt;&#x2F;code&gt; 函数，将这个 patch
应用到DOM上，完成DOM的更新过程。这个和我们上面介绍的 &lt;code&gt;计算-解释&lt;&#x2F;code&gt;模型是一致的。通过 VDOM 和 patch 算法，我们完成了计算与解释的隔离。&lt;&#x2F;p&gt;
&lt;p&gt;React 的成功之处在于：通过&lt;code&gt;计算-解释&lt;&#x2F;code&gt;隔离，UI 的业务逻辑都可以采用 FP 的方式进行完成，这大大的简化了UI
的操作，减少了代码量。同时，由于采用 diff 算法，最后的DOM更新也可以做到&lt;em&gt;最优化&lt;&#x2F;em&gt;，从而也带来极大的性能提升。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;新的编程语言对FP的支持
虽然C、Java语言在最近许多年中，一直是雄霸 Tiobe榜的前二选择，不过，越来越多的新晋语言，都普遍选择了支持 FP 的特性。
随着越来越多的编程语言、编程框架对FP的支持，我们应该大胆的拥抱FP的编程思想，因为这也代表着未来的趋势。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;Java&lt;&#x2F;th&gt;&lt;th&gt;Kotlin&lt;&#x2F;th&gt;&lt;th&gt;Scala&lt;&#x2F;th&gt;&lt;th&gt;Swift&lt;&#x2F;th&gt;&lt;th&gt;Rust&lt;&#x2F;th&gt;&lt;th&gt;Go&lt;&#x2F;th&gt;&lt;th&gt;Dart&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;不可变变量&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;不可变集合&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;if-else 表达式&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;for 表达式&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;switch 表达式&lt;&#x2F;td&gt;&lt;td&gt;JDK14&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;λ匿名函数&lt;&#x2F;td&gt;&lt;td&gt;JDK8&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;函数即值&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;尾递归&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;Y&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;td&gt;N&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;综上，比较好的体验FP的编程语言是 Kotlin、Scala。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;4-ying-yong-shi-jian&quot;&gt;4. 应用实践&lt;&#x2F;h1&gt;
&lt;p&gt;从目前国内的应用情况来看，FP
应该还是小众的选择，作者在一个函数式开发的群中，普遍接触到的都是一些“兴趣爱好者“，问及是否在实际项目中，是否有选择”函数式编程语言”，是否应用函数式编程？普遍的回答是“不”，大家对FP有较多的担忧、误解。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-1-fp-hen-kun-nan-ru-fu-za-lei-xing-ti-xi-ling-huo-de-dslyu-fa-tian-shu-yi-ban-de-frameworkyuan-dai-ma-yi-ji-hui-se-de-monad&quot;&gt;4.1 FP 很困难，如复杂类型体系、灵活的DSL语法、天书一般的framework源代码、以及晦涩的Monad？&lt;&#x2F;h2&gt;
&lt;p&gt;相信很多FP的爱好者都是抱着这样的疑惑的：FP很困难，有很多的新概念，Monad、λ calculus、Categories，这似乎与学习量子力学的难度也差不多了。&lt;&#x2F;p&gt;
&lt;p&gt;的确，FP的发展史上，一直都有“数学家”的影子，从Categories理论、λ演算、LISP编程语言，都有非常深厚的数据理论基础，其背后有一套复杂的、深奥的理论。但实际上，大部分的商业应用中，并不会用到复杂的理论。正如母鸡会下蛋，但它不会知道下蛋背后的科学逻辑，我们也可以在不了解这些深奥数学的情况下，驾驭函数式编程。&lt;&#x2F;p&gt;
&lt;p&gt;FP可以很深奥，但一些基本的原则确实非常简单的，也足以处理绝大多数的应用问题。本文总结了几条FP的基本原则：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编写无副作用的纯函数。&lt;&#x2F;li&gt;
&lt;li&gt;编写“不变性“的代码，使用 immutable 变量和 immutable 对象、immutabe集合。&lt;&#x2F;li&gt;
&lt;li&gt;使用 expression 而非 statement&lt;&#x2F;li&gt;
&lt;li&gt;编写简单的处理流程。&lt;&#x2F;li&gt;
&lt;li&gt;编写简单的数据流，采用 pipeline、DAG 的结构，划分层次、粒度。&lt;&#x2F;li&gt;
&lt;li&gt;隔离副作用，采用 &lt;code&gt;计算-解释&lt;&#x2F;code&gt;、&lt;code&gt;多阶段副作用模型&lt;&#x2F;code&gt;、&lt;code&gt;TCC&lt;&#x2F;code&gt;等模式隔离副作用处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;实际上，通过遵守上述的原则，我们不需要关心 Monad、更不需要学习 Categories Theory，就完全可以应对商业应用开发。使用 FP 并不并
OOP 更复杂，更烧脑，相反，通过应用上述的原则，我们可以开发出更为简洁、清晰、可读、无BUG的程序。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-2-zhao-bu-dao-shou-xi-fpde-gong-cheng-shi&quot;&gt;4.2 招不到熟悉FP的工程师。&lt;&#x2F;h2&gt;
&lt;p&gt;的确如此，目前大部分工程师都是OO的信徒，基本上缺乏FP的认知和实践。不过，我们认为FP并不是什么“异类”的编程模式，通过强调上述的6条基本原则，绝大部分的工程师都可以在1-2周时间内，逐步完成转型，并在3-4周的实践窗口内，逐步的习惯新的编程模式，产出更为高效、高质量的代码。&lt;&#x2F;p&gt;
&lt;p&gt;我们推荐的学习路径是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;初步了解函数式语言的一些基本语法、函数。(1-2天），在后续过程中，可以随时通过搜索、查手册、咨询身边的熟手，来应对函数式编程中的一些初级问题：例如，语法问题，常用函数问题。&lt;&#x2F;li&gt;
&lt;li&gt;基于不变量编程，编写无副作用的纯函数。（1周），一般的，通过完成几个集合相关的练习题，开发者即可理解如何消除不变量。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;选择1-2个过往的代码片段，我们的原则上是选择尽可能复杂的业务场景，有时候可能是成百上千行的传统代码，尝试使用1周的时间进行重构实验，演练我们推荐的6个原则：在这个过程中，有一个熟练掌握这种方式的熟手，予以检查和指导，是非常有效的。（1周）。&lt;&#x2F;p&gt;
&lt;p&gt;一般的，经历2周的实践，一个熟练的Java程序员，完全可以成功转型，掌握新的FP编程思想和使用方法，并开始在工程中进行应用。当然，在这个过程中，配置一个掌握该方法的熟手，指导4-6个转型程序员，按需施以援手，阶段性进行代码的review，是非常有效的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-3-bian-cheng-yu-yan-xuan-ze-shi-hun-he-shi-bian-cheng-huan-shi-qiang-zhi-xing-fp&quot;&gt;4.3 编程语言选择？是混合式编程？，还是强制性 FP？&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;选择 Java 8？还是 Kotlin、Scala等编程语言？&lt;&#x2F;li&gt;
&lt;li&gt;是在项目中选择混合式编程，既采用传统命令式，使用变量、可变集合，也结合使用部分函数式的用法？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;从我个人的经验来看，我会更倾向于一步到位，选择支持函数式能力较为彻底地语言，在 JVM 之上，我会推荐 Kotlin、Scala。虽然基于
Java8 的Stream API 和 lambda，也可以编写 FP 风格的代码，但是，选择 Java8，主要存在的不足之处是：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;缺少一个 immutable collection API。&lt;&#x2F;li&gt;
&lt;li&gt;缺少对 if-else, switch 表达式的支持。这使得 statement 的使用不可避免。&lt;&#x2F;li&gt;
&lt;li&gt;不支持 tailrec，这使得 循环不可避免，也使得 statement的使用不可避免。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;而选择 Kotlin、Scala 这样的语言，对 Java 程序员来说，其实并没有多大的门槛，一般的，经过2-4周的时间，Java程序员就可以基本上掌握
Scala 这样的语言，熟练的进行应用开发。而通过施加本文介绍的 6
个限制原则，杜绝副作用的滥用、拒绝数据可变性处理，可以带来显著的代码质量提升。相反，如果不能践行本文推荐的原则，则大部分情况下，程序员在不自觉的情况下，可能会退化为传统OOP的编程习惯，最终的效果会打上折扣。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-4-fp-dui-cheng-xu-yuan-su-yang-de-bang-zhu&quot;&gt;4.4 FP 对程序员素养的帮助&lt;&#x2F;h2&gt;
&lt;p&gt;对大部分的程序员来说，会更习惯 OOP
的方式，因为这种方式带给程序员的约束更小，编码会更为自由。但这样带来的问题是，缺乏对整个程序的整体思考，尤其是对数据流的整体思考，大部分的时间其实是通过“调试”来编写代码，可能1天编写的代码，调试要2-5倍的时间。这种写起来很爽，把困难留给调试的方式，很难说可以提高程序员的思维能力。&lt;&#x2F;p&gt;
&lt;p&gt;而 FP 不同，隔离副作用、编写无副作用的函数、使用单向无环路的数据流，都会迫使程序员在解决一个具体问题前，先理清思路，梳理数据流向，了解最终的副作用是什么？而这些搞清楚后，剩下的代码开发反而是一件相对简单的事情。采用
FP 方式，我们可以花更少的时间来调试代码，原因是：FP 简单的数据流、数据的不变性，让代码是高度自描述的，具有很强的可证明性。在我们的实践中，我们会推荐程序员挑战：一遍写正确代码，而不必通过
debug 来和错误捉谜藏。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-5-fp-dui-xiang-mu-zhi-liang-de-bang-zhu&quot;&gt;4.5 FP 对项目质量的帮助&lt;&#x2F;h2&gt;
&lt;p&gt;通过践行本文推荐的6条基本原则，可以加大幅度的提升代码的质量：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;隔离副作用，会让代码的逻辑更为清晰。&lt;&#x2F;li&gt;
&lt;li&gt;大部分代码是符合SRP、内聚、无副作用的函数，这些函数很容易阅读、单元测试。&lt;&#x2F;li&gt;
&lt;li&gt;简单数据流让代码整体流程简单、清晰。评审代码时，可以按照顺序方式进行，而无需兜转。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;虽然 FP 并不是解决所有问题的银弹，但是，采用了本文6原则的 FP
代码，却带来了更好的可读性、可验证性，在实际工程实践中，大幅度降低了代码评审的难度，确保评审者可以以较小的代价理解被评审的代码。从我们的实践经验来看，采用6大原则编写的代码，其较低的水位的代码，也超过了大部分“编写良好的”传统
OOP 代码。&lt;&#x2F;p&gt;
&lt;p&gt;作为一个补充，我们正在开发6原则的代码测评工具，对违反原则的代码，在代码提交阶段，即可利用工具进行扫描检查，防止违反原则的代码进入代码库，这个进一步简化代码的评审工作量，使得，我们可以更聚焦于代码逻辑本身，而非一些形式化的内容。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>实例讲解 Java 内存模型</title>
        <published>2021-06-10T00:00:00+00:00</published>
        <updated>2021-06-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/java-volatile/"/>
        <id>https://wangzaixiang.github.io/blog/java-volatile/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/java-volatile/">&lt;h1 id=&quot;shi-li-jiang-jie-java-nei-cun-mo-xing&quot;&gt;实例讲解 Java 内存模型&lt;&#x2F;h1&gt;
&lt;p&gt;Java内存模型(JMM)是一个相对抽象、高级的话题，相关的规范在&lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;specs&#x2F;jls&#x2F;se8&#x2F;html&#x2F;jls-17.html#jls-17.4&quot;&gt;Memory Model&lt;&#x2F;a&gt;有详细的定义。JMM主要解决内存读写的可见性问题。&lt;&#x2F;p&gt;
&lt;p&gt;那么，什么是内存读写的可见性问题呢？会出现什么样的问题，如何解决这些问题呢？本文讲试图通过一些实例来讲述。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fan-li-dai-ma&quot;&gt;反例代码&lt;&#x2F;h2&gt;
&lt;p&gt;首先，我们来看一段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BrokenBarrierException&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CyclicBarrier&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;path1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		a &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		x &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;path2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		y &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; a;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		a &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		x &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CyclicBarrier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; barrier &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CyclicBarrier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; t1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					barrier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BrokenBarrierException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; t2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					barrier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BrokenBarrierException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		t1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		t2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		t1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		t2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(x &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;found on &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; i);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个例子，初始化时，a = 0, b = 0, x = -1, y = -1, 启动两个线程，分别同时执行 path1 和 path2，
那么在2个线程执行完成后，是否可能会出现 x == 0 &amp;amp;&amp;amp; y == 0 的情况呢？
&lt;img src=&quot;&#x2F;images&#x2F;15764941224465.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在让我们来模拟一下可能的执行情况：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Thread 1 的 a = 1 先于 Thread 2 的 b = 2 执行。如下图
&lt;img src=&quot;&#x2F;images&#x2F;15764945758860.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
在这种情况下， y = 1， x 可能为0或者2。 不会出现 y == 0 &amp;amp;&amp;amp; x == 0的情况。&lt;&#x2F;li&gt;
&lt;li&gt;Thread 1 的 a = 1 晚于  Thread 2 的 b = 2 执行，如下图：
&lt;img src=&quot;&#x2F;images&#x2F;15764947927698.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
在这种情况下， x = 2, y 可能为 0或者1。不会出现 x == 0 &amp;amp;&amp;amp; y == 0的情况。&lt;&#x2F;li&gt;
&lt;li&gt;Thread 1 和 Thread 2 完全同时执行。
&lt;img src=&quot;&#x2F;images&#x2F;15764949409093.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
在这种情况下， x = 2, y = 1，不可能出现 x == 0 &amp;amp;&amp;amp; y == 0 的情况。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;根据我们的分析，无论是 T1先于T2,T1晚于T2，还是 T1,T2完全同时执行，理论上都不会出现 x == 0 and y == 0 的情况出现。&lt;&#x2F;p&gt;
&lt;p&gt;但是实际上，我们去运行上述的代码，却可能会出现违背预期的情况。
&lt;img src=&quot;&#x2F;images&#x2F;15764953595416.jpg&quot; alt=&quot;-w322&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在我的MacBookPro上，执行上述代码，在1百万次循环中，出现了8次不符合“预期”的情况。虽然说，这种几率是非常低的，百万分之八。但这样的问题如果出现在线上系统中，每天都出现数次或者数十次异常情况，会是一件非常令人抓狂的事情。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-yin-shi-shen-me&quot;&gt;原因是什么？&lt;&#x2F;h2&gt;
&lt;p&gt;我们上面分析了3种可能的执行路径，“理论”上，是不会出现x,y同时为0的情况的，但实际执行结果并不符合预期。肯定是我们的分析出了问题。CPU的实际执行，和我们上面的“假设”并不一致。&lt;&#x2F;p&gt;
&lt;p&gt;实际上，我们上面分析的三种可能的执行路径，都有一个基本的假设：CPU 是先执行上一条指令，然后在执行下一条指令，且执行完这条指令后，执行结果，可以在其他的CPU（线程）上反映其执行结果，即：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在同一个线程内，CPU是依照顺序执行指令的。&lt;&#x2F;li&gt;
&lt;li&gt;当前CPU执行完一条存储指令后，在其他CPU上读取该地址时，可以马上读取到我们写入的结果。（当然，也隐含着：当前CPU可以马上看到写入的结果）。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这两个假设，都是比较符合我们的理解逻辑的，这才是正确反映我们代码逻辑的方式。事实上，如果CPU严格的按照上述逻辑来执行代码，是不会出现上面的异常情况的，但不幸的是，这两个假设，在现代大部分的CPU上都不成立。本文就以我们最熟悉的 x86 系列CPU来进行说明。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在同一个线程内，CPU 是按照顺序执行指令的。
实际上，X86 不再完全遵守顺序执行指令的原则。X86 采用多级流水线架构，CPU可以在同一个时钟周期内，解码多条指令，并同时发射到多个执行单元进行执行，这称之为“多发射”技术。采用多发射技术，CPU可以在同一个时钟周期内同时执行多条指令，这使得程序执行速度变得更快了。
当然，要进行这种优化，也是有前提条件的，比如，如果两条指令存在依赖关系，那么，CPU是不能将其同时执行的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    a = x
&lt;&#x2F;span&gt;&lt;span&gt;    b = a + 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Intel曾经设计过一款名为 Itanium（安腾） 的CPU，这款CPU容许编译器显式的将多条指令合并成为1条宽指令，交给 CPU 执行，从而实现更好的性能。可惜的是，这款处理器，从来就没有占领市场，目前已经被Intel抛弃了。
目前的 X86 架构，采用的是由 CPU 自己来管理指令的依赖关系，并采用多发射的方式，来实现性能提升，其实也间接实现了 Itanium 未达成的使命。而且，无需编译器进行革命性的改变。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当前 CPU 执行完一条存储（写入内存）指令后，在其他CPU上可以马上读取到其结果。
实际上，X86 并不提供这种承诺。假设CPU要提供这种承诺，则意味着：当前的存储指令，必须等待到实际将数据真实写入到内存中。考虑到 CPU 访问内存的速度相对于CPU的自身的执行速度而言，是相当缓慢的。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Register：1 Cycle&lt;&#x2F;li&gt;
&lt;li&gt;L1 Cache：3 Cycles&lt;&#x2F;li&gt;
&lt;li&gt;L2 Cache：10+ Cycles&lt;&#x2F;li&gt;
&lt;li&gt;L3 Cache：20~30+ Cycles&lt;&#x2F;li&gt;
&lt;li&gt;Main Memory：~100 Cycles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;考虑到大部分的CPU计算，都可以在1个周期内完成，也就是说，如果等待一次内存的访问，可能会浪费掉100条执行的执行能力。
所以，实际上，CPU会对内存的读写进行大量负责的优化：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;引入 L1,L2,L3 Cache。&lt;&#x2F;li&gt;
&lt;li&gt;引入 Write Buffer。
这是一个比较复杂的过程，本文不对此进展展开，这里阐述的是这样的一个事实：当CPU执行完一个 Store 指令时，为了保证最佳的CPU执行效率，它并不保证数据已经写入到主存中，它可能是写入到当前CPU的一个内部 write buffer中，然后再合并，写入到 L1 Cache、L2 Cache、L3 Cache、Main Memory中。这里 L1, L2是每个CPU私有的缓存，L3 Cache是多个CPU 所共享的。
当写入数据在 Write Buffer 时，其它CPU读取数据时，依然会读取到之前的值。而当数据已经写入 L1&#x2F;L2 Cache时，X86会通过缓存一致性协议，确保其它的CPU读取到更新后的值。所以，在数据从write buffer写入到Cache之前，其它CPU是无法读取当前线程的写入结果的。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;那么，在什么情况下，会出现 x == 0 &amp;amp;&amp;amp; y == 0 呢？
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;java-volatile&#x2F;media&#x2F;15744362994853&#x2F;15765008552361.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;[a] = 1 和 r1 = [b] 指令没有依赖关系，可以同时执行.
&lt;ol&gt;
&lt;li&gt;[a] = 1 是一条Store指令，其数据会先写入CPU的 WriteBuf，然后写入 Cache，大约需要 3+ 时钟周期，为其它线程所能读取到。&lt;&#x2F;li&gt;
&lt;li&gt;r1 = [b] 是一个Load指令，其数据可能已经在 L1 内，可以立即执行，其值为0&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;[b] = 2 和 r1 = [a] 指令没有依赖关系，可以同时执行
&lt;ol&gt;
&lt;li&gt;[b] = 2 是一条 Store 指令，其数据会先写入 CPU 的 WriteBuf，然后写入 Cache，大约需要 3+ 时间周期之后，其它线程才能读取到写入的值。&lt;&#x2F;li&gt;
&lt;li&gt;r1 = [a] 是一条 Load 指令，其数据可能已经在 L1 内，可以立即执行，其值为0.
当出现这种执行路径时，就会出现 x == y == 0的情况了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;综上，[a] = 1 和 r1 = [b] 这两条指令，其执行的结果相当于重新排序了： r1 = [b], [a] = 1。这里说的重排序，是指在其它CPU的视角来看，两条指令的执行顺序。在执行CPU 自身来看，是不存在重排序的问题的，CPU 的优化总是保证符合单线程的语义不变的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-chong-zhong-pai-xu&quot;&gt;四种重排序&lt;&#x2F;h2&gt;
&lt;p&gt;上面的示例实际上是一次 Store - Load 的重排序，一共有四种形式的重排序：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Load - Load&lt;&#x2F;li&gt;
&lt;li&gt;Store - Store&lt;&#x2F;li&gt;
&lt;li&gt;Load - Store&lt;&#x2F;li&gt;
&lt;li&gt;Store - Load&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;不同的CPU有不同的指令重排序策略，而在X86中，只有 Store Load 是会出现重排序的，而其它的三种： Load Load, Load Store, Store Store 都不会出现重排序。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Load Load， Store Store 不会重排序。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;java-volatile&#x2F;media&#x2F;15744362994853&#x2F;15765027225748.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;如果 r1 = 1, 则意味着 [y] = 1 已执行， 则 [x] = 1 必然已执行&lt;&#x2F;li&gt;
&lt;li&gt;r2 = [x] 必须晚于 r1 = [y]，因此，r2 一定等于1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Load Store 不会重排序
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;java-volatile&#x2F;media&#x2F;15744362994853&#x2F;15765030906230.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;如果 r1 == 1，则意味着 [x] = 1 已经执行，由于 Load Store 不能重排序， r2 = [y] = 0&lt;&#x2F;li&gt;
&lt;li&gt;如果 r2 == 1, 则意味 [y] = 1已经执行，此时 r1 = [x] = 0。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Store Load 可能会出现重排序。这个已经在上面的案列中说明。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对其他的CPU，如Arm，可能会有不同的指令重排序限制，具体情况如何，作者对Arm不熟悉，没找搜集到这方面的资料。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fang-zhi-zhong-pai-xu&quot;&gt;防止重排序&lt;&#x2F;h2&gt;
&lt;p&gt;为了防止内存重排序，我们可以在 指令和指令之间插入一些特定的指令，来防止重排序。这些指令称之为 memory barriers， 或者 memory fence。有四种类型的内存屏障。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;LoadLoad.
Load1 LoadLoad Load2 在两条 Load指令之间插入 LoadLoad，可以确保两条Load指令不被重排序。对X86来说，不需要 LoadLoad 屏障。&lt;&#x2F;li&gt;
&lt;li&gt;StoreStore
Store1 StoreStore Store2 在两条 Store 指令之间插入 StoreStore，可以确保两条 Store 指令不被重排序。对 X86来说，不需要 StoreStore屏障。&lt;&#x2F;li&gt;
&lt;li&gt;LoadStore
Load1 LoadStore Store2 在Load和Store指令之间插入 LoadStore，可以确保Load1 Store2指令不被重拍讯。对X86来说，不需要 Load Store指令。&lt;&#x2F;li&gt;
&lt;li&gt;StoreLoad
Store1 StoreLoad Load2 在 Store1和Load2之间插入 StoreLoad，可以精致 StoreLoad 重排序。这是 X86 所需要的。X86 提供 sfence, lfence, mfence 三种内存屏障指令。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;volatile&quot;&gt;volatile&lt;&#x2F;h1&gt;
&lt;p&gt;lock addl $0, [esp]&lt;&#x2F;p&gt;
&lt;h1 id=&quot;putorderedlong&quot;&gt;putOrderedLong&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;putlongvolatile&quot;&gt;putLongVolatile&lt;&#x2F;h1&gt;
&lt;p&gt;引述：《Intel 64 and IA-32 Architectures》&lt;code&gt;8.2.3 Examples Illustrating the Memory-Ordering Principles&lt;&#x2F;code&gt; 一文。&lt;&#x2F;p&gt;
&lt;p&gt;讲述内容：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;volatile 对 JavaC 的影响。&lt;&#x2F;li&gt;
&lt;li&gt;volatile 对 JVM 的影响&lt;&#x2F;li&gt;
&lt;li&gt;unsafe.putOrderedLong 是什么意思&lt;&#x2F;li&gt;
&lt;li&gt;What&#x27;s happen-before and memory-oder? 能给我一个反例吗？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;write back&lt;&#x2F;li&gt;
&lt;li&gt;write through&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;store-store-load-load-not-reordered&quot;&gt;Store-Store, Load-Load not reordered&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;load-store-not-reordered&quot;&gt;Load-Store not reordered&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;store-load-maybe-reordered&quot;&gt;Store-Load maybe reordered.&lt;&#x2F;h2&gt;
&lt;p&gt;这个案例和 DCL 是相同的概念的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Queue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BlockingDeque&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BlockingQueue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedBlockingQueue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; thread submit a req and waiting a response
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; thread2 process req and subit a response
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BlockingQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; queue &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedBlockingQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;request;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;response;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDaemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    task.response &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task.request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    ex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                task.request &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task.response &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task.response &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do volatile required?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reponse is null at &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                count &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(count &lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000_000 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runs &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000_000 &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;M turns&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;hou-ji&quot;&gt;后记&lt;&#x2F;h1&gt;
&lt;p&gt;2025-04-07 学习《超标量处理器设计》，对CPU ISA(微架构)有一定理解后，可以更好的理解这个问题&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对超标量处理器、多发射、乱序执行情况下，理论上指令从前端解码后，会进入到后端发射队列。此后，其执行是乱序的。可能会出现后面的指令先执行，
前面的指令后执行的情况。&lt;&#x2F;li&gt;
&lt;li&gt;ROB(Reorder Buffer) 乱序执行的指令，可能会在ROB中等待很长时间，才会被提交到内存中。这个主要是对单个线程的有序性而言，主要是针对应用可见的寄存器、内存的可见性而言。&lt;&#x2F;li&gt;
&lt;li&gt;在执行指令时的内存有序性，存在 Load-Load, Store-Store, Load-Store, Store-Load 四种情况。不同的 CPU 架构有不同的实现。
&lt;ul&gt;
&lt;li&gt;x86 架构下，Load-Load, Store-Store 不会重排序，Load-Store 不会重排序，Store-Load 可能会重排序。&lt;&#x2F;li&gt;
&lt;li&gt;ARM 架构下，都会出现重排序，需要显示使用内存屏障。优点是容许更多的指令重排，从而提升 IPC，但并发场景中需要更多的内存屏障。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;load-load-zhe-ge-an-li-dai-gai-jin&quot;&gt;Load-Load (这个案例待改进)&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 共享变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; ready = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread A: 写入数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 写操作
&lt;&#x2F;span&gt;&lt;span&gt;    ready = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 写标记
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread B: 读取数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(!ready) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 等待 *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; local_data_1 = data;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Load 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; local_data_2 = data;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Load 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(local_data_1 == local_data_2);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 断言应总成立
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;store-store&quot;&gt;Store-Store&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 共享变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread A: 写入两个变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Store 1
&lt;&#x2F;span&gt;&lt;span&gt;    b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Store 2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread B: 检查写入顺序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(b != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 等待 *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(a == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 若 Store-Store 重排导致 b=2 先于 a=1，则断言失败
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;load-store-ci-an-li-dai-gai-jin&quot;&gt;Load-Store(此案例待改进)&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 共享变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; ready = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread A: 写入数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    ready = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 写标记
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Thread B: 读取数据后立即写入新值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(!ready) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 等待 *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; local_data = data;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Load
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DMB&lt;&#x2F;span&gt;&lt;span&gt;(LD);        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 假设此处缺少屏障
&lt;&#x2F;span&gt;&lt;span&gt;    data = local_data + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Store
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>无端唤醒</title>
        <published>2021-06-10T00:00:00+00:00</published>
        <updated>2021-06-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/spurious-weakup/"/>
        <id>https://wangzaixiang.github.io/blog/spurious-weakup/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/spurious-weakup/">&lt;h1 id=&quot;wu-duan-huan-xing-spurious-wakeup&quot;&gt;无端唤醒（spurious wakeup）&lt;&#x2F;h1&gt;
&lt;p&gt;前些时间，我们自研的一款 Redis 驱动，有反应存在如下的现象：偶尔会出现 redis 发送命令，在没有超时的情况下，却返回了“没有收到返回结果”的情况，虽然几率很低，但也是断断续续出现了几次，应该是一个非常隐藏的 BUG。&lt;&#x2F;p&gt;
&lt;p&gt;为了定位这个问题，我们将相关的逻辑进行了简化，编写了如下等效的代码，检测是否会重现问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BlockingQueue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedBlockingQueue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.concurrent.atomic.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AtomicInteger&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BlockingQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; queue &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedBlockingQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;request;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;response;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDaemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        task.response &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task.request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    ex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                task.request &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; visible to others?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; offOK &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check offer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(offOK &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;offer failed, retry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; waitOk &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; start, end;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task.response &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            waitOk &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(task.response &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do volatile required?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reponse is null waitok = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; waitOk &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; waitTime:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                            ex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                count &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(count &lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000_000 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runs &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; count&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000_000 &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;M turns&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个代码是一个简单的生产者、消费者模型：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;生产者：往队列中提交一个消息（Task），等待消费者处理完后唤醒生产者。期望 Task 中的response已经有正确的值。&lt;&#x2F;li&gt;
&lt;li&gt;消费者：等待队列的消息，处理完一条消息后，唤醒生产者。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;运行如上的测试代码，很快就可以重现问题，可能在5百万次至1-2亿次循环后，程序打印 &lt;code&gt;reponse is null &lt;&#x2F;code&gt;后退出。&lt;&#x2F;p&gt;
&lt;p&gt;最开始的时候，我们的怀疑点是：Consumer 线程中执行的 &lt;code&gt;task.response = task.request.toUppercase()&lt;&#x2F;code&gt; 结果对 Producer 线程不可见。（但按照 synchronize 的语义，在 synchronize 块monitor exit离开时，数据修改对其他线程是可见的），我们尝试将 response 字段修饰为 volatile， 但结果仍然会出现同样的问题，因此，问题，并不处在 synchronize&#x2F;volatile 引起的数据可见性方面。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于JMM的学习，强烈推荐：&lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.cn&#x2F;minibook&#x2F;java_memory_model?utm_source=related_read&amp;amp;utm_medium=article&quot;&gt;深入理解Java内存模型&lt;&#x2F;a&gt;，以及对照查看 &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;specs&#x2F;jls&#x2F;se15&#x2F;html&#x2F;jls-17.html#jls-17.4&quot;&gt;JMM官方文档&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;因为这段代码能够更好的进行问题的重现（而原 Redis 驱动要重现这个问题，则需要数天的时间），因此，我们对这段代码略作改造，在出现异常的代码点上，添加了一些调试代码，结果发现了一个有意思的现象：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当生产者进入到 &lt;code&gt;System.exit&lt;&#x2F;code&gt;时， 相应的消费者还没有进入到 &lt;code&gt;synchronzie&lt;&#x2F;code&gt; 块中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;也就是说，当前的Consumer并没有开始消费 Task，自然也没有进行 notify 调用，但Producer的 wait 却在没有任何异常的情况下，已经返回了。&lt;&#x2F;p&gt;
&lt;p&gt;这个时候，再仔细阅读一下 Object.wait 的文档：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thread can also wake up without being notified, interrupted, or
timing out, a so-called &lt;i&gt;spurious wakeup&lt;&#x2F;i&gt;.  While this will rarely
occur in practice, applications must guard against it by testing for
the condition that should have caused the thread to be awakened, and
continuing to wait if the condition is not satisfied.  In other words,
waits should always occur in loops, like this one:&lt;&#x2F;p&gt;
&lt;pre&gt;
  synchronized (obj) {
      while (&amp;lt;condition does not hold&amp;gt;)
          obj.wait(timeout);
      ... &#x2F;&#x2F; Perform action appropriate to condition
  }
&lt;&#x2F;pre&gt;
&lt;p&gt;(For more information on this topic, see Section 3.2.3 in Doug Lea&#x27;s
&quot;Concurrent Programming in Java (Second Edition)&quot; (Addison-Wesley,
2000), or Item 50 in Joshua Bloch&#x27;s &quot;Effective Java Programming
Language Guide&quot; (Addison-Wesley, 2001).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;看来之前都忽略了这个 spurious wakeup (无端唤醒)。按照这个文档的指导，上述的代码应该重写为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;synchronized&lt;&#x2F;span&gt;&lt;span&gt;(task) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; begin = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentTimeMillis&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(task.response == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; now = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentTimeMillis&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; waitTime = begin + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L &lt;&#x2F;span&gt;&lt;span&gt;- now;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(waitTime &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;                    task.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(waitTime);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;                ex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(task.response == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do volatile required?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reponse is null waitok = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + count);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Object.wait 会被无端唤醒，这个知识点较为冷门。如果没有关注到这个点的话，wait&#x2F;notify 很可能会出现小几率的是失败（在上亿级调用的场景下，则近乎是大几率事件）。&lt;&#x2F;li&gt;
&lt;li&gt;对小几率出现的并发问题，需要严重以待，这些事件几乎肯定是程序的Bug，出现一次，就意味着一定会有第二次和更多次。&lt;&#x2F;li&gt;
&lt;li&gt;伴随这个问题的解决，我几乎重温了一遍 JMM，在逐一排查的过程中，似乎又深入理解了一些。这些案例带给我们的帮助，相比单纯的学习要效果好很多。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>FAQ</title>
        <published>2021-05-01T19:30:00+00:00</published>
        <updated>2021-05-01T19:30:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/docs/help/faq/"/>
        <id>https://wangzaixiang.github.io/docs/help/faq/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/docs/help/faq/">&lt;h2 id=&quot;what-is-the-adidoks&quot;&gt;What is the AdiDoks?&lt;&#x2F;h2&gt;
&lt;p&gt;AdiDoks is a Zola theme for Documentation&#x27;s sites, ported by the Hugo Theme
&lt;a href=&quot;https:&#x2F;&#x2F;getdoks.org&quot;&gt;Doks&lt;&#x2F;a&gt;, which is a pretty nice theme. Thanks a lot to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;h-enk&quot;&gt;&lt;em&gt;h-enk&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, the creator of the &lt;a href=&quot;https:&#x2F;&#x2F;getdoks.org&quot;&gt;Doks&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keyboard-shortcuts-for-search&quot;&gt;Keyboard shortcuts for search?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;focus: &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;select: &lt;code&gt;↓&lt;&#x2F;code&gt; and &lt;code&gt;↑&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;open: &lt;code&gt;Enter&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;close: &lt;code&gt;Esc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-documentation&quot;&gt;Other documentation?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.netlify.com&#x2F;&quot;&gt;Netlify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contact-the-creator&quot;&gt;Contact the creator?&lt;&#x2F;h2&gt;
&lt;p&gt;Send &lt;em&gt;Aaran Xu&lt;&#x2F;em&gt; an E-mail:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;mailto:aaranxu@outlook.com&quot;&gt;aaranxu@outlook.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code of Conduct</title>
        <published>2021-05-01T18:20:00+00:00</published>
        <updated>2021-05-01T18:20:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/docs/contributing/code-of-conduct/"/>
        <id>https://wangzaixiang.github.io/docs/contributing/code-of-conduct/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/docs/contributing/code-of-conduct/">&lt;h2 id=&quot;our-pledge&quot;&gt;Our Pledge&lt;&#x2F;h2&gt;
&lt;p&gt;We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual identity
and orientation.&lt;&#x2F;p&gt;
&lt;p&gt;We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-standards&quot;&gt;Our Standards&lt;&#x2F;h2&gt;
&lt;p&gt;Examples of behavior that contributes to a positive environment for our
community include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Demonstrating empathy and kindness toward other people&lt;&#x2F;li&gt;
&lt;li&gt;Being respectful of differing opinions, viewpoints, and experiences&lt;&#x2F;li&gt;
&lt;li&gt;Giving and gracefully accepting constructive feedback&lt;&#x2F;li&gt;
&lt;li&gt;Accepting responsibility and apologizing to those affected by our mistakes,
and learning from the experience&lt;&#x2F;li&gt;
&lt;li&gt;Focusing on what is best not just for us as individuals, but for the
overall community&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Examples of unacceptable behavior include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The use of sexualized language or imagery, and sexual attention or
advances of any kind&lt;&#x2F;li&gt;
&lt;li&gt;Trolling, insulting or derogatory comments, and personal or political attacks&lt;&#x2F;li&gt;
&lt;li&gt;Public or private harassment&lt;&#x2F;li&gt;
&lt;li&gt;Publishing others&#x27; private information, such as a physical or email
address, without their explicit permission&lt;&#x2F;li&gt;
&lt;li&gt;Other conduct which could reasonably be considered inappropriate in a
professional setting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;enforcement-responsibilities&quot;&gt;Enforcement Responsibilities&lt;&#x2F;h2&gt;
&lt;p&gt;Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.&lt;&#x2F;p&gt;
&lt;p&gt;Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scope&quot;&gt;Scope&lt;&#x2F;h2&gt;
&lt;p&gt;This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enforcement&quot;&gt;Enforcement&lt;&#x2F;h2&gt;
&lt;p&gt;Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
&lt;a href=&quot;mailto:aaranxu@outlook.com&quot;&gt;aaranxu@outlook.com&lt;&#x2F;a&gt;.
All complaints will be reviewed and investigated promptly and fairly.&lt;&#x2F;p&gt;
&lt;p&gt;All community leaders are obligated to respect the privacy and security of the
reporter of any incident.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enforcement-guidelines&quot;&gt;Enforcement Guidelines&lt;&#x2F;h2&gt;
&lt;p&gt;Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-correction&quot;&gt;1. Correction&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-warning&quot;&gt;2. Warning&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: A violation through a single incident or series
of actions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-temporary-ban&quot;&gt;3. Temporary Ban&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: A serious violation of community standards, including
sustained inappropriate behavior.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-permanent-ban&quot;&gt;4. Permanent Ban&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A permanent ban from any sort of public interaction within
the community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attribution&quot;&gt;Attribution&lt;&#x2F;h2&gt;
&lt;p&gt;This Code of Conduct is adapted from the &lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&quot;&gt;Contributor Covenant&lt;&#x2F;a&gt;,
version 2.0, available at
&lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;version&#x2F;2&#x2F;0&#x2F;code_of_conduct.html&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;version&#x2F;2&#x2F;0&#x2F;code_of_conduct.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Community Impact Guidelines were inspired by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;diversity&quot;&gt;Mozilla&#x27;s code of conduct enforcement ladder&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For answers to common questions about this code of conduct, see the FAQ at
&lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;faq&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;faq&lt;&#x2F;a&gt;. Translations are available
at &lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;translations&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;translations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Contribute</title>
        <published>2021-05-01T18:10:00+00:00</published>
        <updated>2021-05-01T18:10:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/docs/contributing/how-to-contribute/"/>
        <id>https://wangzaixiang.github.io/docs/contributing/how-to-contribute/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/docs/contributing/how-to-contribute/">&lt;p&gt;👉 Make sure to read the &lt;a href=&quot;..&#x2F;code-of-conduct&#x2F;&quot;&gt;Code of Conduct&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contribute-to-doks&quot;&gt;Contribute to Doks&lt;&#x2F;h2&gt;
&lt;p&gt;👉 The AdiDoks code lives in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks&quot;&gt;&lt;code&gt;adidoks&lt;&#x2F;code&gt; repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the &lt;a href=&quot;https:&#x2F;&#x2F;guides.github.com&#x2F;introduction&#x2F;flow&#x2F;&quot;&gt;GitHub flow&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Follow the &lt;a href=&quot;https:&#x2F;&#x2F;www.conventionalcommits.org&#x2F;en&#x2F;v1.0.0&#x2F;&quot;&gt;Conventional Commits Specification&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;create-an-issue&quot;&gt;Create an issue&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks&#x2F;issues&#x2F;new?template=bug-report---.md&quot;&gt;Bug report&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks&#x2F;issues&#x2F;new?template=feature-request---.md&quot;&gt;Feature request&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;improve-documentation&quot;&gt;Improve documentation&lt;&#x2F;h2&gt;
&lt;p&gt;👉 The documentation lives in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks&#x2F;tree&#x2F;master&#x2F;content&#x2F;docs&quot;&gt;&lt;code&gt;.&#x2F;content&#x2F;docs&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;h-enk&#x2F;getdoks.org&quot;&gt;&lt;code&gt;adidoks&lt;&#x2F;code&gt; repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the &lt;a href=&quot;https:&#x2F;&#x2F;guides.github.com&#x2F;introduction&#x2F;flow&#x2F;&quot;&gt;GitHub flow&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Follow the &lt;a href=&quot;https:&#x2F;&#x2F;www.conventionalcommits.org&#x2F;en&#x2F;v1.0.0&#x2F;&quot;&gt;Conventional Commits Specification&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Quick Start</title>
        <published>2021-05-01T08:20:00+00:00</published>
        <updated>2021-05-01T08:20:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/docs/getting-started/quick-start/"/>
        <id>https://wangzaixiang.github.io/docs/getting-started/quick-start/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/docs/getting-started/quick-start/">&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;Before using the theme, you need to install the &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;installation&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; ≥ 0.15.0.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-the-theme-directly&quot;&gt;Run the Theme Directly&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; adidoks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Visit &lt;code&gt;http:&#x2F;&#x2F;127.0.0.1:1111&#x2F;&lt;&#x2F;code&gt; in the browser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Just earlier we showed you how to run the theme directly. Now we start to
install the theme in an existing site step by step.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-1-create-a-new-zola-site&quot;&gt;Step 1: Create a new zola site&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; init mysite
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-2-install-adidoks&quot;&gt;Step 2: Install AdiDoks&lt;&#x2F;h3&gt;
&lt;p&gt;Download this theme to your themes directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; mysite&#x2F;themes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or install as a submodule:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; mysite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; init  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# if your project is a git repository already, ignore this command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule add https:&#x2F;&#x2F;github.com&#x2F;aaranxu&#x2F;adidoks.git themes&#x2F;adidoks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-3-configuration&quot;&gt;Step 3: Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Enable the theme in your &lt;code&gt;config.toml&lt;&#x2F;code&gt; in the site derectory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;theme &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;adidoks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or copy the &lt;code&gt;config.toml.example&lt;&#x2F;code&gt; from the theme directory to your project&#x27;s
root directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; themes&#x2F;adidoks&#x2F;config.toml.example config.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-4-add-new-content&quot;&gt;Step 4: Add new content&lt;&#x2F;h3&gt;
&lt;p&gt;You can copy the content from the theme directory to your project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -r&lt;&#x2F;span&gt;&lt;span&gt; themes&#x2F;adidoks&#x2F;content .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can modify or add new posts in the &lt;code&gt;content&#x2F;blog&lt;&#x2F;code&gt;, &lt;code&gt;content&#x2F;docs&lt;&#x2F;code&gt; or other
content directories as needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-5-run-the-project&quot;&gt;Step 5: Run the project&lt;&#x2F;h3&gt;
&lt;p&gt;Just run &lt;code&gt;zola serve&lt;&#x2F;code&gt; in the root path of the project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;AdiDoks will start the Zola development web server accessible by default at
&lt;code&gt;http:&#x2F;&#x2F;127.0.0.1:1111&lt;&#x2F;code&gt;. Saved changes will live reload in the browser.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Introduction</title>
        <published>2021-05-01T08:00:00+00:00</published>
        <updated>2021-05-01T08:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/docs/getting-started/introduction/"/>
        <id>https://wangzaixiang.github.io/docs/getting-started/introduction/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/docs/getting-started/introduction/">&lt;h2 id=&quot;quick-start&quot;&gt;Quick Start&lt;&#x2F;h2&gt;
&lt;p&gt;One page summary of how to start a new AdiDoks project. &lt;a href=&quot;..&#x2F;quick-start&#x2F;&quot;&gt;Quick Start →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-further&quot;&gt;Go further&lt;&#x2F;h2&gt;
&lt;p&gt;Contributing and Help.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;&#x2F;h2&gt;
&lt;p&gt;Find out how to contribute to Doks. &lt;a href=&quot;..&#x2F;..&#x2F;contributing&#x2F;how-to-contribute&#x2F;&quot;&gt;Contributing →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;help&quot;&gt;Help&lt;&#x2F;h2&gt;
&lt;p&gt;Get help on Doks. &lt;a href=&quot;..&#x2F;..&#x2F;help&#x2F;faq&#x2F;&quot;&gt;Help →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>wangzaixiang</title>
        <published>2021-04-01T08:50:45+00:00</published>
        <updated>2021-04-01T08:50:45+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/authors/wangzx/"/>
        <id>https://wangzaixiang.github.io/authors/wangzx/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/authors/wangzx/">&lt;p&gt;我是 wangzx, 一名 30+ 年的老程序员，这个网站是我的个人技术博客、阅读札记 和 部份技术文档的整理：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Scala 爱好者，多个 Scala 开源库作者。&lt;&#x2F;li&gt;
&lt;li&gt;酷爱 FP 编程及设计，FP 布道师，并在业务类、基础架构类项目中有应用实践（从 0 到 1 组建 FP 开发团队）。&lt;&#x2F;li&gt;
&lt;li&gt;唯品会微服务框架 OSP 创建者， 开源微服务框架 &lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;authors&#x2F;wangzx&#x2F;github.com&#x2F;dapeng-soa&quot;&gt;dapeng-soa&lt;&#x2F;a&gt; 创建者。&lt;&#x2F;li&gt;
&lt;li&gt;曾涉足多个行业，CCB银行核心系统建设者、东航电子客票设计者、电商、零售、大宗。有自己的 DDD  + FP 实践体系。&lt;&#x2F;li&gt;
&lt;li&gt;敏捷实践者：XP、Scrum、Lean、TDD ...&lt;&#x2F;li&gt;
&lt;li&gt;目前专注于：BI &amp;amp; MPP &amp;amp; OLAP &amp;amp; Rust 技术，希望能深扎进来，做一些有意思的事情。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;电子邮件: &lt;a href=&quot;mailto:949631531@qq.com&quot;&gt;949631531@qq.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;github: &lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;authors&#x2F;wangzx&#x2F;github.com&#x2F;wangzaixiang&quot;&gt;github.com&#x2F;wangzaixiang&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>dapeng JSON 流式处理简介</title>
        <published>2020-09-04T12:00:00+00:00</published>
        <updated>2020-09-04T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/dapeng-json/"/>
        <id>https://wangzaixiang.github.io/blog/dapeng-json/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/dapeng-json/">&lt;h1 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h1&gt;
&lt;p&gt;dapeng的原生协议是thrift, 包括二进制、压缩二进制两种模式. 原生协议的优势是有丰富的数据类型支持能力（优于JSON）, 传输格式紧凑（远比JSON更小,
尤其是压缩二进制格式）, 序列化开销小（几乎没有解析成本和数据转换成本）, 这些优点是dapeng选择thrift的基本原因.&lt;&#x2F;p&gt;
&lt;p&gt;虽然有很多的优势, 原生的thrift协议最大的缺点就是对&quot;人&quot;不友好, 而JSON则是human readable的最优选择, 目前已是互联网应用的事实标准.
它相比XML更为简洁, 当然也更为紧凑, 便于开发者阅读, 非常方便在WEB上应用. 这使得它取代xml成为了数据交换事实上的行业标准. 尽管语言之争是个永恒的话题,
但在数据交换格式上, JSON是毫无争议的王者.&lt;&#x2F;p&gt;
&lt;p&gt;如何为dapeng服务提供对JSON的支持, 可以使用restful的形式来调用dapeng服务, 从而方便WEB前端、PHP或者命令行工具来调用服务呢？
dapeng提供了API Gateway, 将JSON请求转换成为thrift请求, 对外提供了一个restful + JSON的API接入服务.
API Gateway包括了鉴权、流控、路由等多个功能, 但其核心的功能是完成JSON到thrift的双向数据转换工作, 本文介绍了dapeng-json的设计特色,
包括dapeng是如何高效率的完成数据转化、如何处理可变压缩二进制格式等挑战的.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;dapeng-json 在技术上的一个最大的特点是：采用流式处理的方式，无论是对请求和返回信息，都无需构建完整的 JSON 对象，从而大大减少内存的分配和GC的
开销，即使对于巨大的请求&#x2F;返回，也可以在很少的内存消耗下完成转换，因对，对于网关一类的应用来说，可以带来巨大的性能提升，使用普通的 4core 4G 的
虚拟机就可以达到 20K+&#x2F;s 的 QPS，这是非流式处理的方式很难达到的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;dapeng-jsonde-she-ji-mu-biao&quot;&gt;dapeng-json的设计目标&lt;&#x2F;h1&gt;
&lt;p&gt;dapeng-json的最终目的就是实现JSON字符串与基于thrift协议格式的二进制流之间的高效互换.具体有如下三个指标:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;高性能
考虑到 dapeng-json 作为 http 网关甚至后续 service-mesh 的核心模块, 要求其能实现高效的序列化以及反序列化, 以支持海量请求的处理. 如果序列化的开销高, 则势必会降低网关的接入能力.
&lt;blockquote&gt;
&lt;p&gt;toBeDone, 性能参数(JSON跟普通java客户端的性能对比)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;低内存使用
虽然大部分情况下的JSON请求、返回都是数据量较小的场景, 但作为平台框架, 也需要应对更大的JSON请求和返回, 比如1M、甚至10M. 在这些场景下, 如果需要占用大量的内存, 那么势必导致巨大的内存需求, 同时引发频繁的GC操作, 也会联动影响到整个网关的性能.
dapeng-json参考了XML SAX API的设计思想, 创造性的引入了JSON Stream API, 采用流式的处理模式, 实现JSON 对 thrift 的双向转换, 无论数据包有多大, 都可以在一定固定的内存规模内完成.&lt;&#x2F;li&gt;
&lt;li&gt;容错性好
在dapeng中, IDL层面定义了基本的服务调用前置条件, 譬如必须使用正确的数据类型, 有的字段是必填的. 在使用json-thrift转换时,
必须能够正确的进行数据转换, 不要把错误的请求传递给服务方. 并且需要在有错误的情况下, 清晰的反馈错误, 以便开发者进行定位.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在介绍dapeng-JSON的设计思路之前, 我们先看看dapeng对JSON的支持架构:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;dapeng-json&#x2F;dapeng-json.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;右上角的两个模块(dapeng-json, ServiceMetaData), 再暴露一个http端口, 可以构成一个典型的 HttpServiceAgent.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;dapeng-json-de-shi-xian-si-lu&quot;&gt;dapeng-json 的实现思路&lt;&#x2F;h1&gt;
&lt;p&gt;让我们重温一下dapeng-json的使命:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;dapeng-json的最终目的就是实现 JSON 字符串与 thrif 格式的二进制流之间的高效互换&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;chang-gui-fang-shi-string-jsonobject-pojo-binary&quot;&gt;常规方式：string -&amp;gt; JSONObject -&amp;gt; POJO -&amp;gt; Binary&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;将JSON 字符串转换为 JSON 对象模型（JSONObject）&lt;&#x2F;li&gt;
&lt;li&gt;然后通过三方JSON-POJO映射框架（如Google的Gson, 阿里的FastJSON等), 将JSONObject转换成为POJO,&lt;&#x2F;li&gt;
&lt;li&gt;通过dapeng生成的POJO序列化代码完成从POJO到thrfit的转换过程.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;部分框架可以结合1和2, 直接从JSON字符串转换成为 POJO.&lt;&#x2F;p&gt;
&lt;p&gt;不过, 这个设计不满足我们的设计要求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;这个过程经过了三次转换, 会产生大量的临时对象, 有很大的内存要求&lt;&#x2F;li&gt;
&lt;li&gt;使用反射方式对于旨在榨干服务器性能以获取高吞吐量的系统来说, 难以达到性能最佳&lt;&#x2F;li&gt;
&lt;li&gt;这个方案有很强的“类型”需求, 在 API 网关中必须依赖 POJO 包, 要求JSON模块依赖服务的api包（否则没法知晓服务接口的输入输出参数）, 这个依赖会降低API网关的动态能力, 使得部署维护复杂.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ji-yu-liu-de-zhuan-huan-json-bytes-binary&quot;&gt;基于流的转换：JSON bytes -&amp;gt; Binary&lt;&#x2F;h2&gt;
&lt;p&gt;这是dapeng-json所采用的方式, 显而易见, 这个过程只经历了一次协议转换, 即直接将从网络上接收到的一个JSON字节流直接转换成为thrift数据包.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;dapeng-json&#x2F;JsonSerializer-class.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jsoncallback&quot;&gt;JSONCallback&lt;&#x2F;h3&gt;
&lt;p&gt;从上节我们可以得知, JSON的组成元素类型不多, 且每种元素都有自己的开始&#x2F;结束字符, 我们暂且称这些字符为关键字符.&lt;&#x2F;p&gt;
&lt;p&gt;为了高效的处理JSON字符串, 我们采用了Streaming的处理方式:逐个字符读入JSON字符串,碰到关键字符就触发一定的处理动作. 为此, 我们首先创建一个接口JSONCallback, 并定义了一组回调方法用以处理每种JSON元素:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;com.github.dapeng.json;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.github.dapeng.org.apache.thrift.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TException&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; zxwang
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;public interface JSONCallback {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at start of JSON object, typical handle the &amp;#39;{&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onStartObject() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at end of JSON object, typical handle the &amp;#39;}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onEndObject() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at start of JSON array, typical handle the &amp;#39;[&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onStartArray() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at end of JSON array, typical handle the &amp;#39;]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onEndArray() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at start of JSON field, such as: &amp;quot;orderId&amp;quot;:130
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; name of the filed, as for the example above, that is &amp;quot;orderId&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onStartField(String name) throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called at end of JSON field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onEndField() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called when a boolean value is met,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * as to given field: &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pre&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;gt;&amp;quot;expired&amp;quot;:false&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pre&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * First onStartField(&amp;quot;expired&amp;quot;) is called, followed by a call onBoolean(false) and a call onEndField()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onBoolean(boolean value) throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called when a double value is met.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onNumber(double value) throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called when a long&#x2F;int value is met.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onNumber(long value) throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called when a null value is met.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Such as: &amp;quot;subItemId&amp;quot;:null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onNull() throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Called when a String value is met.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Such as: &amp;quot;name&amp;quot;: &amp;quot;Walt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;TException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    void onString(String value) throws TException;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这个接口的设计借鉴了XML SAX的设计思想, 既可用于序列化（生成JSON）, 也可以反序列化（解析JSON字符串）.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;此外, dapeng核心包里定义了一个通用的编解码接口:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;package com.github.dapeng.core;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import com.github.dapeng.org.apache.thrift.TException;
&lt;&#x2F;span&gt;&lt;span&gt;import com.github.dapeng.org.apache.thrift.protocol.TProtocol;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * 通用编解码器接口
&lt;&#x2F;span&gt;&lt;span&gt; * @author ever
&lt;&#x2F;span&gt;&lt;span&gt; * @date 2017&#x2F;7&#x2F;17
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;public interface BeanSerializer&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt;     * 反序列化方法, 从thrift协议格式中转换回PoJo
&lt;&#x2F;span&gt;&lt;span&gt;     * @param iproto
&lt;&#x2F;span&gt;&lt;span&gt;     * @return
&lt;&#x2F;span&gt;&lt;span&gt;     * @throws TException
&lt;&#x2F;span&gt;&lt;span&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    T read(TProtocol iproto) throws TException;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt;     * 序列化方法, 把PoJo转换为thrift协议格式
&lt;&#x2F;span&gt;&lt;span&gt;     * @param bean
&lt;&#x2F;span&gt;&lt;span&gt;     * @param oproto
&lt;&#x2F;span&gt;&lt;span&gt;     * @throws TException
&lt;&#x2F;span&gt;&lt;span&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    void write(T bean, TProtocol oproto) throws TException;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt;     * PoJo校验方法
&lt;&#x2F;span&gt;&lt;span&gt;     * @param bean
&lt;&#x2F;span&gt;&lt;span&gt;     * @throws TException
&lt;&#x2F;span&gt;&lt;span&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    void validate(T bean) throws TException;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt;     * 输出对人友好的信息
&lt;&#x2F;span&gt;&lt;span&gt;     * @param bean
&lt;&#x2F;span&gt;&lt;span&gt;     * @return
&lt;&#x2F;span&gt;&lt;span&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    String toString(T bean);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;dapeng-JSON通过JSONSerializer实现了这个编解码器.&lt;&#x2F;p&gt;
&lt;p&gt;在深入具体实现之前, 我们先了解一下dapeng的服务元信息, 因为服务元信息是dapeng很多模块的关键.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dapeng-yuan-xin-xi&quot;&gt;dapeng 元信息&lt;&#x2F;h3&gt;
&lt;p&gt;前文提到, dapeng服务有丰富的元信息, 非常类似于Java Class的反射信息, 通过反射, 我们动态的访问一个对象的各个字段、方法, 而无需依赖于编译时期的类型信息. 同样, 有了服务元信息, 我们也可以在运行期访问到IDL中定义的所有信息.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过元数据信息自动生成java&#x2F;scala等客户端代码.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过元数据信息在客户端序列化&#x2F;反序列接口参数或者返回信息的时候, 校验每一个字段是否有效.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这里是一个服务元信息的示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;getAddress_args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRUCT&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;com.today.api.dictionary.request.GetAddressRequest&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 查询请求&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;com.today.api.dictionary.request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GetAddressRequest&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;新增&#x2F;编辑 字典 的请求实体&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;provinceCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRING&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;省级地址编码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cityCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRING&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;市级地址编码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;districtCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRING&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;区级地址编码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;townCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRING&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;乡镇级地址编码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;streetCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;STRING&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataType&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;街道级地址编码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jsonserializer-write-xu-lie-hua-jsonstring-binarry-zi-ding-xiang-xia-jie-xi-json&quot;&gt;JSONSerializer.write： 序列化(JSONString-&amp;gt;Binarry)：自顶向下解析JSON&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; input, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TProtocol&lt;&#x2F;span&gt;&lt;span&gt; oproto) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JsonReader&lt;&#x2F;span&gt;&lt;span&gt; jsonReader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JsonReader&lt;&#x2F;span&gt;&lt;span&gt;(service, method, version, struct, requestByteBuf, oproto);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JsonParser&lt;&#x2F;span&gt;&lt;span&gt;(input, jsonReader).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parseJsValue&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们通过JsonParser实现对JSON字符串的解析, 在流式解析JSON的过程中, 我们会产生JsonCallback事件, JsonReader就是负责将相应的事件转化为Thrift的操作.&lt;&#x2F;p&gt;
&lt;p&gt;考虑之前提到的JSON例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;createOrderRequest&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memberId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;payCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tidf3325aaeny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;storeIds: [28, 35, 64],&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;           {
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;skuId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4.5
&lt;&#x2F;span&gt;&lt;span&gt;           }, {
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;skuId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;106&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20.0
&lt;&#x2F;span&gt;&lt;span&gt;           }
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对应的 JSONCallback 序列如下:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;- onStartObject
&lt;&#x2F;span&gt;&lt;span&gt;    - onStartFiled createOrderRequest
&lt;&#x2F;span&gt;&lt;span&gt;        - onStartObject
&lt;&#x2F;span&gt;&lt;span&gt;            - onStartField memberId
&lt;&#x2F;span&gt;&lt;span&gt;                - onNumber 1024
&lt;&#x2F;span&gt;&lt;span&gt;            - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;            - onStartField payCode
&lt;&#x2F;span&gt;&lt;span&gt;                - onString tidf3325aaeny
&lt;&#x2F;span&gt;&lt;span&gt;            - onEndField 
&lt;&#x2F;span&gt;&lt;span&gt;            - onStartField storeIds
&lt;&#x2F;span&gt;&lt;span&gt;                - onStartArray
&lt;&#x2F;span&gt;&lt;span&gt;                    - onNumber 28
&lt;&#x2F;span&gt;&lt;span&gt;                    - onNumber 35
&lt;&#x2F;span&gt;&lt;span&gt;                    - onNumber 64
&lt;&#x2F;span&gt;&lt;span&gt;                - onEndArray
&lt;&#x2F;span&gt;&lt;span&gt;            - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;            - onStartField items
&lt;&#x2F;span&gt;&lt;span&gt;                - onStartArray
&lt;&#x2F;span&gt;&lt;span&gt;                    - onStartObject
&lt;&#x2F;span&gt;&lt;span&gt;                        - onStartField skuId
&lt;&#x2F;span&gt;&lt;span&gt;                            - onNumber 24
&lt;&#x2F;span&gt;&lt;span&gt;                        - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;                        - onStartField amount
&lt;&#x2F;span&gt;&lt;span&gt;                            - onNumber 4.5
&lt;&#x2F;span&gt;&lt;span&gt;                        - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;                    - onEndObject
&lt;&#x2F;span&gt;&lt;span&gt;                    - onStartObject
&lt;&#x2F;span&gt;&lt;span&gt;                        - onStartField skuId
&lt;&#x2F;span&gt;&lt;span&gt;                            - onNumber 106
&lt;&#x2F;span&gt;&lt;span&gt;                        - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;                        - onStartField amount
&lt;&#x2F;span&gt;&lt;span&gt;                            - onNumber 20.0
&lt;&#x2F;span&gt;&lt;span&gt;                        - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;                    - onEndObject
&lt;&#x2F;span&gt;&lt;span&gt;                - onEndArray
&lt;&#x2F;span&gt;&lt;span&gt;            - onEndField          
&lt;&#x2F;span&gt;&lt;span&gt;        - onEndObject
&lt;&#x2F;span&gt;&lt;span&gt;    - onEndField
&lt;&#x2F;span&gt;&lt;span&gt;- onEndObject
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jsonserializer-read-fan-xu-lie-hua-binary-jsonstring&quot;&gt;JSONSerializer.read：反序列化(Binary-&amp;gt;JSONString)&lt;&#x2F;h3&gt;
&lt;p&gt;这个过程是write的一个逆向过程.&lt;&#x2F;p&gt;
&lt;p&gt;针对JSON的各种数据类型
通过dapeng强大的服务元数据,我们可以知道某个服务的某个方法的某个入参的元数据信息,例如有多少field,每个field的类型,是否必填等:&lt;&#x2F;p&gt;
&lt;p&gt;在处理JSON的过程中, 我们可以通过元数据来实现如下功能:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对于接口请求参数中没有的字段, 可直接忽略&lt;&#x2F;li&gt;
&lt;li&gt;对每个字段做必要的类型校验, 同时&lt;&#x2F;li&gt;
&lt;li&gt;对于接口请求参数中要求必填的参数字段,在处理完整个JSON字符串之后,做一个对必填字段的校验. 如果存在必填字段缺失的情况,那么直接返回提示给调用方,防止无效请求发到服务端.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;基于string-stream的流式处理机制,尽可能少的分配内存以及创建字符串,支持fast-failed. 流式处理不需要在内存中构建好整个JSON对象再做处理, 它对内存的消耗取决于JSON结构的深度而不是长度. 例如某个JSON结构体包含一个数组元素, 那么流式处理机制所需要的最大内存等于单个数组元素的大小, 而数组的长度对于内存消耗来说没有影响. 这个特性很重要, 就算要处理几MB或者几十MB甚至几百MB的JSON数据, dapeng-JSON可能也只是需要几KB的内存消耗而已.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;dapeng-json&#x2F;dapeng-service-mesh.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;others&quot;&gt;others&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;numberlei-xing-de-shu-ju-zhuan-huan&quot;&gt;Number类型的数据转换&lt;&#x2F;h2&gt;
&lt;p&gt;由于JavaScript规范中， 数字只有一种类型:Number，且是浮点类型。那么对于一个大的长整型(Long, 超出[-2^53, 2^53]范围，也即[-9007199254740992,9007199254740992])，使用Number类型会存在不可预料的结果。例如:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; var l1 = 9007199254740995
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; var l2 = 9007199254740996
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; l1 == l2
&lt;&#x2F;span&gt;&lt;span&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;针对Json数值类型在转换过程中存在精度丢失的问题， 约定如下：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-jian-yi&quot;&gt;1. 建议&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;首先我们不建议在业务接口中使用Double类型的字段， 尽量用BigDecimal。&lt;&#x2F;li&gt;
&lt;li&gt;如果某个字段是个长整型(Long)，且预期不在[-2^53, 2^53]范围内，也即[-9007199254740992,9007199254740992],  那么建议前端封装json数据的时候， 该字段用字符串（dapeng-json转换引擎会通过服务元数据准确的把该字符串转回Long）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;2-fu-wu-duan-fan-hui-gei-qian-duan-de-shu-ju-thrift-json&quot;&gt;2. 服务端返回给前端的数据(thrift-&amp;gt;json)&lt;&#x2F;h3&gt;
&lt;p&gt;对于Long类型，会判断一下大小，如果超出[-2^53, 2^53]， 那么我们会把Long类型转换成字符串。 否则就直接输出Number类型&lt;&#x2F;p&gt;
&lt;p&gt;对于Double类型， 这个就直接输出Number类型了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-qian-duan-dao-hou-duan-de-shu-ju-chuan-di-json-thrift&quot;&gt;3. 前端到后端的数据传递(json-&amp;gt;thrift)&lt;&#x2F;h3&gt;
&lt;p&gt;对于Long类型， 不管json是Number还是字符串， 我们都转成标准的Long&lt;&#x2F;p&gt;
&lt;p&gt;对于Double类型，不管json是Number还是字符串， 我们都转成标准的Double&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LitElement &amp; LitHtml 探秘</title>
        <published>2019-11-04T00:00:00+00:00</published>
        <updated>2019-11-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/litelement/"/>
        <id>https://wangzaixiang.github.io/blog/litelement/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/litelement/">&lt;p&gt;在Polymer的最新Blog中，介绍了新的webcomponent开发框架：LitElement 。作为一个Polymer的资深粉，这些年一直处在且爱且恨之中：
爱 Polymer之组件化架构（当然更多归根于webcomponent底层标准），爱 Polymer 之概念简单，恨 Polymer 之不痛不痒之社区生态，
尤其在国内，几乎是无人问津，亦恨 Polymer 之版本更新，摧枯拉朽，从V1到V2到V3，哪一个版本更替都是大刀阔斧，从不考虑向下兼容。
而V3刚出，现在又冒出一个LitElement，且又是一个完全颠覆 V3的设计。
虽然最近很长时间以来，我对前端技术甚少问津，但还是很好奇 LitHtml 究竟是何方神圣，能够让Polymer 要在 历经3年发布3个大版本之后，另起炉灶，重树新标呢？&lt;&#x2F;p&gt;
&lt;p&gt;按照官方的Guide，动手启动一个Hello World之旅，了解一下 LitHtml 的奥妙之所在，还是有很多的收获的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geng-biao-zhun&quot;&gt;更标准&lt;&#x2F;h2&gt;
&lt;p&gt;LitElement 完全基于最新的WebComponent标准&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Custom Element V1
CustomElement 是 webcomponent 的核心规范，区别于React、VUE、Angular等一系列的“自定义元素”的框架，Custom Element在浏览器底层提供了扩展
element 的能力，并且统一了扩展 Element 与内置 Element 的 attribute、property、method、event 的模型。&lt;&#x2F;p&gt;
&lt;p&gt;如果说React、VUE、Angular的“自定义元素”是开发时期的语法糖那么Custom Element则是运行时期的对象模型，我们可以做很多原本不能做的事情：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在运行期，直接在 DOM inspector 等工具中，浏览组件，或对其进行动态的调整，如调整 attribute、property、CSS等。&lt;&#x2F;li&gt;
&lt;li&gt;可以更好的与其它的组件框架集成，例如从React中直接使用webcomponent，对其它技术无感适配。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Shadow DOM V1
Shadow DOM为自定义的组件提供了包括CSS、事件的有效隔离，不再担心不同的组件之间的样式、事件污染了。这相当于为自定义组件提供了一个有效的保护伞。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript Module
Polymer V1、V2中都引入了一个新的技术 HTML Imports，尝试使用HTML作为一种新的module载体，这个思路并没有得到业界的广泛支持，
反而大家更为倾向于支持基于ES6的Module技术。从 Polymer V3开始，也向这一思路对齐，废弃了HTML Imports，而是使用ES6 Module。
这样带来的优点是在开发方式上与React、VUE等更加一致，当然也更加依赖 ES6 的语言特性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;更匹配 OO 思想（或者说组件模型）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个自定义组件 就是一个 继承了 LitElement 的ES6 Class。&lt;&#x2F;li&gt;
&lt;li&gt;有自己的 properties，部分的properties可以映射到 attribute&lt;&#x2F;li&gt;
&lt;li&gt;有自己的 method，可以响应外部的请求&lt;&#x2F;li&gt;
&lt;li&gt;有自己的 event，可以将变化广播出去。&lt;&#x2F;li&gt;
&lt;li&gt;当然，LitElement 并不严格意义的匹配传统的组件 OO 模型，例如 property 的定义方式有所不同，这个可以使用 typescript 这类支持
@decorator 特性的语言来进行语法糖适配。但在底层模型上LitElement与经典的OO组件模型是一致的。&lt;&#x2F;li&gt;
&lt;li&gt;当然，如果说 Vue&#x2F;React 也是组件模型，那么不同之处，就在基于 WebComponent 是一个 ABI 级别、运行期级别的组件模型，而非开发期级别
的组件模型，这也解决了不同框架之间的组件协同。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;geng-xiao-qiao&quot;&gt;更小巧&lt;&#x2F;h2&gt;
&lt;p&gt;核心的 LitElement + LitHtml 非常小巧，目前版本的全部源代码（Module)共 28个文件，其中：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LitElement 共 3个Module，632行源代码，25K。&lt;&#x2F;li&gt;
&lt;li&gt;LitHtml 核心 共 14 个Module，1326 行源代码， 54K。&lt;&#x2F;li&gt;
&lt;li&gt;LitHtml 扩展标记，共11个 Module，978行源代码，44K&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;核心的源代码行数不超过2000行（还没有剔除注释），其可读性也是非常好，熟悉的话，1天就可以全部阅读完成了，运行期也很小，gzip后大约40K左右。&lt;&#x2F;p&gt;
&lt;p&gt;相比Polymer V1 - V3 的版本，LitElement应该是一个很小的实现了，这里面，非常奥妙的地方是 LitHtml，理解了 LitHtml，LitElement
其实只是一个很简单的 webcomponent 封装了。实际上，gluonjs 就是另外一个基于 LitHtml 的 webcomponent 封装。&lt;&#x2F;p&gt;
&lt;p&gt;所以接下来，我们来看看：What is LitHtml？Why LitHtml？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-lithtml&quot;&gt;What is LitHtml?&lt;&#x2F;h2&gt;
&lt;p&gt;LitHtml目前是Polymer下的一个子项目，从其名字来看，可以理解为 Literal Html，是一个基于字符流的HTML模版引擎。&lt;&#x2F;p&gt;
&lt;p&gt;模版引擎，是解决UI渲染这一类问题的最为常见的模式，最早是服务端的PHP、JSP、ASP等，就是典型的脚本化的模板引擎技术，后面演变到了组件化，
例如 JSF、ASP.NET等。然后，模板引擎技术，开始延展到了浏览器前端。&lt;&#x2F;p&gt;
&lt;p&gt;（翻翻旧账：作者在2005年，也创造了一个前端模板的轮子：&lt;a href=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;litelement&#x2F;easyajax.sf.net&quot;&gt;easyajax&lt;&#x2F;a&gt;，在当时，还是一个非常有效的生产力工具，也在我主导的多个项目中进行了应用，
相比当时传统的JavaScript开发，easyajax 带来的开发体验是非常好的， 对当时我们的前端效率有非常显著的提升）&lt;&#x2F;p&gt;
&lt;p&gt;浏览器端的模板引擎，有两大流派：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DOM based template。典型制作包括：easyajax、polymer、angularjs、Vue。&lt;&#x2F;li&gt;
&lt;li&gt;Literal based template。后端的JSP、PHP等都算是这一类。react是开启Literal based template的一个成功之作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在很长一段时间，DOM based template占据主流，Literal based template其实更多在后端渲染，直至reactjs获得成功。作为一个创造过 DOM based template
轮子的工程师，我当时也很难理解，为什么要选择这种模式？有什么优势？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我最早理解 React设计的出发点是：React 是后端工程师创造的前端轮子（虽然我主要也算是后端工程师），其最早确实是应用在服务端的，逐步的转移到前端。
在后端的话，没有浏览器构造的DOM，Literal Based实现更为简单。&lt;&#x2F;li&gt;
&lt;li&gt;React 是 Fuctional Program 思维， UI = f(data)，让一批有函数式情结的后端工程师，来整天应对 OOP 的世界，完全是三观不正，遍体不适的场景。
（自打我从Scala入手转变到FP后，我目前也是深刻的除在这样一种状态之下）。于是，React就呼之欲出了。大家千万不要认为会用map、foreach就是函数式编程了&lt;&#x2F;li&gt;
&lt;li&gt;UI = f(data) 是一个很华丽的转身，非常满足了FP工程师的审美洁癖，但性能呢？要知道后端工程师，对性能也是非常之耿耿于怀的，于是VDOM和Diff算法就呼之欲出了。&lt;&#x2F;li&gt;
&lt;li&gt;JSX(Literal Termplate) + VDOM + Diff = ReactJS，一个新物种诞生并获得了巨大的成功。除了Facebook的推手，其本身也是足够有价值的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这个推理过程完全是我自己的揣测，是否真的如是，就不得而知了。不过，React确实开启了全新的前端开发新的思维模型，使得我们不再局限于原有的DOM based，
也可以使用完全FP的方式，来解决UI的问题。&lt;&#x2F;p&gt;
&lt;p&gt;LitHtml的很多思路是继承了React的，只是在实现方式上另辟蹊径，这也是我在这篇文章中试图分析的内容。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;放弃 JSX 语法，采用ES6的 tag template技术，实现殊途同归。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; JSX
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ShoppingList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;React.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;div className=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shopping-list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &amp;lt;h1&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Shopping List for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.name}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &amp;lt;li&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Instagram&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &amp;lt;li&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WhatsApp&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Taged Template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;div className=&amp;quot;shopping-list&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;h1&amp;gt;Shopping List for {this.props.name}&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          &amp;lt;li&amp;gt;Instagram&amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          &amp;lt;li&amp;gt;WhatsApp&amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      &amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;应该说，如果在当年有了tagged template，React的工程师就不需要自己创造一个JSX了。JSX完全是不得已而为之的东西。
ES6中的template + tagged template语法糖，简直就是送给LitHtml的一个最佳礼物。这个差异完全是环境原因引起的。不过，后来者总是会占更多的便宜，
无论是思想上可以站在前人的肩膀之上，还是在工具上，有更丰富的工具可以随手使用。总之，LitHtml基于tagged template，带来的优势就是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器原生支持，无需预编译、预处理。&lt;&#x2F;li&gt;
&lt;li&gt;tagged tempalte 扩展能力更强，简直是为DSL定制的扩展大法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;其它的使用方法与 React 相似，不过，LitHtml 更专注为一个渲染引擎，不尝试提供组件、应用框架的东西，因此，概念极少，基本上就一个构造 html 模板，
然后就是 render 过程了。在React中的组件技术等，都从LitHtml中剔除了（转移到类似于 LitElement、GlonJS这样的组件框架之中。）因此，学习使用LitHtml是非常简单的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate&lt;&#x2F;span&gt;&lt;span&gt;({title: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, body: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lit-html is cool&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, document.body);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么，除了语法上的差异（JSX vs tagged template）相比React，LitHtml在render上到底有什么特别支持呢？是否可以达到React的性能，或者超越呢？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example-1&quot;&gt;Example 1&lt;&#x2F;h2&gt;
&lt;p&gt;我们先选择一个简单的案例，来剖析LitHtml的渲染过程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LitElement&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@polymer&#x2F;lit-element&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LitElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            mood: { type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.mood &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;happy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.mood}&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customElements&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;define&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-element&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MyElement&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;my-element&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;my-element&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gou-zao-templateresult&quot;&gt;构造TemplateResult&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;html&#x27;Hello ${this.mood}&#x27;&lt;&#x2F;code&gt; 这一行代码，构造的是一个TemplateResult对象。这一个过程的原理可以参考：Tagged Template String。
这是ES6的语言特性，不属于 LitHtml 的私有特征，因此，阅读下面章节之前，一定要先了解这个语言特性。&lt;&#x2F;p&gt;
&lt;p&gt;（如果你是Scala的用户，那么这就是Scala中的字符串插值，大部分新式的语言都开始支持这个特性了。）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TemplateResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;TemplateStringsArray;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; string[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;any[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; either html or svg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;TemplateProcessor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TemplateResult 是一个值对象，strings是模板内容，在我们的这个例子中，就是 &lt;code&gt;[&quot;Hello &quot;, &quot;&quot;]&lt;&#x2F;code&gt;, value就是模板中的值，在我们的这个例子中，就是 &lt;code&gt;[ this.modd ]&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;一个需要特别关注的是：在后续调用 render方法时， Hello ${this.mood} 是重用第一次的模板的，也就是说，后续创建的TemplateResult对象，
其 strings 值与第一次调用时是完全一致的，可以理解为编译时期就确定的一个常量值，而变化的只有 value 数组。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xuan-ran-guo-cheng&quot;&gt;渲染过程&lt;&#x2F;h2&gt;
&lt;p&gt;LitHtml 使用 &lt;code&gt;LitHtml.render( container, templateResult ) &lt;&#x2F;code&gt; 来完成一次渲染（即生成或更新container下的DOM结构）。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首次渲染&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对应于 TemplateResult是一个Literal版本的模板对象，Template则是一个DOM版本的模板对象。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 TemplateResult中模板是以字符串形式存在。Template中则是以html template元素存在。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在TemplateResult中，动态的值是以 value[] 存在，而在 Template中，则是以 ( index ) 形式存在，
index 是该值在DOM中的node index。（按照标准遍历顺序）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;指向最终渲染的 DOM。或者是 fragement、attribute、event等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;维护DOM中各个动态部分的 Part[]。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;render时，LitHtml并不是将 TemplateResult 关联到 container 本身，相反，而是在 container 中创建子元素。
(由于 TemplateResult 本身可能是 &lt;code&gt;&amp;lt;div&amp;gt;...&amp;lt;&#x2F;div&amp;gt; &amp;lt;div&amp;gt;...&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;code&gt; 等多个元素片段，并不一定对应到单个的Node。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;startNode 和 endNode 是 LitHtml 自己创建的在DOM中的 Comment 元素，这些元素占据DOM位置，但并不影响喧软过程。
NodePart创建的元素将介于这两个元素之间。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;根据 templateResult 创建一个 &lt;code&gt;&amp;lt;template&amp;gt;&lt;&#x2F;code&gt; 元素。这个过程相当于完成从 Literal 到 DOM 的一个转换。
对应到本示例中，相当于创建了如下的一个 DOM&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!----&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;创建一个 Template 对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;HtmlTemplateElement;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;TemplatePart[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TemplatePart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; node | attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;number; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for node and attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;string[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;根据 Template 对象创建 TemplateInstance 对象。
Template 只是一个DOM模板（dom + parts)，并不真正与渲染的DOM树关联。
而 TemplateInstance 则是一个运行时的示例，是作为所有使用 模板 够早的 NodePart 的 Model。&lt;&#x2F;p&gt;
&lt;p&gt;TemplateInstance 则是：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TemplateInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Template;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_fragment&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Fragement;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_parts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Part[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下图是一个完整的渲染数据流：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;litelement&#x2F;lit-render.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除 container 下的所有子节点。render会根据 html 模板，重新更新 container 下的全部显示内容。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;新创建一个 NodePart 对象，并关联到 container。
LitHtml中，Part 充当了MVC模式中的一个控制器，它连接了 Model（模版内容）、View（DOM Node)，并完成更新过程。&lt;&#x2F;p&gt;
&lt;p&gt;在本示例中，新创建的NodePart 连接了 TemplateResult（Model)、container（View)，并控制这个渲染过程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;Part {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: any;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: any): void;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;(): void;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NodePart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Part &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;startNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;endNode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Node;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;any;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__pendingValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;any;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;part.setValue ( templateResult ) 将 templateResult 作为 part 的新值。&lt;&#x2F;p&gt;
&lt;p&gt;part.commit 提交新值 (templateResult)，这个会更新 part 对应的 DOM。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;后续渲染&lt;&#x2F;p&gt;
&lt;p&gt;对 cotainer 进行第二次的渲染时，其基本流程如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;检查当前 TemplateInstance 的模板是否与 result 的模板是否一致？&lt;&#x2F;li&gt;
&lt;li&gt;如果下一次 render 使用的是另外一个模板，则相当于完成重新渲染，其过程与首次渲染完全相同，参见上面的分析过程。&lt;&#x2F;li&gt;
&lt;li&gt;如果使用的是相同的模板，则表示只有模板中的值会变化。&lt;&#x2F;li&gt;
&lt;li&gt;将每一个 TemplateResult 的新值更新到对应的 Part 的新值，并提交。&lt;&#x2F;li&gt;
&lt;li&gt;假设是一个NodePart，新值是 String，则对应的位置会替换成TEXT。（如果原来的节点还存在且是 TEXT，
则在原node上更新值，否则，删除原来的节点，创建一个新的TEXT节点）&lt;&#x2F;li&gt;
&lt;li&gt;假设是一个NodePart，新值是TemplateResult，即嵌套的html模板，则递归处理这个过程。（
如果原NodePart是一个TemplateResult，且具有相同的模板，则只有其中动态的部分被替换，否则整体替换。）&lt;&#x2F;li&gt;
&lt;li&gt;检查 container 是否有对应的 NodePart，如果有，则直接将 TemplateResult 作为value更新对应的 part。
这个过程不再需要上面的 从 TemplateResult -&amp;gt; Template -&amp;gt; TemplateInstance 的过程，
而是直接找到 NodePart，更新其值。NodePart 更新 TemplateResult 的过程&lt;&#x2F;li&gt;
&lt;li&gt;如果 container 没有 对应的 part，则表明是首次render，使用上一节介绍的流程进行渲染：
从 TemplateResult -&amp;gt; Template -&amp;gt; TemplateInstance。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;lithtmlgeng-gao-xiao-ma&quot;&gt;LitHtml更高效吗？&lt;&#x2F;h2&gt;
&lt;p&gt;上面解析了 LitHtml 的渲染过程，整个流程是非常简单的，那么，这个过程采取了那些措施，使得其具有更高的性能呢？
相比 React 会更高效吗？&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Tagged Template String 执行相比 JSX 更高效。JSX每次render时，都需要完整的构造一个虚拟DOM，
而LitHtml，则只是重构一个 轻量级的 TemplateResult 对象，变化的只有 value 集合。
当VDOM较大时，LitHtml的速度会快1-2个数量级。而且，TemplateResult 在memory foot上也要远远小于 VDOM。&lt;&#x2F;li&gt;
&lt;li&gt;从 TemplateResult 到 &lt;code&gt;&amp;lt;template&amp;gt;&lt;&#x2F;code&gt; 的过程，是直接从 TemplateResult 构造 html ，然后使用 template.innerHTML
完成解析的。这个过程使用浏览器自己的语法解析器来完成的。由于使用了 template 技术，
这个DOM是一个DocumentFragement，并不是真实DOM的一部分，内存占用小。&lt;&#x2F;li&gt;
&lt;li&gt;实际渲染的DOM生成，是从 template.importNode 来完成DOM的复制。而不是向React一样逐个Dom节点的创建。
对于较大的DOM，这个首次渲染的效率会高很多。&lt;&#x2F;li&gt;
&lt;li&gt;在增量更新的过程中，LitHtml 和 React 相类似，都是按照相同层次的节点重用的方式，
React通过 diff(VDOM, DOM)来实现增量更新，而LitHtml并没有使用diff算法，而是基于相同模板的渲染，
只需要对动态部分进行更新即可。两者殊途同归，但LitHtml的计算过程更加轻巧。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;那么，LitHtml是如何处理大数组循环对应的 DOM 更新呢？如下面的例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;ul&amp;gt; ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;li&amp;gt;item ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&amp;lt;&#x2F;li&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) } &amp;lt;&#x2F;ul&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;),   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当 items 删除掉 1 时，上面的代码，其实是对所有行都更新了，而最小的成本，应该是直接将第一行删除，保留其他的DOM节点。&lt;&#x2F;p&gt;
&lt;p&gt;很遗憾，LitHtml并不会自动帮你做这个优化，不过，你可以使用 LitHtml 的 Repeat 指令，参考如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@lit-html&#x2F;directives&#x2F;repeat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;li&amp;gt;item ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&amp;lt;&#x2F;li&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myTemplate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;实际上，LitHtml开放了 Part 的操作API，这使得我们可以对标准的渲染行为进行定制，比如这里的repeat就是这样的一次定制。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;litelement&quot;&gt;LitElement&lt;&#x2F;h1&gt;
&lt;p&gt;基于 LitHtml 这个高效的渲染引擎，LiElement 其实只是一个非常轻量级的 WebComponent 封装，主要的特性包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;WebComponent 生命周期模型支持。&lt;&#x2F;li&gt;
&lt;li&gt;单向的数据绑定模型。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;hou-xu&quot;&gt;后续&lt;&#x2F;h2&gt;
&lt;p&gt;后续有机会，我会进一步分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;LitElement vs PolymerElement 比较一下主要的特征，是否会对应用开发更友好。&lt;&#x2F;li&gt;
&lt;li&gt;why one-way databinding and why not two-way databinding ?
双向数据绑定是Polymer的一个重要特征，可是LitElement放弃了该特性，采用了与React一致的单项数据绑定。
对此，我个人持有不同意见，也希望在后续的阶段进一步的对这2种模式进行分析。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>账务系统设计及应用</title>
        <published>2016-06-15T00:00:00+00:00</published>
        <updated>2016-06-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://wangzaixiang.github.io/blog/account-system/"/>
        <id>https://wangzaixiang.github.io/blog/account-system/</id>
        
        <content type="html" xml:base="https://wangzaixiang.github.io/blog/account-system/">&lt;p&gt;摘要：本文来自中生代技术交流群的分享。分享者：王在祥，现任快塑网 CTO，具有20年IT从业经验，目前负责大宗商品电商快塑网的B2B平台，
有丰富的产品和研发管理经验。本文将分享来自实战的关于电商B2B平台账务系统设计经验。 &lt;a href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;I8A_zF6MTkMle8o6uI8Wag&quot;&gt;原文连接&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;王在祥
20年IT从业经验，混战过银行、航空旅游等行业。全栈工程师。编程语言爱好者、新轮子爱好者、scala爱好者。混迹过银行、航空旅游等行业，
担任过 易网通商旅 CTO、好易电子联行 CTO，现任快塑网 CTO。唯品会SOA架构OSP创建者。业余马拉松爱好者。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;本次分享的主题是“帐务系统设计及其在电商的应用”，主要介绍复式记账方法，以及其在电商中的应用。&lt;&#x2F;p&gt;
&lt;p&gt;内容概要&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;背景介绍&lt;&#x2F;li&gt;
&lt;li&gt;复式记账法&lt;&#x2F;li&gt;
&lt;li&gt;帐务系统基本要素&lt;&#x2F;li&gt;
&lt;li&gt;在电商平台的应用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;bei-jing-jie-shao&quot;&gt;背景介绍&lt;&#x2F;h1&gt;
&lt;p&gt;首先申明一下，这一块并不是定位于专业的财务系统而谈的，我本人也没有专业的财务知识和相关工作经验。但是很多的业务系统、电商系统都涉及到资金的结算问题，
而且这一块往往也是业务中最为复杂的一块，大部分的技术人员并不懂财务知识，往往采用一些类似于”收付记账“的思路，来记录资金的变化，往往会越往后走，
系统越来越复杂，而且资金之间的关系也会越来越混乱，账算不清楚，也会带来财务安全方面的很多问题。我之前有过银行核心系统建设的一些经验，
感觉将这一块的思路应用在非财务系统中，可以化繁为简、以静制动，管好钱和账，往往能够起到很神奇的效果。&lt;&#x2F;p&gt;
&lt;p&gt;比如说对快塑网，我们的订单就涉及到复杂的资金结算关系，由于是大宗商品，客单价很高，线下的业务流程比较复杂，收付款一块的复杂度是很高的，
传统的方式，是收付款在独立的财务系统中解决，但这样，又难以和运营流程很好的结合起来。我们之前就是采用类似于”收付记账“的方法，简单的纪录收付款流水，
这种方式随着业务的变化、以及运营的精细化，越来越难移满足要求。举个简单的例子，单单订单收款流水，就要考虑到不同的收款渠道
（银行转账、资金帐户、金融贷款、预收款）、收款用途（保证金、货款、运费、违约金）。&lt;&#x2F;p&gt;
&lt;p&gt;再其次，我们需要在内部对订单进行精细化的核算，区分订单内的货物毛利、物流毛利、金融毛利，而每一项毛利又需要核算采购端、销售端的比例。
而且这个是一个不断变化的过程，随着不同的订单的收款时间、付款时间、收款方式、付款方式、订单的履约情况而变化，想想，要把这么多财务数据核算清楚，
采用传统的“业务流水”是一件非常困难，乃至不可能的任务。&lt;&#x2F;p&gt;
&lt;p&gt;再其次，我们需要在内部对订单进行精细化的核算，区分订单内的货物毛利、物流毛利、金融毛利，而每一项毛利又需要核算采购端、销售端的比例。
而且这个是一个不断变化的过程，随着不同的订单的收款时间、付款时间、收款方式、付款方式、订单的履约情况而变化，想想，要把这么多财务数据核算清楚，
采用传统的“业务流水”是一件非常困难，乃至不可能的任务。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;fu-shi-ji-zhang-fa&quot;&gt;复式记账法&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img.png&quot; alt=&quot;img.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其实，刚才说的这些问题，在专业的财务系统中可能并不是一个很大的问题。其实，传统的财务系统，也是采用“收付”记账法的方式进行的，有些类似于我们搞一个Excel，
很简单的几列： 时间、 收款金额、付款金额、用途，等等。但这种方式很难以解决企业运作中复杂的资金关系，因此，现在已经废弃掉了。现在的财务系统，
都是采用“复式记账”的方式。&lt;&#x2F;p&gt;
&lt;p&gt;程序员一般都不懂会计知识，不过，我建议大家都做一些了解。会计知识不仅可以应用于我们的软件设计，而且也可以帮助我们去阅读一个公司的财报，
顺便做一点“价值投资”的事情，说不定赚的比工程师要多很多呢。:)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_1.png&quot; alt=&quot;img_1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;复式记账法的核心思想是会计恒等式：资产 ＝ 负债 ＋ 所有者权益。这个也是所有的企业财务报表的核心。 银行帐户资金、应收款、预收款、固定资产
（电脑、办公桌椅）等都属于资产，短期借款、应付款、预售款等都是负债，而公积金、未分配利润、实收资本等等属于所有这权益。 一般的，在业务运营类系统中，
不太会涉及到所有者权益这一类的帐户。&lt;&#x2F;p&gt;
&lt;p&gt;作为会计恒等式的一个扩展：资产 ＋ 支出（费用）＝ 负债 ＋ 所有者权益 ＋ 收入（收益），收入、支出这两类帐户是企业运作过程中的最为常见的业务，
比如销售收入、采购支出、费用补贴、利息收入、利息支出等等。收入类帐户的性质与负债类相似，是在等式的右边。支出类帐户的性质与资产类相似，是在等式的左边。&lt;&#x2F;p&gt;
&lt;p&gt;对于初次接触会计知识的同学，这些是非常绕口的。收入为什么和负债在一起，明明收入构成了我的资产啊，而费用怎么又与资产在一起，明明费用是我的”负债“啊？
这些，是很难解释清楚的。建议，初次接触会计知识的同学，千万不要纠结于这些”绕口“的概念，大不了把帐户结构明确打印出来，照单接收，不理解也不要纠结。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_2.png&quot; alt=&quot;img_2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_3.png&quot; alt=&quot;img_3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照会计等式，任何一项经济业务都会引起资产与权益之间至少两个项目发生增减变动，而且增减变动的金额相等。因此对每一笔经济业务的发生，都可以以相等的
金额在两个或两个相关账户中作等额双重记录。这种记账如实反映了经济事物的客观联系，是一种科学的记账方法。其实，在“收付”记账中，我们已经隐含了这个因素，
我们会补充纪录一下本次收付款的“用途”，其实，也就是描述对方的一些性质。知识，复式记账法把这一块标准化了，是对“收付记账”的一次科学的升级。&lt;&#x2F;p&gt;
&lt;p&gt;对帐户的变更记录有2种：借记、贷记。对不同性质的帐户（也可以称呼为会计科目），定义是不一样的。比如资产类帐户，例如存款，会导致帐户余额增加，
我们称之为“借记”，如果是取款，会导致帐户余额减少，我们称之为“贷记”，而对负债类帐户，比如收到预付款，会导致余额增加，我们称之为“贷记”，
而归还预付款或者使用预付款，会导致余额减少，我们称之为“借记”，这个可以参考上述的表格。&lt;&#x2F;p&gt;
&lt;p&gt;再次“友情提示”，为什么银行存款增加是“借记”，我们根本没有借款啊？大家千万不要纠结于这个字眼，此借非彼借。如果搞不懂，直接查查表，千万别纠字眼。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zhang-wu-xi-tong-ji-ben-yao-su&quot;&gt;帐务系统基本要素&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_4.png&quot; alt=&quot;img_4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里介绍一下帐务系统的一些基本概念。这些概念也只是我们之前在银行核心系统中的一些约定，并不代表是”行业标准“。&lt;&#x2F;p&gt;
&lt;p&gt;关于“帐户”，会计帐户，也称之为“会计科目”，另外，我们还会有业务帐户，比如对”预收款“，我们会对每一个客户设立一个业务帐户。这两个帐户是在两个不同的体系中的，
一个是会计层面，一个是业务层面，但又有相关性：会计帐户一般是对应的”业务帐户“的汇总。我们也把”业务帐户“称之为”分户账“。&lt;&#x2F;p&gt;
&lt;p&gt;有两种记账的模式，一种是直接操作“科目”，对其进行借记、贷记，这种方式会记录会计记账流水，同时更新客户的余额。另外一种是只操作业务帐户，
比如存款、取款等操作，只修改分户账，记录业务流水。而定时的（比如在每天日结时），对当天的业务流水进行批量处理，再记录会计流水、更新会计科目的余额。
两种方式各有优缺点，批量的方式将记账延后，性能可能更高，而且，一些中间的操作（譬如取消的流水）无需处理。而实时操作复杂性要高很多，但实时操作可以
实时的反应会计科目的最新余额，也是有价值的。具体如何选取，在实践中需要平衡，根据业务需要选取。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_5.png&quot; alt=&quot;img_5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_6.png&quot; alt=&quot;img_6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一般的，会计科目我们不会选择“自增”的方式，而是和财务人员一起协商，确定一个有意义的编码，这个对于后续的交流，是非常有帮助的。比如说，我们在银行的时候，
我们的活期存款的科目是：02870100，这个代号是有一定的业务含义的，这是一个二级科目，一级 0287 代表活期，奇数结尾时负债类科目
（与企业不同，在银行，存款时负债而非资产），01 是二级，这个科目没有下设子科目。&lt;&#x2F;p&gt;
&lt;p&gt;科目之间的父子关系：比如说 定期存款 有1年定期、2年定期、3年定期等组成，可以设立“定期存款”科目和“1年定期存款”科目，两者是父子关系。一般的，
父科目的余额是全部子科目余额的总和，具有子科目的父科目，不应该直接进行记账操作。否则会导致数据的矛盾。&lt;&#x2F;p&gt;
&lt;p&gt;一般的，不同的业务流水，会有不同的记账方式，具体而言，就是要借记哪些帐户、贷记哪些帐户，相应的记账金额如何确定？这些一般是在业务设计时就需要确定的，
开发可以写死在代码中，也可以考虑使用配置的方式来进行。考虑到如何记账是一个相对易变的行为（不同时期、不同的业务模式、不同的管理策略，
都可能调整同一笔业务流水的记账方式），采用配置的方式可以更敏捷的应对这种变化，而且，将这一块的逻辑从业务流水中解偶出来，也是很有价值的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_7.png&quot; alt=&quot;img_7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来，我们介绍一下“平衡体系”，这里有静态的平衡： 资产 ＝ 负债 ＋ 所有者权益， 也有动态的平衡，即每一笔会计流水，都要满足： 有借必有贷，借贷必相等。&lt;&#x2F;p&gt;
&lt;p&gt;有了这两个平衡关系，我们在每天（或者每个周期开始），应该满足静态平衡，在每个日终（或者周期结束），也应该满足静态平衡。任何时候，系统的这个平衡关系出现打破，
一定是系统出现了BUG。一个能够自我平衡和问题检测的系统，是多么优美的一件事情，这也也是“复式记账法”带来的一个优势价值。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_8.png&quot; alt=&quot;img_8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;第二个平衡是“总分一致”，即总账 ＝ ∑分户账。&lt;&#x2F;p&gt;
&lt;p&gt;比如在银行系统中，每天众多的存款、取款、开户、销户操作，分户账的变化是频繁的，这个和总账是否一致，也是非常重要的。我们早期的银行系统，由于安全性
的问题，经常会出现一些内部人员作案的情况。比如，我直接操作我们帐户，将存款余额增加100万，如果不进行总分核对，就可能查询不出来。&lt;&#x2F;p&gt;
&lt;p&gt;由于总账有自己的平衡体系（外加业务监控管理体系），再加上总分核对（我们不可能每天对上万的分帐户进行逐一核查），我们基本上可以实现业务系统的
关键数据的“自平衡”检查。这个对于防范业务风险是非常有必要的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_9.png&quot; alt=&quot;img_9.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了系统间的平衡关系之外，还有一个很重要的平衡：“账款一致”，账是系统内的帐户（科目）余额，是个数字，款是实在的现金，是我们在银行帐户的余额
（对银行核心系统，就是柜台钱箱中的现金）是需要一致的。这个平衡是非常有作用的。&lt;&#x2F;p&gt;
&lt;p&gt;静态平衡 ＋ 动态平衡 ＋ 总分核对 ＋ 账款一致， 这几个平衡关系一环套一环，构建了一套非常优美、完善的自平衡体系，即包括会计总账、也涉及到分户账，
并和“现金”这个实体概念进行核对。这一系列的平衡关系，确保帐户数据的一致性、安全性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_10.png&quot; alt=&quot;img_10.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;另外，如果直接修改某2个帐户，而不记录业务流水（业务流水有别的方式进行核查），那么是否可以破坏呢？这一块，在银行体系中也有对应的安全措施，
比如加上MAC字段，手工修改数据库的成本就大为增加。另外，采用binlog相结合的方式，也可以检查出没有正常业务流水的“直接修改帐户”的操作，
从而进一步的增加整个帐务系统的安全性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_11.png&quot; alt=&quot;img_11.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zai-dian-shang-ping-tai-de-ying-yong&quot;&gt;在电商平台的应用&lt;&#x2F;h1&gt;
&lt;p&gt;下面，我就附上2个应用这一方法的实践。可供大家参考。&lt;&#x2F;p&gt;
&lt;p&gt;其一是在腾讯电商时应用于电商支付结算。
&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_12.png&quot; alt=&quot;img_12.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_13.png&quot; alt=&quot;img_13.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_14.png&quot; alt=&quot;img_14.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其二是目前我们在快塑网应用的订单结算。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_15.png&quot; alt=&quot;img_15.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们在快塑网应用“复式记账”来应对订单结算时，是享受到了这张模式带给我们的“红利”的。简单的来说，在应用“收付”记账模式时，要表达复杂的资金关系是非常困难的。
采用了“复式记账”模式后，这个困难从“开发团队”转移到了“产品团队”，只要产品层面能够清晰的描述出来，开发的实现就变得简单，基本上是一个翻译的工作。&lt;&#x2F;p&gt;
&lt;p&gt;合理的设置好帐户结构、以及确定好每一笔业务流水的记账方式（这一方面可以请教公司的财务专家），剩下的问题就迎刃而解了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_16.png&quot; alt=&quot;img_16.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是我们的订单结算所涉及到的帐户结构。&lt;&#x2F;p&gt;
&lt;p&gt;这个帐务结构的设计，是“非专业的“，我们是站在业务运营的角度上，并没有刻意的追求是否符合”财务“标准。不过，有一些财务经验还是会很有帮助的。
这一块，也可以咨询公司的财务同事，获得建议。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wangzaixiang.github.io&#x2F;blog&#x2F;account-system&#x2F;img_17.png&quot; alt=&quot;img_17.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是一个业务流水，如何进行记账的范例。同样，也是“非财务专业”的。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
